{"version":3,"file":"userData.js","sourceRoot":"","sources":["../../../Data/User/userData.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,OAAO,EAAE,SAAS,EAAE,WAAW,EAAE,MAAM,iBAAiB,CAAC;AAEzD,OAAO,EAAE,MAAM,EAAE,MAAM,4BAA4B,CAAC;AACpD,OAAO,EAAE,SAAS,EAAE,MAAM,kBAAkB,CAAC;AAK7C,MAAM,CAAC,IAAM,uBAAuB,GAAgC,MAAM,CAAC,MAAM,CAAC;IAC9E,qBAAqB,EAAE,uBAAuB;IAC9C,qBAAqB,EAAE,uBAAuB;IAC9C,gBAAgB,EAAE,kBAAkB;CACvC,CAAC,CAAC;AACH,MAAM,CAAC,IAAM,sBAAsB,GAAG,UAAC,KAAY,IAAK,OAAA,SAAS,CAAC,SAAS,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE,KAAK,CAAC;KAC5G,GAAG,CAAC,UAAC,YAAiB;IAAjB,6BAAA,EAAA,iBAAiB;IAAK,OAAA,YAAY;AAAZ,CAAY,CAAC,EADW,CACX,CAAC;AAC9C,MAAM,CAAC,IAAM,yBAAyB,GAAG,UAAC,QAA6B,IAAK,OAAA,WAAW,YAAG,GAAG,EAAE,SAAS,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,OAAO,EAAE,CAAC,QAAQ,IAAK,QAAQ,EAAG,EAA1E,CAA0E,CAAC;AAGvJ,MAAM,CAAC,IAAM,cAAc,GAAG;IAC1B,OAAO,MAAM,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,UAAC,CAAe,IAAK,OAAA,CAAC,CAAC,cAAc,EAAhB,CAAgB,CAAC,CAAC;AACvE,CAAC,CAAA;AAED,MAAM,CAAC,IAAM,WAAW,GAAG,UAAC,CAA0B,IAAK,OAAA,cAAc,EAAE;KACtE,KAAK,CAAC,UAAA,cAAc,IAAI,OAAA,MAAM,CAAC,EAAE,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAlC,CAAkC,CAAC;KAC3D,GAAG,CAAC,UAAC,QAAa;IAAb,yBAAA,EAAA,aAAa;IAAK,OAAA,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;AAAlB,CAAkB,CAAC,EAFY,CAEZ,CAAA;AAC/C,MAAM,CAAC,IAAM,gBAAgB,GAAG,cAAM,OAAA,WAAW,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,QAAQ,EAAE,qBAAqB,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,aAAa,CAAC,EAA3D,CAA2D,CAAC,EAA7E,CAA6E,CAAC;AACpH,MAAM,CAAC,IAAM,gBAAgB,GAAG,cAAM,OAAA,gBAAgB,EAAE,CAAC,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAnB,CAAmB,CAAC,EAAvD,CAAuD,CAAC","sourcesContent":["import { getEntity, patchEntity } from \"~/Util/apiUtils\";\r\nimport { KeyMap, Query } from \"~/Data/DataInterfaces\";\r\nimport { option } from \"~/Util/fp/Instances/Option\";\r\nimport { NudgeUris } from \"~/Uris/NudgeUris\";\r\n\r\nimport { License, CurrentUserSettings } from \"./UserInterfaces\";\r\n\r\n\r\nexport const currentUserSettingsKeys: KeyMap<CurrentUserSettings> = Object.freeze({\r\n    conversationsDefaults: \"conversationsDefaults\",\r\n    relationshipsDefaults: \"relationshipsDefaults\",\r\n    orgChartDefaults: \"orgChartDefaults\",  \r\n});\r\nexport const getCurrentUserSettings = (query: Query) => getEntity(NudgeUris.v2.users().current().settings, query)\r\n    .map((userSettings = {}) => userSettings);\r\nexport const updateCurrentUserSettings = (settings: CurrentUserSettings) => patchEntity({ uri: NudgeUris.v2.users().current().settings, ...settings });\r\n\r\n\r\nexport const getCurrentUser = () => {\r\n    return option.of(Nudge).map((n: typeof Nudge) => n.userDetailData);\r\n}\r\n\r\nexport const getLicenses = (f: (l: License) => boolean) => getCurrentUser()\r\n    .chain(userDetailData => option.of(userDetailData.licenses))\r\n    .map((licenses = []) => licenses.filter(f))\r\nexport const getValidLicenses = () => getLicenses(l => [\"active\", \"cancellationPending\"].includes(l.licenseStatus));\r\nexport const hasValidLicenses = () => getValidLicenses().map(licenses => licenses.length > 0);\r\n\r\n"]}