{"version":3,"file":"conversationData.js","sourceRoot":"","sources":["../../../../Data/Team/Conversation/conversationData.ts"],"names":[],"mappings":"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","sourcesContent":["import { addDays, max, differenceInCalendarDays, isSameDay } from \"date-fns\";\r\n\r\nimport { Cache } from \"~/Data/DataInterfaces\";\r\nimport { Person } from \"~/Data/NudgeInterfaces\";\r\n\r\nimport { groupBy, range } from \"~/Util/fp/array\";\r\nimport { toUTCDate } from \"~/Util/dateUtils\";\r\nimport NudgeIterable from \"~/Util/NudgeIterable\";\r\nimport { tryCatch } from \"~/Util/fp/Instances/Option\";\r\nimport { mapEntries } from \"~/Util/fp/object\";\r\nimport { NudgeUris } from \"~/Uris/NudgeUris\";\r\nimport { getAllEntities } from \"~/Util/apiUtils\";\r\nimport { Task } from \"~/Util/fp/Instances/Task\";\r\n\r\ninterface Entity {\r\n    uri: string;\r\n}\r\ninterface Conversation {\r\n    user: Entity;\r\n    contact: Entity;\r\n}\r\ninterface MapByEntity {\r\n    [uri: string]: {\r\n        [uri: string]: {\r\n            outreachCount: boolean;\r\n            response: boolean;\r\n            meeting: boolean;\r\n            lastInbound: string;\r\n            lastOutbound: string;\r\n            lastMeeting: string;\r\n        };\r\n    };\r\n}\r\n\r\nexport const conversationDisplayTypes = {\r\n    user: \"user\",\r\n    contact: \"contact\",\r\n};\r\n\r\nexport const formatCompanyTeamConversations = (people: []) => Task.of(people)\r\n    .map((people: Person[] = []) => NudgeIterable.fromArray(people)\r\n        .flatMap(p => tryCatch(() => ({ ...p, jobTitle: p.title }))\r\n            .chain(person => tryCatch(() => p.teamInteractions)\r\n                .chain(interactions =>\r\n                    tryCatch(() => ([\r\n                        {\r\n                            type: \"mostRecentEmailInbound\",\r\n                            date: interactions.lastInbound,\r\n                            user: interactions.lastInboundTeamMember,\r\n                            person,\r\n                        },\r\n                        {\r\n                            type: \"mostRecentEmailOutbound\",\r\n                            date: interactions.lastOutbound,\r\n                            user: interactions.lastOutboundTeamMember,\r\n                            person,\r\n                        },\r\n                        {\r\n                            type: \"mostRecentMeeting\",\r\n                            date: interactions.lastMeeting,\r\n                            user: interactions.lastMeetingTeamMember,\r\n                            person,\r\n                        },\r\n                        {\r\n                            type: \"nextMeeting\",\r\n                            date: interactions.nextMeeting,\r\n                            user: interactions.nextMeetingTeamMember,\r\n                            person,\r\n                        },\r\n                    ].filter(i => !!i.date)))\r\n                        .map(NudgeIterable.fromArray)))\r\n            .getOrElse(() => NudgeIterable.fromArray([]))))\r\n    .map(iter => iter.toArray())\r\n    .map(groupBy(({ user = {}, person = {} }) => tryCatch(() => user.uri)\r\n        .chain(userUri => tryCatch(() => person.uri)\r\n            .map(personUri => `${userUri}_${personUri}`))\r\n        .getOrElse(() => \"\")))\r\n    .map(mapEntries((_, conversations) => conversations\r\n        .reduce((acc, { type, date, user, person }) => ({\r\n            ...acc,\r\n            [type]: date,\r\n            user,\r\n            person,\r\n        }), {} as any)))\r\n    .map(groupBy(conversations =>\r\n        tryCatch(() => conversations.user.uri)\r\n            .getOrElse(() => \"\")))\r\n    .map(mapEntries((_, aggregateList) =>\r\n        tryCatch(() => aggregateList[0])\r\n            .map(({ user }: { user: Partial<Person> }) => ({\r\n                user: { ...user, jobTitle: user.title },\r\n                aggregateList,\r\n            }))\r\n            .getOrElse(() => undefined)));\r\n\r\n\r\nexport const getCompanyTeamConversations = (companyUri = \"\", teamUri = \"\", maxConversationDays = 60, cache?: Cache) =>\r\n    getAllEntities(NudgeUris.v2.people()._uri, {\r\n        fields: `uri,name,title,imageUrl,teamInteractions(lastInbound,lastInboundTeamMember(uri,name,title,imageUrl),` +\r\n            `lastOutbound,lastOutboundTeamMember(uri,name,title,imageUrl),` +\r\n            `lastMeeting,lastMeetingTeamMember(uri,name,title,imageUrl))`,\r\n        q: `company.uri:\"${companyUri}\" AND (teamInteractions.now_lastInbound:[0 TO ${maxConversationDays}] OR teamInteractions.now_lastOutbound:[0 TO ${maxConversationDays}] OR teamInteractions.now_lastMeeting:[0 TO ${maxConversationDays}])`,\r\n        team: teamUri,\r\n        limit: 99,\r\n        aggregation: \"none\",\r\n        hint: \"analytics\",\r\n    }, { cache })\r\n        .chain(formatCompanyTeamConversations);\r\n\r\nexport const generateInitialHeatmaps = (today: Date, dayRange = 1) =>\r\n    range(dayRange).map(i => ({\r\n        date: new Date(addDays(today, -i)),\r\n        conversations: [],\r\n        sortedConversations: [],\r\n    }));\r\nexport const getSortedConversations = (conversations: Conversation[]) => ({\r\n    conversations,\r\n    sortedConversationsByUser: groupBy<Conversation>(({ user = { uri: \"\" } }) => user.uri)(conversations),\r\n    sortedConversationsByContact: groupBy<Conversation>(({ contact = { uri: \"\" } }) => contact.uri)(conversations),\r\n});\r\nexport const formatConversations = (conversations = [], conversationDays = 30) => {\r\n    const today = new Date();\r\n    const initialHeatmaps = generateInitialHeatmaps(today, conversationDays + 1);\r\n    const inboundOutboundByUser: MapByEntity = {};\r\n    const inboundOutboundByContact: MapByEntity = {};\r\n    const nextMeetings: (Conversation & { nextMeeting: string })[] = [];\r\n\r\n    conversations.forEach(({ user = { uri: \"\" }, aggregateList = [] }) => {\r\n        aggregateList.forEach(\r\n            ({ mostRecentEmailInbound = \"\", mostRecentEmailOutbound = \"\", mostRecentMeeting = \"\", nextMeeting = \"\", person: contact = { uri: \"\" } }) => {\r\n                const datesByUTC = [mostRecentEmailInbound, mostRecentEmailOutbound, mostRecentMeeting]\r\n                    .filter(Boolean)\r\n                    .map(toUTCDate);\r\n                const lastInteraction = max(...datesByUTC);\r\n                const dayDiff = differenceInCalendarDays(today, lastInteraction);\r\n                const currentMap = {\r\n                    outreachCount: !!mostRecentEmailOutbound && isSameDay(lastInteraction, toUTCDate(mostRecentEmailOutbound)),\r\n                    response: !!mostRecentEmailInbound && isSameDay(lastInteraction, toUTCDate(mostRecentEmailInbound)),\r\n                    meeting: isSameDay(lastInteraction, toUTCDate(mostRecentMeeting)),\r\n                    lastInbound: mostRecentEmailInbound,\r\n                    lastOutbound: mostRecentEmailOutbound,\r\n                    lastMeeting: mostRecentMeeting,\r\n                };\r\n                const { conversations: dayConversations = [] as Conversation[] } = initialHeatmaps[dayDiff] || {};\r\n\r\n                if (dayConversations) {\r\n                    dayConversations.push({\r\n                        user,\r\n                        contact,\r\n                    });\r\n                }\r\n                inboundOutboundByUser[user.uri] = inboundOutboundByUser[user.uri] || {};\r\n                inboundOutboundByContact[contact.uri] = inboundOutboundByContact[contact.uri] || {};\r\n                inboundOutboundByUser[user.uri][contact.uri] = currentMap;\r\n                inboundOutboundByContact[contact.uri][user.uri] = currentMap;\r\n\r\n                if (nextMeeting) {\r\n                    nextMeetings.push({\r\n                        nextMeeting,\r\n                        user,\r\n                        contact,\r\n                    })\r\n\r\n                }\r\n            },\r\n        );\r\n    });\r\n\r\n    const heatmaps = initialHeatmaps.map(day => ({\r\n        ...day,\r\n        ...getSortedConversations(day.conversations),\r\n    }));\r\n    const sortedConversations = heatmaps.filter(({ conversations = [] }) => conversations.length > 0);\r\n\r\n    return { heatmaps, sortedConversations, nextMeetings, inboundOutboundByUser, inboundOutboundByContact };\r\n};\r\n"]}