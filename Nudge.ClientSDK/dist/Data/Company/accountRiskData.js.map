{"version":3,"file":"accountRiskData.js","sourceRoot":"","sources":["../../../Data/Company/accountRiskData.ts"],"names":[],"mappings":"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","sourcesContent":["import { Communication, getAllCommunications, getLastCommunication } from \"~/Data/Interactions/InteractionsData\";\r\nimport { Person, Company, Interactions } from \"../NudgeInterfaces\";\r\nimport { option } from \"~/Util/fp/Instances/Option\";\r\nimport { hasStrongTeamRelationship, hasTeamStrength, strengthOrderingToStrength, strengthToOrdering, RelationshipStrength } from \"~/Data/Person/Relationship/relationshipData\";\r\nimport { List } from \"~/Util/fp/Instances/List\";\r\nimport { toPairs, map as objMap, fromPairs } from \"~/Util/fp/object\";\r\nimport { Pair } from \"~/Util/fp/Instances/Pair\";\r\nimport { constant } from \"~/Util/fp/function\";\r\n\r\n// enum AccountRisk {\r\n//     slipping = \"slipping\",\r\n//     noStrongRelationships = \"noStrongRelationships\",\r\n//     singleThreaded = \"singleThreaded\",\r\n//     missingExecs = \"missingExecs\",\r\n//     weakenedExecs = \"weakenedExecs\",\r\n// }\r\ninterface CommunicationSummary {\r\n    allContact: Communication[];\r\n    lastContact: Communication;\r\n}\r\ninterface RelationshipsSummary {\r\n    activeRelationships: number;\r\n    strongRelationships: number;\r\n}\r\ninterface ByUri<A> {\r\n    [uri: string]: A;\r\n}\r\ntype PeopleByUri = ByUri<Partial<Person>[]>;\r\ntype PeopleAndSummaryByUri = ByUri<Pair<Partial<Person>[], Record<string, any>>>;\r\ninterface AccountRelationshipsSummary {\r\n    allRelationships: PeopleAndSummaryByUri;\r\n    strongRelationships: PeopleAndSummaryByUri;\r\n    weakenedRelationships: PeopleAndSummaryByUri;\r\n}\r\n\r\nexport const getLastContact = (people: Partial<Person>[]): CommunicationSummary | undefined =>\r\n    option.of(people)\r\n        .map(getAllCommunications)\r\n        .map(communications => ({\r\n            allContact: communications,\r\n            lastContact: getLastCommunication(communications)\r\n        }))\r\n        .getOrElse(() => undefined);\r\n\r\nexport const getTeamRelationshipSummary = (entity: Partial<Company> | Partial<Person>): RelationshipsSummary =>\r\n    option.of(entity.teamInteractions)\r\n        .chain(interactions => option.of((activeRelationships: number) => (strongRelationships: number) => ({ activeRelationships, strongRelationships }))\r\n            .ap(option.of(interactions.activeRelationships))\r\n            .ap(option.of(interactions.strongRelationships)))\r\n        .getOrElse(() => ({ activeRelationships: 0, strongRelationships: 0 }));\r\n\r\ntype CombinedInteractionsPerson = Partial<Person> & { allInteractions: Interactions[] };\r\nconst combineInteractions = (people: Partial<Person>[]) =>\r\n    people.reduce<CombinedInteractionsPerson>(\r\n        (acc, { teamInteractions, ...restPerson }) => option.of(teamInteractions)\r\n            .map(interactions => ({ ...restPerson, allInteractions: acc.allInteractions.concat(interactions) }))\r\n            .getOrElse(() => acc),\r\n        { allInteractions: [] });\r\n\r\ninterface TeamStrength {\r\n    strength: RelationshipStrength;\r\n    maxStrength: RelationshipStrength;\r\n}\r\ntype CombinedStrengthsPerson = Partial<Person> & { teamStrength: TeamStrength };\r\nconst summarizePeople = <A>(f: (people: Partial<Person>[]) => A) => (peopleByUri: PeopleByUri) =>\r\n    toPairs(peopleByUri)\r\n        .map(pairs => pairs\r\n            .map(people => Pair.of(f(people), people)));\r\n\r\nconst getMaxStrengths = (people: Partial<Person>[]) =>\r\n    people.map(p => option.of(p.teamInteractions)\r\n        .chain(interactions => option.of(interactions.strength)\r\n            .chain(strength => option.of(interactions.maxStrength)\r\n                .map(maxStrength => Pair.of(strength, maxStrength)\r\n                    .bimap(strengthToOrdering, strengthToOrdering))))\r\n        .getOrElse(() => Pair.of(RelationshipStrength.none, RelationshipStrength.none).bimap(strengthToOrdering, strengthToOrdering)))\r\n        .reduce(\r\n            (acc, strengths) => Pair.of(Math.max(strengths.fst(), acc.fst()), Math.max(strengths.snd(), acc.snd())),\r\n            Pair.of(RelationshipStrength.none, RelationshipStrength.none).bimap(strengthToOrdering, strengthToOrdering));\r\n\r\ntype SummaryPeople = Pair<string,Pair<Record<string,any>,Partial<Person>[]>>;\r\nconst personUri = (p: Partial<Person>) => p.uri || \"\";\r\nexport const getTeamAccountRelationshipSummary = (people: Partial<Person>[]) =>\r\n    option.of(List.fromArray(people))\r\n        .chain(people => option.of(\r\n            (allRelationships: SummaryPeople[]) => (strongRelationships: SummaryPeople[]) => (weakenedRelationships: SummaryPeople[]) =>\r\n                ({ allRelationships, strongRelationships, weakenedRelationships }))\r\n            .ap(option.of(people.filter(hasTeamStrength.run).groupBy(personUri))\r\n                .map(summarizePeople(constant({}))))\r\n            .ap(option.of(people.filter(hasStrongTeamRelationship.run).groupBy(personUri))\r\n                .map(summarizePeople(constant({}))))\r\n            .ap(option.of(people.groupBy(personUri))\r\n                .map(summarizePeople(getMaxStrengths))\r\n                .map(peoplePairs => peoplePairs\r\n                    .filter(personPair => personPair.snd().fst().fst() !== personPair.snd().fst().snd())\r\n                    .map(personPair => personPair.map(summaryPerson => summaryPerson\r\n                        .merge((strengths, people) => Pair.of(\r\n                            strengths\r\n                                .bimap(strengthOrderingToStrength, strengthOrderingToStrength)\r\n                                .merge((strength, maxStrength) => ({ strength, maxStrength })),\r\n                            people)))))))\r\n        .map(objMap((_, arr) => arr.map(byUri => byUri.map(summaryPerson => summaryPerson.map(combineInteractions)))))\r\n        .map(objMap((uri, pairs) => fromPairs(pairs.map(pair => pair.map(summaryPerson => summaryPerson.merge((summary, person) => ({ summary, person })))))))\r\n        .getOrElse(() => ({ allRelationships: {}, strongRelationships: {}, weakenedRelationships: {} }));\r\n"]}