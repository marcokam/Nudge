{"version":3,"file":"flagData.js","sourceRoot":"","sources":["../../../../Data/Person/Metadata/flagData.ts"],"names":[],"mappings":"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","sourcesContent":["import { postEntity, getEntity } from \"~/Util/apiUtils\";\r\nimport { NudgeUris } from \"~/Uris/NudgeUris\";\r\nimport { option } from \"~/Util/fp/Instances/Option\";\r\nimport { List } from \"~/Util/fp/Instances/List\";\r\n\r\n\r\n\r\nenum FlaggedDataTypeEnum {\r\n    personName = \"personName\",\r\n    personDuplicate = \"personDuplicate\",\r\n    personImage = \"personImage\",\r\n    personBadMerge = \"personBadMerge\",\r\n    personBadData = \"personBadData\",\r\n}\r\ninterface FlaggedDataPayload {\r\n    person1?: { uri: string };\r\n    note?: string;\r\n    type: FlaggedDataTypeEnum;\r\n}\r\nexport type FlaggedDataReason = \"\" | \"cancelled\" | \"general\" | \"incorrectCompany\" | \"incorrectTitle\";\r\n\r\nexport const flaggedDataReason: {\r\n    none: FlaggedDataReason;\r\n    cancelled: FlaggedDataReason;\r\n    general: FlaggedDataReason;\r\n    incorrectCompany: FlaggedDataReason;\r\n    incorrectTitle: FlaggedDataReason;\r\n} = {\r\n    none: \"\",\r\n    cancelled: \"cancelled\",\r\n    general: \"general\",\r\n    incorrectCompany: \"incorrectCompany\",\r\n    incorrectTitle: \"incorrectTitle\",\r\n}\r\nconst flagData = (flaggedData: FlaggedDataPayload) => postEntity(NudgeUris.v2.userFlaggedDatas()._uri, flaggedData);\r\nconst flagPersonBadData = (personUri: string, note: string) => flagData({\r\n    person1: { uri: personUri },\r\n    note,\r\n    type: FlaggedDataTypeEnum.personBadData,\r\n});\r\nconst generateNote = (prefix = \"\", reason = flaggedDataReason.none) =>\r\n    [prefix, reason].filter(Boolean).join(\" \");\r\nexport const getPrefixAndReason = (note = \"\") => option.of(note)\r\n    .map(n => List.fromArray(n.split(\"\\n\"))\r\n        .map(l => l.split(\" \")))\r\n    .chain(l => l.optLast()\r\n        .map(([prefix = \"\", reason]) => ({ prefix, reason } as unknown as { prefix: string; reason: FlaggedDataReason })))\r\n    .getOrElse(() => ({ prefix: \"\", reason: flaggedDataReason.none }));\r\n\r\nexport const getCurrentFlaggedData = () => getEntity(NudgeUris.v2.userFlaggedDatas().currentUser, { q: `type:${FlaggedDataTypeEnum.personBadData}` });\r\nexport const flagProfileWithPrefixAndReason = (prefix = \"\", reason: FlaggedDataReason = \"\") => (personUri: string) => flagPersonBadData(personUri, generateNote(prefix, reason));\r\n"]}