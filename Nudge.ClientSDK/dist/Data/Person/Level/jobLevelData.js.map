{"version":3,"file":"jobLevelData.js","sourceRoot":"","sources":["../../../../Data/Person/Level/jobLevelData.ts"],"names":[],"mappings":"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","sourcesContent":["import { option } from \"~/Util/fp/Instances/Option\";\r\nimport { generateOrdering, numCompareByDir } from \"~/Util/sortUtils\";\r\nimport { Compare } from \"~/Util/fp/Instances/Compare\";\r\n\r\nexport enum JobLevel {\r\n    \"c_level\" = \"c_level\",\r\n    \"senior_vicepresident\" = \"senior_vicepresident\",\r\n    \"vicepresident\" = \"vicepresident\",\r\n    \"senior_director\" = \"senior_director\",\r\n    \"director\" = \"director\",\r\n    \"senior_manager\" = \"senior_manager\",\r\n    \"manager\" = \"manager\",\r\n    \"individual\" = \"individual\",\r\n    \"unknown\" = \"unknown\",\r\n}\r\nexport enum JobLevelDisplay {\r\n    \"C-Level\" = \"C-Level\",\r\n    \"VP\" = \"VP\",\r\n    \"Director\" = \"Director\",\r\n    \"Manager\" = \"Manager\",\r\n    \"Individual\" = \"Individual\",\r\n    \"Unknown\" = \"Unknown\",\r\n}\r\n\r\nconst typeToDisplayType: Record<JobLevel, JobLevelDisplay> = Object.freeze({\r\n    [JobLevel.c_level]: JobLevelDisplay[\"C-Level\"],\r\n    [JobLevel.senior_vicepresident]: JobLevelDisplay.VP,\r\n    [JobLevel.vicepresident]: JobLevelDisplay.VP,\r\n    [JobLevel.senior_director]: JobLevelDisplay.Director,\r\n    [JobLevel.director]: JobLevelDisplay.Director,\r\n    [JobLevel.senior_manager]: JobLevelDisplay.Manager,\r\n    [JobLevel.manager]: JobLevelDisplay.Manager,\r\n    [JobLevel.individual]: JobLevelDisplay.Individual,\r\n    [JobLevel.unknown]: JobLevelDisplay.Unknown,\r\n});\r\nexport const jobLevelTypeToDisplay = (jobLevel: JobLevel) => option.of(typeToDisplayType[jobLevel]).getOrElse(() => JobLevelDisplay.Unknown); \r\n\r\nconst { typeToOrdering: levelToOrdering, orderingToType: orderingToLevel } = generateOrdering(JobLevel);\r\nexport const jobLevelToOrdering = (jobLevel: JobLevel) => levelToOrdering(jobLevel).getOrElse(() => 0);\r\nexport const jobLevelOrderingToJobLevel = (ordering = 0) => orderingToLevel(ordering).getOrElse(() => JobLevel.unknown)\r\n\r\nconst { typeToOrdering: displayToOrdering, orderingToType: orderingToDisplay } = generateOrdering(JobLevelDisplay);\r\nexport const jobLevelDisplayToOrdering = (jobLevelDisplay: JobLevelDisplay) => displayToOrdering(jobLevelDisplay).getOrElse(() => 0);\r\nexport const jobLevelDisplayOrderingToJobLevelDisplay = (ordering = 0) => orderingToDisplay(ordering).getOrElse(() => JobLevelDisplay.Unknown);\r\n\r\nexport const levelIsEqual = (level: JobLevel, display: JobLevelDisplay) => jobLevelTypeToDisplay(level) === display;\r\nexport const levelsToDisplay = (levels: [JobLevel, Set<string>][]) => {\r\n    if (levels.length === 0) {\r\n        return levels;\r\n    }\r\n    // reduce on display keys to keep order\r\n    return Array.from(Object.keys(JobLevelDisplay).reduce((acc, k) => {\r\n        levels.filter(([l]) => levelIsEqual(l, k as JobLevelDisplay))\r\n            .forEach(([_, set]) => {\r\n                const prevLevel = acc.get(k);\r\n                const count = prevLevel ? prevLevel[1] + set.size : set.size;\r\n                acc.set(k, [k, count]);\r\n            });\r\n        return acc;\r\n    }, new Map()));\r\n};\r\nexport const byLevelDisplay = Compare.of(numCompareByDir(true)).contramap(jobLevelDisplayToOrdering);\r\n"]}