{"version":3,"file":"relationshipData.js","sourceRoot":"","sources":["../../../../Data/Person/Relationship/relationshipData.ts"],"names":[],"mappings":"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","sourcesContent":["import { max, differenceInCalendarDays, isToday, distanceInWordsStrict, startOfDay} from \"date-fns\";\r\n\r\nimport { Person, Interactions } from \"~/Data/NudgeInterfaces\";\r\n\r\nimport { tryCatch, option } from \"~/Util/fp/Instances/Option\";\r\nimport { Task } from \"~/Util/fp/Instances/Task\";\r\nimport { Pred } from \"~/Util/fp/Instances/Pred\";\r\nimport { toUTCDate } from \"~/Util/dateUtils\";\r\nimport { groupBy, optHead } from \"~/Util/fp/array\";\r\nimport { values } from \"~/Util/fp/object\";\r\nimport { JobLevel, jobLevelToOrdering } from \"~/Data/Person/Level/jobLevelData\";\r\nimport { Role } from \"~/Data/Person/Role/jobRoleData\";\r\nimport { hasStrengthTeamMember } from \"~/Data/Person/Recommender/personRecommenderData\";\r\nimport { Compare } from \"~/Util/fp/Instances/Compare\";\r\nimport { numCompareByDir, generateOrdering } from \"~/Util/sortUtils\";\r\nimport { Pair } from \"~/Util/fp/Instances/Pair\";\r\n\r\nexport enum RelationshipStrength {\r\n    none = \"none\",\r\n    veryWeak = \"veryWeak\",\r\n    weak = \"weak\",\r\n    medium = \"medium\",\r\n    strong = \"strong\",\r\n    veryStrong = \"veryStrong\"\r\n}\r\ninterface UserConnectionPerson {\r\n    uri: string;\r\n    name: string;\r\n    title: string;\r\n    imageUrl: string;\r\n    level: JobLevel;\r\n    roles: Role[];\r\n    company?: Company;\r\n    teamInteractions?: Interactions;\r\n}\r\ninterface Company {\r\n    uri: string;\r\n    name: string;\r\n    imageUrl: string;\r\n}\r\ninterface User {\r\n    uri: string;\r\n    name: string;\r\n    imageUrl: string;\r\n}\r\ninterface NetworkHealthScore {\r\n    active: number;\r\n    strong: number;\r\n    date: string;\r\n    status: string;\r\n}\r\ninterface UserConnection {\r\n    uri?: string;\r\n    person?: UserConnectionPerson;\r\n    company?: Company;\r\n    networkHealthScore?: NetworkHealthScore;\r\n    users: User[];\r\n    strength: number;\r\n    maxStrength: number;\r\n}\r\ninterface Link {\r\n    source: string;\r\n    target: string;\r\n    value: number;\r\n    strong?: number;\r\n    active?: number;\r\n}\r\ninterface Data {\r\n    users: { [uri: string]: User };\r\n    people: { [uri: string]: UserConnectionPerson };\r\n    companies: { [uri: string]: Company };\r\n    links: Link[];\r\n    levels: Map<JobLevel, Set<string>>;\r\n    roles: Map<string, Set<string>>;\r\n};\r\ninterface PreformattedData {\r\n    users: { [uri: string]: User };\r\n    people: { [uri: string]: UserConnectionPerson };\r\n    companies: { [uri: string]: Company };\r\n    links: Link[];\r\n    levels: [JobLevel, Set<string>][];\r\n    roles: [string, Set<string>][];\r\n    userValues: User[];\r\n    personValues: UserConnectionPerson[];\r\n    companyValues: Company[];\r\n};\r\n\r\nexport const toDiscreteRelStrength = (strengthAsFloat = 0) => strengthAsFloat < 0.0001\r\n    ? 0\r\n    : strengthAsFloat >= 1\r\n        ? 5\r\n        : Math.floor(strengthAsFloat * 5) + 1;\r\nconst { typeToOrdering, orderingToType } = generateOrdering(RelationshipStrength);\r\nconst strengthDisplay: Record<RelationshipStrength, string> = Object.freeze({\r\n    [RelationshipStrength.none]: \"None\",\r\n    [RelationshipStrength.veryWeak]: \"Very Weak\",\r\n    [RelationshipStrength.weak]: \"Weak\",\r\n    [RelationshipStrength.medium]: \"Medium\",\r\n    [RelationshipStrength.strong]: \"Strong\",\r\n    [RelationshipStrength.veryStrong]: \"Very Strong\",\r\n});\r\nexport const strengthToText = (strength: RelationshipStrength) => option.of(strengthDisplay[strength]).getOrElse(() => strengthDisplay.none);\r\nexport const strengthOrderingToText = (ordering = 0) => orderingToType(ordering).chain(strength => option.of(strengthDisplay[strength])).getOrElse(() => strengthDisplay.none);\r\nexport const strengthToOrdering = (strength: RelationshipStrength) => typeToOrdering(strength).getOrElse(() => 0);\r\nexport const strengthOrderingToStrength = (ordering = 0) => orderingToType(ordering).getOrElse(() => RelationshipStrength.none);\r\n\r\n\r\n/* extract functions, maybe use lenses later? */\r\nconst interactionsStrength = (is: Interactions) => option.of(is.strength).getOrElse(() => RelationshipStrength.none);\r\nconst interactionsStrengthMaxStrength = (is: Interactions) => Pair.of(\r\n    option.of(is.strength).getOrElse(() => RelationshipStrength.none),\r\n    option.of(is.maxStrength).getOrElse(() => RelationshipStrength.none)\r\n);\r\nconst interactionsActiveRelationships = (is: Interactions) => option.of(is.activeRelationships).getOrElse(() => 0);\r\nconst allInteractionsDates = (is: Interactions) => [\r\n    option.of(is.lastInbound).getOrElse(() => \"\"),\r\n    option.of(is.lastOutbound).getOrElse(() => \"\"),\r\n    option.of(is.lastMeeting).getOrElse(() => \"\"),\r\n].filter(Boolean);\r\nconst latestDate = (dates: string[]) => max(...dates);\r\nconst ownInteractions = (p: Partial<Person>) => option.of(p.interactions).getOrElse(() => ({}));\r\nconst teamInteractions = (p: Partial<Person>) => option.of(p.teamInteractions).getOrElse(() => ({}));\r\n\r\n/* relationship filters */\r\nexport const isStrongRelationship = (strength = 0) => strength >= 4;\r\nexport const isActiveRelationship = (strength = 0) => strength < 4 && strength > 0;\r\nconst hasStrength = Pred.of((s: RelationshipStrength) => s !== RelationshipStrength.none)\r\nconst hasInteractionsStrength = hasStrength.contramap(interactionsStrength);\r\nexport const hasOwnStrength = hasInteractionsStrength.contramap(ownInteractions);\r\nexport const hasTeamStrength = hasInteractionsStrength.contramap(teamInteractions);\r\nexport const hasStrongTeamRelationship = Pred.of(isStrongRelationship)\r\n    .contramap(strengthToOrdering)\r\n    .contramap(interactionsStrength)\r\n    .contramap(teamInteractions);\r\nexport const hasWeakTeamRelationship = Pred.not(hasStrongTeamRelationship);\r\nexport const isWeakenedTeamRelationship = Pred.of((strengthAndMaxStrength: Pair<RelationshipStrength, RelationshipStrength>) => strengthAndMaxStrength.merge((strength, maxStrength) => strength !== maxStrength))\r\n    .contramap(interactionsStrengthMaxStrength)\r\n    .contramap(teamInteractions);\r\nexport const isSlippingTeamRelationship = (slippingDays = 14, today = new Date()) => Pred.of((latestDate: Date) => differenceInCalendarDays(today, latestDate) > slippingDays)\r\n    .contramap(latestDate)\r\n    .contramap(allInteractionsDates)\r\n    .contramap(teamInteractions);\r\nexport const hasTeamContact = Pred.of((contactDates: string[]) => contactDates.length > 0)\r\n    .contramap(allInteractionsDates)\r\n    .contramap(teamInteractions);\r\nexport const minLevel = (minLevel = jobLevelToOrdering(JobLevel.unknown)) => (p: Partial<Person>) =>\r\n    tryCatch(() => p.level)\r\n        .map(l => jobLevelToOrdering(l) <= minLevel)\r\n        .getOrElse(() => false);\r\nexport const isExec = Pred.of(minLevel(jobLevelToOrdering(JobLevel.vicepresident)));\r\nexport const isExecRelationship = (p: Partial<Person>) =>\r\n    hasTeamStrength.concat(isExec).run(p);\r\nexport const newExec = (minimum = jobLevelToOrdering(JobLevel.vicepresident)) => (p: Person) =>\r\n    Pred.not(hasTeamStrength).concat(Pred.of(minLevel(minimum))).run(p);\r\n\r\n/* relationship sorts */\r\nconst byStrength = Compare.of(numCompareByDir(false))\r\n    .contramap(strengthToOrdering)\r\n    .contramap(interactionsStrength);\r\nexport const byTeamStrength = byStrength\r\n    .contramap(teamInteractions);\r\nconst byActiveRelationships = Compare.of(numCompareByDir(false))\r\n    .contramap(interactionsActiveRelationships);\r\nexport const byTeamActiveRelationships = byActiveRelationships\r\n    .contramap(teamInteractions);\r\n\r\nconst slippingDays = { start: 14, end: 210 };\r\nexport const relationshipRisks = (entity: { teamInteractions: Interactions }, today = new Date()) => {\r\n    const { teamInteractions = {} } = entity;\r\n    const {\r\n        lastInbound = \"\",\r\n        lastOutbound = \"\",\r\n        lastMeeting = \"\",\r\n        maxStrength = RelationshipStrength.none,\r\n        strength = RelationshipStrength.none,\r\n        strongRelationships = 0,\r\n        activeRelationships = 0,\r\n    } = teamInteractions;\r\n    const communicationDates = [lastInbound, lastOutbound, lastMeeting].filter(Boolean).map(toUTCDate);\r\n    const lastCommunication = communicationDates.length ? max(...communicationDates) : \"\";\r\n    const lastCommDisplay = lastCommunication\r\n        ? isToday(lastCommunication)\r\n            ? \"today\"\r\n            : distanceInWordsStrict(today, startOfDay(lastCommunication), {\r\n                addSuffix: true,\r\n                partialMethod: \"floor\",\r\n            })\r\n        : \"no communication\";\r\n    const lastCommunicationDays = differenceInCalendarDays(today, lastCommunication);\r\n    const slipping =\r\n        !lastCommunication ||\r\n        (lastCommunicationDays >= slippingDays.start && lastCommunicationDays <= slippingDays.end);\r\n    const weakened = maxStrength !== strength;\r\n    const singleThreaded = strongRelationships === 1;\r\n    const notStrong = strongRelationships === 0;\r\n    const riskCount =\r\n        activeRelationships > 0 ? [singleThreaded || notStrong, slipping].filter(Boolean).length : 0;\r\n    const exec = minLevel(jobLevelToOrdering(JobLevel.vicepresident))(entity as Person);\r\n    const strong = strongRelationships > 1;\r\n    const active = activeRelationships > 0;\r\n\r\n    return {\r\n        lastCommunication,\r\n        lastCommDisplay,\r\n        slipping,\r\n        weakened,\r\n        singleThreaded,\r\n        notStrong,\r\n        riskCount,\r\n        exec,\r\n        strong,\r\n        active,\r\n    };\r\n}\r\n\r\n\r\nconst mergeType = (type: string) => (o: {}) => ({ ...o, type });\r\nconst incrementObjKeyProp = (obj: { [key: string]: any }, key: string, prop: string, incrementValue = 1) => {\r\n    if (!obj[key]) {\r\n        obj[key] = { [prop]: incrementValue, total: incrementValue };\r\n    } else {\r\n        obj[key].total += incrementValue;\r\n        obj[key][prop] = (obj[key][prop] || 0) + incrementValue;\r\n    }\r\n};\r\nexport const summarizeData = (data: Partial<PreformattedData>) => {\r\n    const { userValues = [], personValues = [], companyValues = [], links = [] } = data;\r\n    return {\r\n        ...data,\r\n        nodes: [\r\n            ...userValues.map(mergeType(\"user\")),\r\n            ...personValues.map(mergeType(\"person\")),\r\n            ...companyValues.map(mergeType(\"company\")),\r\n        ],\r\n        summaries: links\r\n            .map(link => ({\r\n                ...link,\r\n                strength: strengthOrderingToText(link.value),\r\n                activeConnections: link.active || 0,\r\n                strongConnections: link.strong || 0,\r\n            }))\r\n            .reduce((summary, currentSummary) => {\r\n                const { source = \"\", target = \"\", strength = \"None\", activeConnections = 0, strongConnections = 0 } = currentSummary || {};\r\n                if (!activeConnections) {\r\n                    incrementObjKeyProp(summary, source, strength);\r\n                    incrementObjKeyProp(summary, target, strength);\r\n                    incrementObjKeyProp(summary, \"allRelationships\", strength);\r\n                } else {\r\n                    incrementObjKeyProp(summary, source, \"Active Connections\", activeConnections);\r\n                    incrementObjKeyProp(summary, source, \"Strong Connections\", strongConnections);\r\n                    incrementObjKeyProp(summary, target, \"Active Connections\", activeConnections);\r\n                    incrementObjKeyProp(summary, target, \"Strong Connections\", strongConnections);\r\n                    incrementObjKeyProp(summary, \"allRelationships\", \"Active Connections\", activeConnections);\r\n                    incrementObjKeyProp(summary, \"allRelationships\", \"Strong Connections\", strongConnections);\r\n                }\r\n                return summary;\r\n            }, {}),\r\n    };\r\n};\r\n\r\nexport const formatRelationshipsData = (type = \"person\", people: Person[]) => Task.of(people)\r\n    .map((entities: (Person & Company)[]) => entities.filter(hasStrengthTeamMember.run))\r\n    .map(groupBy(\r\n        (e: (Person & Company)) => option.of(e.teamInteractions || {})\r\n            .map(interactions => interactions.strengthTeamMember || {})\r\n            .map(teamMember => teamMember.uri || \"\")\r\n            .getOrElse(() => \"\")\r\n    ))\r\n    .map(groupedEntities => values(groupedEntities)\r\n        .map(entities => entities\r\n            .map(e => tryCatch(() => e.teamInteractions)\r\n                .map(({ activeRelationships = 0, strongRelationships = 0, strength = RelationshipStrength.none, maxStrength = RelationshipStrength.none, strengthTeamMember = {} }) =>\r\n                    (e.uri === strengthTeamMember.uri || (!(type === \"person\") && !activeRelationships))\r\n                        ? undefined\r\n                        : ({\r\n                            uri: e.uri,\r\n                            [type]: e,\r\n                            networkHealthScore: {\r\n                                active: activeRelationships,\r\n                                strong: strongRelationships,\r\n                            },\r\n                            strength: strengthToOrdering(strength),\r\n                            maxStrength: strengthToOrdering(maxStrength),\r\n                            users: [{...strengthTeamMember, jobTitle: strengthTeamMember.title, uri: `/team${strengthTeamMember.uri}` }],\r\n                        }))\r\n                .getOrElse(() => undefined))\r\n            .filter(Boolean)\r\n            .filter(uc => uc && ((type === \"person\") ? uc.strength > 0 : uc.networkHealthScore.active > 0)))\r\n        .filter(ucs => ucs && ucs.length > 0) as unknown as UserConnection[][])\r\n    .map((userConnections: UserConnection[][] = []) => {\r\n        const initialData: Data = {\r\n            users: {},\r\n            people: {},\r\n            companies: {},\r\n            links: [],\r\n            levels: new Map(),\r\n            roles: new Map(),\r\n        };\r\n        return userConnections.reduce((result, ucs = []) => {\r\n            const firstUser = optHead(ucs)\r\n                .chain(firstUc => tryCatch(() => firstUc.users))\r\n                .chain(optHead)\r\n                .getOrElse(() => undefined);\r\n            const users = result.users;\r\n            if (firstUser && firstUser.uri) {\r\n                users[firstUser.uri] = firstUser;\r\n            }\r\n\r\n            // extract people and links\r\n            const {\r\n                people,\r\n                companies,\r\n                links,\r\n                levels = new Map(),\r\n                roles = new Map(),\r\n            } = ucs.reduce(\r\n                (formattedData, uc) => {\r\n                    const { person, company, strength = 0, networkHealthScore } = uc;\r\n                    if (person && person.uri) {\r\n                        if (firstUser && firstUser.uri) {\r\n                            formattedData.people[person.uri] = person;\r\n                            formattedData.links.push({\r\n                                source: firstUser.uri,\r\n                                target: person.uri,\r\n                                value: strength,\r\n                            });\r\n                        }\r\n                        if (person.level) {\r\n                            const set = formattedData.levels.get(person.level) || new Set();\r\n                            formattedData.levels.set(person.level, set.add(person.uri));\r\n                        }\r\n                        if (person.roles.length > 0) {\r\n                            person.roles.forEach(({ name = \"\" }) => {\r\n                                if (!name) {\r\n                                    return;\r\n                                }\r\n                                const [groupName = \"\"] = name.split(\"-\");\r\n                                const identifier = groupName.trim();\r\n                                const set = formattedData.roles.get(identifier) || new Set(); // eslint-disable-line no-unused-vars\r\n                                formattedData.roles.set(identifier, set.add(person.uri));\r\n                            });\r\n                        }\r\n                    }\r\n                    if (company && company.uri && firstUser && firstUser.uri) {\r\n                        const { active = 0, strong = 0 } = networkHealthScore || {};\r\n                        formattedData.companies[company.uri] = company;\r\n                        formattedData.links.push({\r\n                            source: firstUser.uri,\r\n                            target: company.uri,\r\n                            value: active,\r\n                            strong,\r\n                            active,\r\n                        });\r\n                    }\r\n                    return formattedData;\r\n                },\r\n                {\r\n                    links: result.links,\r\n                    people: result.people,\r\n                    companies: result.companies,\r\n                    levels: result.levels,\r\n                    roles: result.roles,\r\n                },\r\n            );\r\n\r\n            let formattedLinks;\r\n            if (type === \"company\") {\r\n                const maxConnections = links.reduce(\r\n                    (currentMax, { active = 0 }) => Math.max(currentMax, active),\r\n                    0,\r\n                );\r\n                formattedLinks = links.map(({ active = 0, ...restLink }) => ({ ...restLink, active, value: ((active || 0) / maxConnections) * 10 }));\r\n            }\r\n\r\n            return {\r\n                users,\r\n                people,\r\n                companies,\r\n                links: formattedLinks || links,\r\n                levels,\r\n                roles,\r\n            };\r\n        }, initialData);\r\n    })\r\n    .map((data: Partial<Data> = {}) => {\r\n        const { users = {}, people = {}, companies = {}, levels = new Map<JobLevel, Set<string>>(), roles = new Map<string, Set<string>>() } = data;\r\n        const preFormattedData = {\r\n            ...data,\r\n            roles: Array.from(roles).sort((a, b) => b[1].size - a[1].size),\r\n            levels: Array.from(levels),\r\n            userValues: Object.values(users),\r\n            personValues: Object.values(people),\r\n            companyValues: Object.values(companies),\r\n        };\r\n        const summarizedData = summarizeData(preFormattedData);\r\n        return summarizedData;\r\n    });\r\n"]}