{"version":3,"file":"personRecommenderData.js","sourceRoot":"","sources":["../../../../Data/Person/Recommender/personRecommenderData.ts"],"names":[],"mappings":"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","sourcesContent":["import { Person, IPersonIdentity, Interactions } from \"~/Data/NudgeInterfaces\";\r\nimport { OrgChartPerson } from \"~/Components/Company/OrgChart/hooks\";\r\n\r\nimport { numCompareByDir, truthyCompareByDir, Ordering } from \"~/Util/sortUtils\";\r\nimport { option } from \"~/Util/fp/Instances/Option\";\r\nimport { jobLevelToOrdering, jobLevelTypeToDisplay, JobLevel } from \"~/Data/Person/Level/jobLevelData\";\r\nimport { Cache, Query } from \"~/Data/DataInterfaces\";\r\nimport { Task } from \"~/Util/fp/Instances/Task\";\r\nimport { rolesToRoleGroups, byRoleGroupName } from \"~/Data/Person/Role/jobRoleData\";\r\nimport { getEntity } from \"~/Util/apiUtils\";\r\nimport { NudgeUris } from \"~/Uris/NudgeUris\";\r\nimport { relationshipRisks } from \"~/Data/Person/Relationship/relationshipData\";\r\nimport { Compare } from \"~/Util/fp/Instances/Compare\";\r\nimport { propOr, pick, values, entries } from \"~/Util/fp/object\";\r\nimport { Pred } from \"~/Util/fp/Instances/Pred\";\r\nimport { isEmpty, groupBy, tail, optHead } from \"~/Util/fp/array\";\r\nimport { not } from \"~/Util/fp/function\";\r\nimport { List } from \"~/Util/fp/Instances/List\";\r\n\r\n\r\nconst hasIdentities = Pred.of<IPersonIdentity[]>(not(isEmpty))\r\n    .contramap<IPersonIdentity[]>(is => is.filter(({ type = \"\" }) => type !== \"facebook\"))\r\n    .contramap<Partial<Person>>(propOr(\"identities\", [] as IPersonIdentity[]));\r\nconst hasTeamInteractions = Pred.of((dates: string[]) => dates.length > 0)\r\n    .contramap<string[]>(vs => vs.filter(Boolean))\r\n    .contramap<Record<string, string>>(values)\r\n    .contramap<Interactions>(pick([\"lastInbound\", \"lastOutbound\", \"lastMeeting\"]))\r\n    .contramap<Partial<Person>>(propOr(\"teamInteractions\", {}));\r\nexport const hasStrengthTeamMember = Pred.of((uri: string) => !!uri)\r\n    .contramap<Partial<Person>>(propOr(\"uri\", \"\"))\r\n    .contramap<Partial<Interactions>>(propOr(\"strengthTeamMember\", {}))\r\n    .contramap<Partial<Person>>(propOr(\"teamInteractions\", {}));\r\nconst notUnknownLevel = Pred.of(({ level }: Partial<OrgChartPerson>) => level !== \"unknown\");\r\nconst duplicatesByLevelRoleName = (people: Partial<OrgChartPerson>[]) => List.of(\r\n    groupBy<Partial<OrgChartPerson>>(({ name = \"\", displayLevel = \"\", displayRoles = [] }) =>\r\n        `${displayLevel}_${optHead(displayRoles).getOrElse(() => \"\")}_${name}`)(people)\r\n)\r\n    .chain(dupObj => List.fromArray(entries(dupObj)))\r\n    .chain(([_, dupArr]) => List.fromArray(tail(dupArr)))\r\n    .map(({ uri = \"\" }) => uri)\r\n    .filter(Boolean)\r\n    .toArray();\r\nconst isDuplicate = (dupUris: string[]) => Pred.of(({ uri = \"\" }: Partial<OrgChartPerson>) => !dupUris.includes(uri));\r\nconst recommendedFilter = hasIdentities\r\n    .concatOr(hasTeamInteractions)\r\n    .concat(notUnknownLevel);\r\nconst byLevel = Compare.of(numCompareByDir(true))\r\n    .contramap<JobLevel>((level) => option.of(jobLevelToOrdering(level)).getOrElse(() => Infinity))\r\n    .contramap<Partial<OrgChartPerson>>(propOr(\"level\", JobLevel.unknown));\r\nconst byFirstRole = (byRoleGroup: Compare<string>) => byRoleGroup\r\n    .contramap<[string]>((roles) => optHead(roles).getOrElse(() => \"\"))\r\n    .contramap<Partial<OrgChartPerson>>(propOr(\"displayRoles\", []));\r\nconst byTeamInteractions: Compare<Partial<OrgChartPerson>> = Compare.of(truthyCompareByDir(false))\r\n    .contramap<Partial<OrgChartPerson>>(hasTeamInteractions.run)\r\nexport const recommendedSort = (byRoleGroup: Compare<string>) =>\r\n    byFirstRole(byRoleGroup).concat(byLevel).concat(byTeamInteractions);\r\n\r\nconst requiredCompanyFields = `uri,name,title,imageUrl,identities,level,roles,teamInteractions`;\r\nconst requiredListFields = `uri,name,title,imageUrl,identities,level,roles,teamInteractions,company(uri)`;\r\nconst levelAndRolesQuery = `NOT(level:\"\" OR level:\"unknown\" OR level:\"individual\" OR level:\"manager\" OR level:\"senior_manager\") AND NOT(teamInteractions.strength:[veryWeak TO veryStrong])`;\r\n\r\nexport enum RecommendationTypes {\r\n    company = \"company\",\r\n    list = \"list\",\r\n}\r\nexport const getTeamRecommendedNewContacts = (\r\n    type: RecommendationTypes,\r\n    teamUri: string,\r\n    findUri: string,    // either a company or list uri\r\n    rolesQuery: Query,\r\n    rolesOrdering: Ordering,\r\n    cache?: Cache,\r\n) => Task.of(teamUri === \"collabs\" ? undefined : teamUri)\r\n    .map(team => ({\r\n        limit: type === RecommendationTypes.company ? 50 : 999,\r\n        fields: type === RecommendationTypes.company ? requiredCompanyFields : requiredListFields,\r\n        team,\r\n        q: (type === RecommendationTypes.company\r\n            ? [`company.uri:\"${findUri}\"`, levelAndRolesQuery, rolesQuery].join(\" AND \")\r\n            : [`list.uri:\"${findUri}\"`, levelAndRolesQuery, rolesQuery].join(\" AND \")),\r\n    }))\r\n    .chain(query => getEntity(NudgeUris.v2.people()._uri, query, { cache })\r\n        .map((people: Partial<Person>[] = []) => ({ people, companyByRoleGroup: byRoleGroupName(rolesOrdering) })),\r\n    )\r\n    .map(({ people, companyByRoleGroup }) =>\r\n        people\r\n            .filter(recommendedFilter.run)\r\n            .map(({ level = JobLevel.unknown, roles = [], ...restPerson }): Partial<OrgChartPerson> => ({\r\n                ...restPerson,\r\n                level,\r\n                displayLevel: jobLevelTypeToDisplay(level),\r\n                displayRoles: rolesToRoleGroups(roles).sort(companyByRoleGroup.run),\r\n            }))\r\n            .sort(recommendedSort(companyByRoleGroup).run),\r\n    )\r\n    // process duplicates\r\n    .map(sortedPeople => sortedPeople.filter(isDuplicate(duplicatesByLevelRoleName(sortedPeople)).run))\r\n\r\nconst relationshipsQuery = `teamInteractions.strength:[veryWeak TO veryStrong]`;\r\nexport const getTeamRecommendedRelationshipsByRisks = (\r\n    type: RecommendationTypes,\r\n    teamUri: string,\r\n    findUri: string,    // either a company or list uri\r\n    rolesQuery: Query,\r\n    rolesOrdering: Ordering,\r\n    cache?: Cache,\r\n) => Task.of(teamUri === \"collabs\" ? undefined : teamUri)\r\n    .map(team => ({\r\n        limit: type === RecommendationTypes.company ? 50 : 999,\r\n        fields: type === RecommendationTypes.company ? requiredCompanyFields : requiredListFields,\r\n        team,\r\n        q: type === RecommendationTypes.company\r\n            ? [`company.uri:\"${findUri}\"`, relationshipsQuery, rolesQuery].join(\" AND \")\r\n            : [`list.uri:\"${findUri}\"`, relationshipsQuery, rolesQuery].join(\" AND \"),\r\n    }))\r\n    .chain(query => getEntity(NudgeUris.v2.people()._uri, query, { cache })\r\n        .map((people: Partial<Person>[] = []) => ({ people, compareByRoleGroup: byRoleGroupName(rolesOrdering) })),\r\n    )\r\n    .map(({ people, compareByRoleGroup }) =>\r\n        option.of(people)\r\n            .chain(people => option.of(new Date())\r\n                .map(today => people\r\n                    .filter(recommendedFilter.run)\r\n                    .map(({ level = JobLevel.unknown, roles = [], ...restPerson }): Partial<OrgChartPerson> => ({\r\n                        ...restPerson,\r\n                        level,\r\n                        displayLevel: jobLevelTypeToDisplay(level),\r\n                        displayRoles: rolesToRoleGroups(roles).sort(compareByRoleGroup.run),\r\n                    }))\r\n                    .map(person => {\r\n                        const { teamInteractions = {} } = person;\r\n                        return {\r\n                            ...person,\r\n                            risks: relationshipRisks({ teamInteractions }, today),\r\n                        } as unknown as OrgChartPerson;\r\n                    })\r\n                    .sort(recommendedSort(compareByRoleGroup).run)))\r\n            .getOrElse(() => []));\r\n\r\n\r\nconst levelAndRolesQuery2 = `NOT(level:\"\" OR level:\"unknown\" OR level:\"individual\" OR level:\"manager\" OR level:\"senior_manager\")`;\r\nexport const getTeamRecommendedContacts = (\r\n    teamUri: string,\r\n    companyUri: string,\r\n    rolesQuery: Query,\r\n    rolesOrdering: Ordering,\r\n    cache?: Cache,\r\n) => Task.of(teamUri === \"collabs\" ? undefined : teamUri)\r\n    .map(team => ({\r\n        limit: 999,\r\n        fields: requiredCompanyFields,\r\n        team,\r\n        q: `company.uri:\"${companyUri}\" AND ((${rolesQuery}) OR (${levelAndRolesQuery2}))`\r\n    }))\r\n    .chain(query => getEntity(NudgeUris.v2.people()._uri, query, { cache })\r\n        .map((people: Partial<Person>[] = []) => ({ people, compareByRoleGroup: byRoleGroupName(rolesOrdering) })),\r\n    );\r\n"]}