{"version":3,"file":"jobRoleData.js","sourceRoot":"","sources":["../../../../Data/Person/Role/jobRoleData.ts"],"names":[],"mappings":"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","sourcesContent":["import { IJobRole } from \"~/Data/NudgeInterfaces\";\r\nimport { Task } from \"~/Util/fp/Instances/Task\";\r\nimport { option } from \"~/Util/fp/Instances/Option\";\r\nimport { getEntity } from \"~/Util/apiUtils\";\r\nimport { NudgeUris } from \"~/Uris/NudgeUris\";\r\nimport { compose } from \"~/Util/fp/function\";\r\nimport { mapEntries } from \"~/Util/fp/object\";\r\nimport { groupBy } from \"~/Util/fp/array\";\r\nimport { Ordering, numCompareByDir } from \"~/Util/sortUtils\";\r\nimport { GetEntityOptions } from \"~/Data/DataInterfaces\";\r\nimport { Compare } from \"~/Util/fp/Instances/Compare\";\r\nimport { tryCatch } from \"~/Util/fp/Instances/Either\";\r\nimport { Pair } from \"~/Util/fp/Instances/Pair\";\r\n\r\nexport interface Role {\r\n    uri: string;\r\n    name: string;\r\n}\r\nexport interface RoleSummary {\r\n    count: number;\r\n    value: string;\r\n}\r\n\r\nexport const roleToGroupName = ({ name = \"Unknown\" } = {}) => name.split(\" - \").shift() || \"\";\r\nexport const roleToGroupSubgroup = ({ name = \"Unknown\" } = {}) => option.of(name.split(\" - \"))\r\n    .map(parts => Pair.of(parts[0], tryCatch(() => parts[1]).getOrElse(() => \"\")))\r\n    .getOrElse(() => Pair.of(\"Unknown\", \"\"));\r\nexport const rolesToRoleGroups = (roles: IJobRole[]) => [...new Set(roles.filter(({ name }) => Boolean(name)).map(roleToGroupName))];\r\n\r\nexport const getRolesForTeam = (teamUri?: string, topRolesToShow = 10, defaultRoles = [\"Leadership\", \"Sales\", \"Service\", \"Marketing\", \"Operations\"], getEntityOptions?: GetEntityOptions) => Task.of(({\r\n    q: teamUri ? `has:teamInteractions.strength` : `has:interactions.introStrength`,\r\n    by: `roles`,\r\n    team: teamUri,\r\n    limit: 50,\r\n}))\r\n    .chain(rolesQuery => getEntity(NudgeUris.v2.people().count, rolesQuery, getEntityOptions))\r\n    // get a count based on the role group (Eg. `Sales - General` and `Sales - Something else` are the same group)\r\n    .map(\r\n        compose(\r\n            mapEntries((group, roles: RoleSummary[]): [string, number] => [group, roles.reduce((acc, r) => acc + r.count, 0)]),\r\n            groupBy((role: RoleSummary) => roleToGroupName({ name: role.value || \"Unknown\" })),\r\n        ),\r\n    )\r\n    // sort these roles by the highest count first, take the 1st 10\r\n    .map((byCount) =>\r\n        byCount\r\n            .sort(Compare.of(numCompareByDir(false))\r\n                .contramap(([_, count]: [unknown, number]) => count).run)\r\n            .map(([roleGroup]) => roleGroup)\r\n            .slice(0, topRolesToShow),\r\n    )\r\n    // if there are no roles, use the default roles\r\n    .map(topRoles => (topRoles.length > 0 ? topRoles : defaultRoles))\r\n\r\nexport const byRoleGroupName = (ordering: Ordering = {}) => Compare.of(numCompareByDir(true))\r\n    .contramap((role: string) => option.of(ordering[role])\r\n        .getOrElse(() => Infinity));\r\n"]}