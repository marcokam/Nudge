{"version":3,"file":"AreEquals.test.js","sourceRoot":"","sources":["../../Comparison/AreEquals.test.ts"],"names":[],"mappings":"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","sourcesContent":["import * as AreEquals from \"./AreEquals\";\r\nimport { AreEqual } from \"./ComparisonInterfaces\";\r\n\r\n// Fixed values\r\nconst createArray = () => [0, 1];\r\nconst array1 = createArray();\r\nconst array2 = [0, 2];\r\nconst object1 = { foo: \"bar\" };\r\nconst object2 = { foo: \"baz\" };\r\n\r\n// Helpers\r\nconst test = <T extends any>(message: string, areEqual: AreEqual<T>, x: T, y: T, expected: boolean) => it(message, () => {\r\n    expect(areEqual(x, y)).toBe(expected);\r\n});\r\nconst testThrows = <T extends any>(message: string, areEqual: AreEqual<T>, x: T, y: T, expectedError: string) => it(message, () => {\r\n    expect(() => areEqual(x, y)).toThrow(expectedError);\r\n});\r\nconst createSimpleObject = () => ({ a: 1, b: \"2\" });\r\nconst createComplexObject = () => ({\r\n    a: 1,\r\n    b: \"2\",\r\n    c: {\r\n        d: 3,\r\n        e: \"4\",\r\n        f: {\r\n            g: 5\r\n        },\r\n        g: [ 6, 7 ]\r\n    }\r\n});\r\nconst createRecursiveObject = () => {\r\n    const h = createComplexObject();\r\n    (h.c.f as any).h = h;\r\n    return h;\r\n};\r\n\r\n//const lazy = <T extends any>(producer: () => AreEqual<T>): AreEqual<T> => (x: T, y: T) => producer()(x, y);\r\nconst basicTests = (name: string, areEqual: AreEqual<any>, lenient: boolean) => {\r\n    const basicTest = <T extends any>(message: string, x: T, y: T, expected: boolean) =>\r\n        test(name + \": \" + message, areEqual, x, y, expected);\r\n\r\n    basicTest(\"numbers are equal\", 5, 5, true);\r\n    basicTest(\"numbers are not equal\", 5, 6, false);\r\n    basicTest(\"strings are equal\", \"abc\", \"abc\", true);\r\n    basicTest(\"strings are not equal\", \"abc\", \"zzz\", false);\r\n    basicTest(\"arrays are equal\", array1, array1, true);\r\n    basicTest(\"arrays are not equal\", array1, array2, false);\r\n    basicTest(\"objects are equal\", object1, object1, true);\r\n    basicTest(\"objects are not equal\", object1, object2, false);\r\n    basicTest(\"booleans are equal\", true, true, true);\r\n    basicTest(\"booleans are not equal\", true, false, false);\r\n\r\n    basicTest<any>(\"number equals string\", 5, \"5\", lenient);\r\n    basicTest<any>(\"number equals array\", 5, [5], lenient);\r\n    basicTest<any>(\"string equals arrays\", \"5\", [5], lenient);\r\n    basicTest<any>(\"number not equals string\", 5, \"6\", false);\r\n    basicTest<any>(\"number not equals array\", 5, [6], false);\r\n    basicTest<any>(\"string not equals arrays\", \"5\", [6], false);\r\n    \r\n    basicTest<any>(\"number not equals null\", 5, null, false);\r\n    basicTest<any>(\"number not equals undefined\", 5, undefined, false);\r\n    basicTest<any>(\"string not equals null\", \"abc\", null, false);\r\n    basicTest<any>(\"string not equals undefined\", \"abc\", undefined, false);\r\n    basicTest<any>(\"array not equals null\", [5], null, false);\r\n    basicTest<any>(\"array not equals undefined\", [5], undefined, false);\r\n};\r\n\r\n// Strict equality\r\nbasicTests(\"strictEquals\", AreEquals.strictEquals, false);\r\n\r\n// Lenient equality\r\nbasicTests(\"lenientEquals\", AreEquals.lenientEquals, true);\r\n\r\n// Dates\r\nconst dt1 = new Date(100);\r\nconst dt2 = new Date(100);\r\nconst dt3 = new Date(200);\r\ntest(\"dateEquals: dates are strictly equal\", AreEquals.dateEquals, dt1, dt1, true);\r\ntest(\"dateEquals: dates are lenient equal\", AreEquals.dateEquals, dt1, dt2, true);\r\ntest(\"dateEquals: dates are not equal\", AreEquals.dateEquals, dt1, dt3, false);\r\n\r\n// RegExps\r\nconst rx1 = /pattern/g;\r\nconst rx2 = /pattern/g;\r\nconst rx3 = /pattern/i;\r\ntest(\"regExpEquals: regexes are strictly equal\", AreEquals.regExpEquals, rx1, rx1, true);\r\ntest(\"regExpEquals: regexes are lenient equal\", AreEquals.regExpEquals, rx1, rx2, true);\r\ntest(\"regExpEquals: regexes are not equal\", AreEquals.regExpEquals, rx1, rx3, false);\r\n\r\n\r\n// Shallow equality\r\nbasicTests(\"shallowEquals\", AreEquals.shallowEquals, false);\r\ntest(\"shallowEquals: objects are equal (simple)\", AreEquals.shallowEquals, createSimpleObject(), createSimpleObject(), true);\r\ntest(\"shallowEquals: objects are not equal (complex)\", AreEquals.shallowEquals, createComplexObject(), createComplexObject(), false);\r\n\r\n// Deep equality\r\nbasicTests(\"deepEquals\", AreEquals.deepEquals, false);\r\ntest(\"deepEquals: arrays are equal (simple)\", AreEquals.deepEquals, createArray(), createArray(), true);\r\ntest(\"deepEquals: arrays are equal (complex)\", AreEquals.deepEquals, [createComplexObject(), createComplexObject()], [createComplexObject(), createComplexObject()], true);\r\ntest(\"deepEquals: objects are equal (simple)\", AreEquals.deepEquals, createSimpleObject(), createSimpleObject(), true);\r\ntest(\"deepEquals: objects are equal (complex)\", AreEquals.deepEquals, createComplexObject(), createComplexObject(), true);\r\ntest(\"deepEquals: objects are not equal (recursive)\", AreEquals.deepEquals, createRecursiveObject(), createRecursiveObject(), false);\r\n\r\n// deepEqualsWithDepth(Infinity)\r\nconst deepEqualsWithDepthInfinity = AreEquals.deepEqualsWithDepth(Infinity);\r\nbasicTests(\"deepEqualsWithDepth(Infinity)\", deepEqualsWithDepthInfinity, false);\r\ntest(\"deepEquals: arrays are equal (simple)\", deepEqualsWithDepthInfinity, createArray(), createArray(), true);\r\ntest(\"deepEquals: arrays are equal (complex)\", deepEqualsWithDepthInfinity, createArray(), createArray(), true);\r\ntest(\"deepEqualsWithDepth(Infinity): objects are equal (simple)\", deepEqualsWithDepthInfinity, createSimpleObject(), createSimpleObject(), true);\r\ntest(\"deepEqualsWithDepth(Infinity): objects are equal (complex)\", deepEqualsWithDepthInfinity, createComplexObject(), createComplexObject(), true);\r\ntestThrows(\"deepEqualsWithDepth(Infinity): throws (recursive)\", deepEqualsWithDepthInfinity, createRecursiveObject(), createRecursiveObject(), \"Maximum call stack size exceeded\");\r\n"]}