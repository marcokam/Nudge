{"version":3,"file":"ApiInterfaces.js","sourceRoot":"","sources":["../../Api/ApiInterfaces.ts"],"names":[],"mappings":"AAiBC,CAAC","sourcesContent":["//TODO: extend FetchOptions\r\nexport interface ApiRequest extends ApiRequestOptions {\r\n    url: string;\r\n    method: string;\r\n    accessToken?: string;\r\n    headers?: any;\r\n    signal?: AbortSignal;\r\n    timeout?: number;\r\n    statusCodeOverride?: boolean;   \r\n}\r\nexport interface ApiResponse {\r\n    ok: boolean;\r\n    url: string;\r\n    status: number;\r\n    text: () => Promise<string | null>;\r\n    json: () => Promise<any>;\r\n    headers: Headers;\r\n};\r\n\r\nexport interface ApiRequestOptions {\r\n    method?: string;\r\n    body?: string;\r\n    accessToken?: string;\r\n    headers?: any;\r\n    timeout?: number;\r\n    statusCodeOverride?: boolean;\r\n}\r\n\r\nexport default interface ApiClient {\r\n    get(url: string, options?: ApiRequestOptions): Promise<ApiResponse>;    \r\n    post(url: string, data: any, options?: ApiRequestOptions): Promise<ApiResponse>;\r\n    patch(url: string, data: any, options?: ApiRequestOptions): Promise<ApiResponse>;\r\n    delete(url: string, options?: ApiRequestOptions): Promise<ApiResponse>;\r\n    put(url: string, data: any, options?: ApiRequestOptions): Promise<ApiResponse>;\r\n\r\n    getJson(url: string, options?: ApiRequestOptions): Promise<any>;    \r\n    postJson(url: string, data: any, options?: ApiRequestOptions): Promise<any>;\r\n    patchJson(url: string, data: any, options?: ApiRequestOptions): Promise<any>;\r\n    deleteJson(url: string, options?: ApiRequestOptions): Promise<any>;\r\n    putJson(url: string, data: any, options?: ApiRequestOptions): Promise<any>;\r\n}\r\n\r\nexport type ApiRequestMiddleware = (request: ApiRequest, next: ApiRequestInvoker) => Promise<ApiResponse>;\r\nexport type ApiRequestInvoker = (request: ApiRequest) => Promise<ApiResponse>;\r\nexport type ApiRequestTransformer = (request: ApiRequest) => ApiRequest;\r\nexport type AsyncApiRequestTransformer = (request: ApiRequest) => Promise<ApiRequest>;"]}