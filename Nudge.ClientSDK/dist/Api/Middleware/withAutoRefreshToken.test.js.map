{"version":3,"file":"withAutoRefreshToken.test.js","sourceRoot":"","sources":["../../../Api/Middleware/withAutoRefreshToken.test.ts"],"names":[],"mappings":"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","sourcesContent":["import NonRefreshingTokenManager from \"~/Authentication/NonRefreshingTokenManager\";\r\nimport withAutoRefreshToken from \"./withAutoRefreshToken\";\r\nimport NullLogger from \"~/Logging/NullLogger\";\r\nimport { ApiRequest } from \"../ApiInterfaces\";\r\nimport TokenManager from \"~/Authentication/TokenManager\";\r\n\r\nconst logger = new NullLogger();\r\n\r\n// Token Managers\r\nclass SimpleTokenManager implements TokenManager {\r\n    private accessToken: number = 1;\r\n    getAccessToken = () => this.accessToken.toString();\r\n    supportsRefresh = true;\r\n    refreshAccessToken = () => Promise.resolve({\r\n        success: true,\r\n        accessToken: (++this.accessToken).toString()\r\n    });\r\n    setAccessToken = (accessToken: number) => this.accessToken = accessToken;\r\n}\r\nconst nonRefreshingTokenManager = new NonRefreshingTokenManager(() => \"accessToken1\");\r\n\r\n// Requests\r\nconst apiUrl = \"https://api.nudge.ai/v2/fake\";\r\nconst simpleRequest: ApiRequest = {\r\n    url: apiUrl,\r\n    method: \"GET\"\r\n};\r\n\r\n// Responses\r\nconst accessDeniedResponseBody = [ { code: 401001 }];\r\nconst accessDeniedResponse = {\r\n    ok: false,\r\n    url: apiUrl,\r\n    status: 401,\r\n    text: () => Promise.resolve(JSON.stringify(accessDeniedResponseBody)),\r\n    json: () => Promise.resolve(accessDeniedResponseBody),\r\n    headers: null as any as Headers, // Jest doesn't have a Headers ctor at runtime?\r\n\r\n    getText: () => Promise.resolve(JSON.stringify(accessDeniedResponseBody)),\r\n    getJson: () => Promise.resolve(accessDeniedResponseBody),    \r\n};\r\nconst successResponseBody = {};\r\nconst successResponse = {\r\n    ok: true,\r\n    url: apiUrl,\r\n    status: 200,\r\n    text: () => Promise.resolve(JSON.stringify(successResponseBody)),\r\n    json: () => Promise.resolve(successResponseBody),\r\n    headers: null as any as Headers, // Jest doesn't have a Headers ctor at runtime?\r\n\r\n    getText: () => Promise.resolve(JSON.stringify(successResponseBody)),\r\n    getJson: () => Promise.resolve(successResponseBody),    \r\n};\r\n\r\n// Invokers\r\nconst createInvoker = (...validTokens: string[]) => (request: ApiRequest) => \r\n    request.accessToken && validTokens.find(_ => _ === request.accessToken)\r\n        ? Promise.resolve(successResponse)\r\n        : Promise.resolve(accessDeniedResponse);\r\n\r\n// Tests\r\nit(\"doesn't attempt refresh from NonRefreshingTokenManager\", async () => {\r\n    const middleWare = withAutoRefreshToken(nonRefreshingTokenManager, logger);\r\n    const response = await middleWare(simpleRequest, createInvoker());\r\n    expect(response).toBe(accessDeniedResponse);\r\n});\r\n\r\nit(\"doesn't attempt refresh when access token supplied in request\", async () => {\r\n    const middleWare = withAutoRefreshToken(new SimpleTokenManager(), logger);\r\n    const response = await middleWare({ ...simpleRequest, accessToken: \"1\" }, createInvoker(\"2\"));\r\n    expect(response).toBe(accessDeniedResponse);\r\n});\r\n\r\nit(\"refreshes and retries\", async () => {\r\n    const middleWare = withAutoRefreshToken(new SimpleTokenManager(), logger);\r\n    const response = await middleWare(simpleRequest, createInvoker(\"2\"));\r\n    expect(response).toBe(successResponse);\r\n});\r\n\r\nit(\"uses new token when token changes during in-flight request\", async () => {\r\n    const validToken = \"valid\";\r\n    let accessToken = \"invalid\";\r\n    const tokenManager: TokenManager = { \r\n        getAccessToken: () => accessToken,\r\n        supportsRefresh: true,\r\n        refreshAccessToken: () => { throw Error(\"shouldn't do this\"); }\r\n    };\r\n    const middleWare = withAutoRefreshToken(tokenManager, logger);\r\n    const invoker = (request: ApiRequest) => {\r\n        accessToken = validToken\r\n        const response = request.accessToken === validToken\r\n            ? successResponse\r\n            : accessDeniedResponse;\r\n        return Promise.resolve(response);\r\n    }\r\n    const response = await middleWare(simpleRequest, invoker);\r\n    expect(response).toBe(successResponse);\r\n});\r\n\r\nit(\"returns original response when refresh throws\", async () => {\r\n    const tokenManager: TokenManager = { \r\n        getAccessToken: () => \"invalid\",\r\n        supportsRefresh: true,\r\n        refreshAccessToken: () => Promise.reject(\"Refresh failed\")\r\n    };\r\n    const middleWare = withAutoRefreshToken(tokenManager, logger);\r\n    const response = await middleWare(simpleRequest, createInvoker());\r\n    expect(response).toBe(accessDeniedResponse);\r\n});\r\n\r\nit(\"returns original response when refresh returns false\", async () => {\r\n    const tokenManager: TokenManager = { \r\n        getAccessToken: () => \"invalid\",\r\n        supportsRefresh: true,\r\n        refreshAccessToken: () => Promise.resolve({ success: false, accessToken: \"valid\" })\r\n    };\r\n    const middleWare = withAutoRefreshToken(tokenManager, logger);\r\n    const response = await middleWare(simpleRequest, createInvoker(\"valid\"));\r\n    expect(response).toBe(accessDeniedResponse);\r\n});\r\n\r\nit(\"returns original response when second request fails\", async () => {    \r\n    const middleWare = withAutoRefreshToken(new SimpleTokenManager(), logger);\r\n    const response = await middleWare(simpleRequest, createInvoker());\r\n    //TODO: This doesn't actually differentiate between 1st and 2nd requests\r\n    expect(response).toBe(accessDeniedResponse);\r\n});"]}