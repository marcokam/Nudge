{"version":3,"file":"withAutoRefreshToken.js","sourceRoot":"","sources":["../../../Api/Middleware/withAutoRefreshToken.ts"],"names":[],"mappings":"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","sourcesContent":["import { ApiRequestMiddleware, ApiRequest, ApiRequestInvoker, ApiResponse } from \"../ApiInterfaces\";\r\nimport TokenManager from \"~/Authentication/TokenManager\";\r\nimport { Logger } from \"~/Logging/LoggingInterfaces\";\r\nimport { promiseTry } from \"~/Util/PromiseUtils\";\r\nimport Producer, { toResult } from \"~/Util/fp/Instances/Producer\";\r\nimport { Task } from \"~/Util/fp/Instances/Task\";\r\n\r\nfunction getJsonError(response: ApiResponse): any {\r\n    return response.text().then(text => {\r\n        if (typeof text === undefined || text === null) return text;\r\n\r\n        try {\r\n            return JSON.parse(text);\r\n        } catch (err) {\r\n            return text;\r\n        }\r\n    });\r\n}\r\n\r\nexport function shouldRefreshAndRetry(status: number, jsonError: any) {\r\n    //TODO: Allow e.code to be a string for when we eventually change the API contract                        \r\n    return status === 401\r\n        && jsonError\r\n        && Array.isArray(jsonError)\r\n        && jsonError.filter(e => e.code === 401001).length > 0;\r\n}\r\n\r\nconst withAutoRefreshToken = (tokenManagerProducer: Producer<TokenManager>, logger: Logger): ApiRequestMiddleware => {\r\n    \r\n    const tokenManagerResult = toResult(tokenManagerProducer);\r\n    return (request: ApiRequest, next: ApiRequestInvoker): Promise<ApiResponse> => {\r\n\r\n        if (request.accessToken) { \r\n            return next(request);       \r\n        }\r\n\r\n        return Task.toPromise<Error, TokenManager>(tokenManagerResult)\r\n            .then(tokenManager => {\r\n                const accessToken = tokenManager.getAccessToken();\r\n                if (!accessToken) {\r\n                    return next(request);\r\n                }\r\n        \r\n                const nextRequest = {\r\n                    accessToken,\r\n                    ...request\r\n                };\r\n                return next(nextRequest)\r\n                    .then(response => {\r\n                        if (response.status != 401) {\r\n                            return response;\r\n                        }\r\n        \r\n                        return getJsonError(response)\r\n                            .then((jsonError: any) => {\r\n                                const url = nextRequest.url;\r\n                            \r\n                                function retryRequest(newAccessToken: string | null): Promise<ApiResponse> {\r\n                                    if (accessToken === newAccessToken) {\r\n                                        logger.warning(\r\n                                            \"While retrying the request, discovered that access token did not actually change\",\r\n                                            { url },\r\n                                        );\r\n                                        return Promise.resolve(response);\r\n                                    }\r\n                                    if (!newAccessToken) {\r\n                                        logger.warning(\r\n                                            \"TokenManager indicated refresh was successful but did not return an access token.\",\r\n                                            { url },\r\n                                        );\r\n                                        return Promise.resolve(response);\r\n                                    }\r\n                            \r\n                                    logger.info(\"Retrying API request\", { url });\r\n                                    const retryRequest = {\r\n                                        ...nextRequest,\r\n                                        accessToken: newAccessToken,\r\n                                    };\r\n                                    return next(retryRequest);\r\n                                }\r\n        \r\n                        \r\n                                // Do not attempt to refresh and retry if the access token was provided in options.\r\n                                // This will stop retry and logger loops.\r\n                                if (!tokenManager.supportsRefresh || request.accessToken || !shouldRefreshAndRetry(response.status, jsonError)) {\r\n                                    return response;\r\n                                }\r\n            \r\n                                // At this point we know we should retry the request.\r\n                                // If the access token changed while the request was in flight, just use that during retry and do not perform a refresh.\r\n                                const currentAccessToken = tokenManager.getAccessToken();\r\n                                if (accessToken !== currentAccessToken) {\r\n                                    return retryRequest(currentAccessToken);\r\n                                }\r\n                            \r\n                                return promiseTry(() => tokenManager\r\n                                    .refreshAccessToken()\r\n                                    .then(refreshResponse => {\r\n                                        if (!refreshResponse.success) {\r\n                                            return response;\r\n                                        }\r\n                                        return retryRequest(refreshResponse.accessToken);\r\n                                    })\r\n                                ).catch(() => response);            \r\n                            });\r\n                    });\r\n            });\r\n    }\r\n\r\n\r\n};\r\nexport default withAutoRefreshToken;"]}