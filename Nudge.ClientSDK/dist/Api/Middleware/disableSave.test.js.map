{"version":3,"file":"disableSave.test.js","sourceRoot":"","sources":["../../../Api/Middleware/disableSave.test.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,qBAAqB,EAAE,EAAE,kBAAkB,EAAE,MAAM,eAAe,CAAC;AAG1E,IAAM,aAAa,GAAG,UAAC,MAAc,IAAiB,OAAA,CAAC;IACnD,GAAG,EAAE,8BAA8B;IACnC,MAAM,QAAA;CACT,CAAC,EAHoD,CAGpD,CAAC;AAEH,IAAM,oBAAoB,GAAG,UAAO,EAAe,EAAE,EAAe;;;;;gBAChE,MAAM,CAAC,EAAE,CAAC,CAAC,UAAU,EAAE,CAAC;gBACxB,MAAM,CAAC,EAAE,CAAC,CAAC,UAAU,EAAE,CAAC;gBACxB,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;gBAC/B,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC;gBACrC,KAAA,MAAM,CAAA;gBAAC,qBAAM,EAAE,CAAC,IAAI,EAAE,EAAA;;gBAAtB,KAAA,CAAA,KAAA,kBAAO,SAAe,EAAC,CAAA,CAAC,OAAO,CAAA;gBAAC,qBAAM,EAAE,CAAC,IAAI,EAAE,EAAA;;gBAA/C,cAAgC,SAAe,EAAC,CAAC;gBACjD,KAAA,MAAM,CAAA;gBAAC,qBAAM,EAAE,CAAC,IAAI,EAAE,EAAA;;gBAAtB,KAAA,CAAA,KAAA,kBAAO,SAAe,EAAC,CAAA,CAAC,OAAO,CAAA;gBAAC,qBAAM,EAAE,CAAC,IAAI,EAAE,EAAA;;gBAA/C,cAAgC,SAAe,EAAC,CAAC;gBACjD,MAAM,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC;;;;KAC1C,CAAA;AAED,IAAM,cAAc,GAAG,UAAC,OAAmB,IAAkB,OAAA,CAAC;IAC1D,EAAE,EAAE,IAAI;IACR,GAAG,EAAE,OAAO,CAAC,GAAG;IAChB,MAAM,EAAE,GAAG;IACX,IAAI,EAAE,cAAM,OAAA,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,EAApB,CAAoB;IAChC,IAAI,EAAE,cAAM,OAAA,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,EAAlB,CAAkB;IAC9B,OAAO,EAAE,IAAI,OAAO,CAAC,EAAE,CAAC;CAC3B,CAAC,EAP2D,CAO3D,CAAC;AAEH,EAAE,CAAC,eAAe,EAAE;;;;;gBACV,UAAU,GAAG,qBAAqB,CAAC,IAAI,CAAC,CAAC;gBACzC,OAAO,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC;gBACrB,qBAAM,UAAU,CAAC,OAAO,EAAE,cAAQ,MAAM,KAAK,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,CAAC,EAAA;;gBAAlF,QAAQ,GAAG,SAAuE;gBAC/D,qBAAM,kBAAkB,CAAC,OAAO,CAAC,EAAA;;gBAApD,gBAAgB,GAAG,SAAiC;gBAC1D,qBAAM,oBAAoB,CAAC,QAAQ,EAAE,gBAAgB,CAAC,EAAA;;gBAAtD,SAAsD,CAAC;;;;KAC1D,CAAC,CAAC;AAEH,EAAE,CAAC,sBAAsB,EAAE;;;;;gBACjB,UAAU,GAAG,qBAAqB,CAAC,IAAI,CAAC,CAAC;gBACzC,OAAO,GAAG,aAAa,CAAC,KAAK,CAAC,CAAC;gBAC/B,gBAAgB,GAAG,cAAc,CAAC,OAAO,CAAC,CAAC;gBAChC,qBAAM,UAAU,CAAC,OAAO,EAAE,cAAM,OAAA,OAAO,CAAC,OAAO,CAAC,gBAAgB,CAAC,EAAjC,CAAiC,CAAC,EAAA;;gBAA7E,QAAQ,GAAG,SAAkE;gBACnF,qBAAM,oBAAoB,CAAC,QAAQ,EAAE,gBAAgB,CAAC,EAAA;;gBAAtD,SAAsD,CAAC;;;;KAC1D,CAAC,CAAC;AAEH,EAAE,CAAC,gCAAgC,EAAE;;;;;gBAC3B,UAAU,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC;gBAC1C,OAAO,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC;gBAChC,gBAAgB,GAAG,cAAc,CAAC,OAAO,CAAC,CAAC;gBAChC,qBAAM,UAAU,CAAC,OAAO,EAAE,cAAM,OAAA,OAAO,CAAC,OAAO,CAAC,gBAAgB,CAAC,EAAjC,CAAiC,CAAC,EAAA;;gBAA7E,QAAQ,GAAG,SAAkE;gBACnF,qBAAM,oBAAoB,CAAC,QAAQ,EAAE,gBAAgB,CAAC,EAAA;;gBAAtD,SAAsD,CAAC;;;;KAC1D,CAAC,CAAC","sourcesContent":["import disableSaveMiddleware, { createMockResponse } from \"./disableSave\";\r\nimport { ApiRequest, ApiResponse } from \"../ApiInterfaces\";\r\n\r\nconst createRequest = (method: string): ApiRequest => ({ \r\n    url: \"https://example.com/api/test\",\r\n    method\r\n});\r\n\r\nconst expectResponsesEqual = async (r1: ApiResponse, r2: ApiResponse) => {\r\n    expect(r1).toBeTruthy();\r\n    expect(r2).toBeTruthy();\r\n    expect(r1.url).toEqual(r2.url);\r\n    expect(r1.status).toEqual(r2.status);\r\n    expect(await r1.text()).toEqual(await r2.text());\r\n    expect(await r1.json()).toEqual(await r2.json());\r\n    expect(r1.headers).toEqual(r2.headers);\r\n}\r\n\r\nconst createResponse = (request: ApiRequest): ApiResponse => ({\r\n    ok: true,\r\n    url: request.url, \r\n    status: 777, \r\n    text: () => Promise.resolve(\"5\"),\r\n    json: () => Promise.resolve(5),    \r\n    headers: new Headers({})\r\n});\r\n\r\nit(\"disables POST\", async () => {\r\n    const middleware = disableSaveMiddleware(true);\r\n    const request = createRequest(\"POST\");\r\n    const response = await middleware(request, () => { throw Error(\"Should not happen!\"); });\r\n    const expectedResponse = await createMockResponse(request);\r\n    await expectResponsesEqual(response, expectedResponse);\r\n});\r\n\r\nit(\"does not disable GET\", async () => {\r\n    const middleware = disableSaveMiddleware(true);\r\n    const request = createRequest(\"GET\");\r\n    const expectedResponse = createResponse(request);\r\n    const response = await middleware(request, () => Promise.resolve(expectedResponse));\r\n    await expectResponsesEqual(response, expectedResponse);\r\n});\r\n\r\nit(\"does not disable POST when off\", async () => {\r\n    const middleware = disableSaveMiddleware(false);\r\n    const request = createRequest(\"POST\");\r\n    const expectedResponse = createResponse(request);\r\n    const response = await middleware(request, () => Promise.resolve(expectedResponse));\r\n    await expectResponsesEqual(response, expectedResponse);\r\n});"]}