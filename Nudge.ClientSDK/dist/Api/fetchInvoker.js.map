{"version":3,"file":"fetchInvoker.js","sourceRoot":"","sources":["../../Api/fetchInvoker.ts"],"names":[],"mappings":";;;;;;;;;;;AACA,OAAO,cAAc,MAAM,uBAAuB,CAAC;AAEnD,mCAAmC;AACnC,IAAM,mBAAmB,GAAgB;IACrC,IAAI,EAAE,MAAM;CACf,CAAC;AACF,IAAM,YAAY,GAAsB,UAAC,OAAmB;IAExD,IAAM,YAAY,cACd,MAAM,EAAE,OAAO,CAAC,MAAM,EACtB,IAAI,EAAE,OAAO,CAAC,IAAI,EAClB,OAAO,EAAE,OAAO,CAAC,OAAO,EACxB,MAAM,EAAE,OAAO,CAAC,MAAM,IACnB,mBAAmB,CACzB,CAAC;IACF,OAAO,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE,YAAY,CAAC;SAClC,IAAI,CAAC,UAAC,QAAkB;QACrB,IAAM,QAAQ,GAAG,IAAI,cAAc,CAAC,cAAM,OAAA,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,EAA7B,CAA6B,CAAC,CAAC;QAEzE,yDAAyD;QACzD,kCAAkC;QAClC,6DAA6D;QAC7D,oCAAoC;QACpC,2DAA2D;QAC3D,+BAA+B;QAC/B,IAAM,QAAQ,GAAG,IAAI,cAAc,CAAC,cAAM,OAAA,QAAQ,CAAC,QAAQ,EAAE;aACxD,IAAI,CAAC,UAAA,CAAC;YACH,IAAI,OAAM,CAAC,CAAC,CAAC,KAAK,WAAW,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,EAAE,EAAE;gBACrD,OAAO,IAAI,CAAC;aACf;YACD,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACzB,CAAC,CAAC,EANoC,CAMpC,CACL,CAAC;QAEF,OAAO;YACH,EAAE,EAAE,QAAQ,CAAC,EAAE;YACf,GAAG,EAAE,QAAQ,CAAC,GAAG;YACjB,MAAM,EAAE,QAAQ,CAAC,MAAM;YACvB,IAAI,EAAE,QAAQ,CAAC,QAAQ;YACvB,IAAI,EAAE,QAAQ,CAAC,QAAQ;YACvB,OAAO,EAAE,QAAQ,CAAC,OAAO;YAEzB,mCAAmC;YACnC,OAAO,EAAE,QAAQ,CAAC,QAAQ;YAC1B,OAAO,EAAE,QAAQ,CAAC,QAAQ;SAC7B,CAAC;IACN,CAAC,CAAC,CAAC;AACX,CAAC,CAAC;AAEF,eAAe,YAAY,CAAC","sourcesContent":["import { ApiRequestInvoker, ApiRequest, ApiResponse } from \"./ApiInterfaces\";\r\nimport LazyAsyncValue from \"~/Util/LazyAsyncValue\";\r\n\r\n// Actually makes the fetch request\r\nconst defaultFetchOptions: RequestInit = { \r\n    mode: \"cors\"\r\n};\r\nconst fetchInvoker: ApiRequestInvoker = (request: ApiRequest): Promise<ApiResponse> => {\r\n    \r\n    const fetchOptions = {\r\n        method: request.method,\r\n        body: request.body,\r\n        headers: request.headers,\r\n        signal: request.signal,\r\n        ...defaultFetchOptions,\r\n    };\r\n    return fetch(request.url, fetchOptions)\r\n        .then((response: Response) => {\r\n            const lazyText = new LazyAsyncValue(() => response.text.apply(response));\r\n\r\n            // Some of our APIs misbehave and return 200 with no body\r\n            // which would result in an error.\r\n            // We also wouldn't be able to call BOTH getText AND getJson \r\n            // since body is only readable once.\r\n            // Therfore instead of using response.json, we'll use .text\r\n            // and parse to json ourselves.\r\n            const lazyJson = new LazyAsyncValue(() => lazyText.getValue()\r\n                .then(t => {\r\n                    if (typeof(t) === \"undefined\" || t === null || t === \"\") {\r\n                        return null;\r\n                    }\r\n                    return JSON.parse(t);\r\n                })\r\n            );\r\n\r\n            return {\r\n                ok: response.ok,\r\n                url: response.url,\r\n                status: response.status,\r\n                text: lazyText.getValue,\r\n                json: lazyJson.getValue,                \r\n                headers: response.headers,\r\n\r\n                // Following methods are Deprecated\r\n                getText: lazyText.getValue,\r\n                getJson: lazyJson.getValue\r\n            };\r\n        });\r\n};\r\n\r\nexport default fetchInvoker;"]}