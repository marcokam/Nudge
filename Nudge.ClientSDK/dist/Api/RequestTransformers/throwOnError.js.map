{"version":3,"file":"throwOnError.js","sourceRoot":"","sources":["../../../Api/RequestTransformers/throwOnError.ts"],"names":[],"mappings":"AACA,OAAO,SAAS,MAAM,qBAAqB,CAAC;AAE5C,IAAM,YAAY,GAAG,cAA4B,OAAA,UAAC,OAAmB,EAAE,IAAuB;IAC1F,OAAO,IAAI,CAAC,OAAO,CAAC;SACf,IAAI,CAAC,UAAA,QAAQ;QACV,IAAM,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;QACnC,IAAM,IAAI,GAAG,UAAU,IAAI,GAAG,IAAI,UAAU,IAAI,GAAG,CAAC;QACpD,IAAI,IAAI,EAAE;YACN,OAAO,QAAQ,CAAC;SACnB;QACD,MAAM,IAAI,SAAS,CAAC,QAAQ,CAAC,CAAC;IAClC,CAAC,CAAC,CAAC;AACX,CAAC,EAVgD,CAUhD,CAAC;AACF,eAAe,YAAY,CAAC","sourcesContent":["import { ApiRequestMiddleware, ApiRequest, ApiRequestInvoker, ApiResponse } from \"../ApiInterfaces\";\r\nimport HttpError from \"../Errors/HttpError\";\r\n\r\nconst throwOnError = (): ApiRequestMiddleware => (request: ApiRequest, next: ApiRequestInvoker): Promise<ApiResponse> => {\r\n    return next(request)\r\n        .then(response => {\r\n            const statusCode = response.status;\r\n            const isOk = statusCode >= 200 && statusCode <= 299;\r\n            if (isOk) {\r\n                return response;\r\n            }\r\n            throw new HttpError(response);\r\n        });\r\n};\r\nexport default throwOnError;\r\n"]}