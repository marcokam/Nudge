{"version":3,"file":"withTokenManager.js","sourceRoot":"","sources":["../../../Api/RequestTransformers/withTokenManager.ts"],"names":[],"mappings":";;;;;;;;;;;AAGA,gCAAgC;AAChC,IAAM,gBAAgB,GAAG,UAAC,YAA0B,IAA2B,OAAA,UAAC,OAAmB,EAAE,IAAuB;IAExH,IAAI,OAAO,CAAC,WAAW,EAAE;QACrB,OAAO,IAAI,CAAC,OAAO,CAAC,CAAC;KACxB;IACD,IAAM,WAAW,GAAG,YAAY,CAAC,cAAc,EAAE,CAAC;IAClD,IAAI,CAAC,WAAW,EAAE;QACd,OAAO,IAAI,CAAC,OAAO,CAAC,CAAC;KACxB;IAED,IAAM,WAAW,cACb,WAAW,aAAA,IACR,OAAO,CACb,CAAC;IACF,OAAO,IAAI,CAAC,WAAW,CAAC,CAAC;AAC7B,CAAC,EAf8E,CAe9E,CAAC;AACF,eAAe,gBAAgB,CAAC","sourcesContent":["import { ApiRequestMiddleware, ApiRequest, ApiRequestInvoker, ApiResponse } from \"../ApiInterfaces\";\r\nimport TokenManager from \"~/Authentication/TokenManager\";\r\n\r\n//TODO: Add auto-refresh + retry\r\nconst withTokenManager = (tokenManager: TokenManager): ApiRequestMiddleware => (request: ApiRequest, next: ApiRequestInvoker): Promise<ApiResponse> => {\r\n\r\n    if (request.accessToken) { \r\n        return next(request);       \r\n    }\r\n    const accessToken = tokenManager.getAccessToken();    \r\n    if (!accessToken) {\r\n        return next(request);       \r\n    }\r\n\r\n    const nextRequest = {\r\n        accessToken,\r\n        ...request\r\n    };\r\n    return next(nextRequest);\r\n};\r\nexport default withTokenManager;\r\n"]}