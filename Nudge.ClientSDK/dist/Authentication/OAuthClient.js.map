{"version":3,"file":"OAuthClient.js","sourceRoot":"","sources":["../../Authentication/OAuthClient.ts"],"names":[],"mappings":"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","sourcesContent":["import { Task, Result } from \"~/Util/fp/Instances/Task\";\r\nimport registry from \"~/Util/registry\";\r\n\r\nexport enum GrantType {\r\n    AuthorizationCode = \"authorization_code\",\r\n    RefreshToken = \"refresh_token\"\r\n}\r\n\r\nconst grantTypeKeys = {\r\n    [GrantType.AuthorizationCode]: \"code\",\r\n    [GrantType.RefreshToken]: \"refresh_token\"\r\n};\r\n\r\nexport interface OAuthClientConfig {\r\n    tokenPostUrl: string;\r\n    clientId: string;\r\n    clientSecret: string;\r\n}\r\nexport enum TokenPostErrorCode {\r\n    InvalidGrant = \"invalid_grant\"\r\n}\r\n\r\nfunction tokenPostError(reason: string, err?: TokenPostErrorCode): TokenPostError {\r\n    registry.logger.error(\"login failed\", { reason }, err);\r\n    return { isSuccess: false };\r\n}\r\n\r\ninterface TokenPostError {\r\n    isSuccess: false;\r\n    error?: TokenPostErrorCode;\r\n}\r\ninterface TokenPostResponse {\r\n    isSuccess: true;\r\n    access_token: string;\r\n    refresh_token: string;\r\n    userName: string;\r\n    expires_in: number;\r\n    refresh_token_expires_in: number;\r\n}\r\nexport function isTokenPostError(responseOrError: TokenPostError | TokenPostResponse): responseOrError is TokenPostError {\r\n    return !responseOrError.isSuccess;\r\n}\r\n\r\nexport default class OAuthClient {\r\n\r\n    private readonly clientConfig: Result<OAuthClientConfig>;\r\n\r\n    constructor (clientConfig: Result<OAuthClientConfig>) {\r\n        this.clientConfig = clientConfig;\r\n    }\r\n\r\n    tokenPost = (grantType: GrantType, grantValue: string): Promise<TokenPostResponse | TokenPostError> => Task.toPromise(this.clientConfig)\r\n        .then(config => {\r\n            const { clientId, clientSecret, tokenPostUrl } = config;\r\n            const grantKey = grantTypeKeys[grantType];\r\n    \r\n            const tokenPostBody = `client_id=${clientId}&client_secret=${clientSecret}&grant_type=${grantType}&${grantKey}=${grantValue}`;\r\n            return fetch(tokenPostUrl, { \r\n                method: \"POST\",                   \r\n                body: tokenPostBody,\r\n                headers: {\r\n                    \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n                    \"Accept\": \"application/json\"\r\n                }\r\n            });                \r\n        })\r\n        .then(response => {\r\n            if (!response.ok) {\r\n                // Consuming code may want to know when specific errors happen.  eg \"invalid_grant\"\r\n                if (response.status === 400) {                    \r\n                    return response.json().then(b => ({ isSuccess: false, error: b.error as TokenPostErrorCode }));\r\n                }\r\n                return tokenPostError(`token-post request failed with status code ${status}`);\r\n            }\r\n            \r\n            // Success.  Just add the \"isSuccess\" property to it\r\n            return response.json().then(tpr => ({ isSuccess: true, ...(tpr as TokenPostResponse) }));\r\n        });\r\n\r\n    useAuthorizationCode = (responseUrl: URL): Promise<TokenPostResponse | TokenPostError> => {\r\n        const qsParams = responseUrl.searchParams;\r\n\r\n        // Check for an error on the query string\r\n        const error = qsParams.get(\"error\");\r\n        if (error) {\r\n            return Promise.resolve(tokenPostError(error));\r\n        }\r\n        \r\n        // Pull the authorization code off the query string\r\n        const authorizationCode = qsParams.get(\"code\");\r\n        if (!authorizationCode) {\r\n            return Promise.resolve(tokenPostError(\"missing code\"));\r\n        }\r\n    \r\n        // Call token-post endpoint to trade code for refresh and access tokens\r\n        return this.tokenPost(GrantType.AuthorizationCode, authorizationCode)\r\n            .then(tpr => {\r\n                if (isTokenPostError(tpr)) {\r\n                    return tpr;\r\n                }\r\n            \r\n                // Get the refresh_token and access_token off the response\r\n                const refreshToken = tpr.refresh_token;\r\n                const accessToken = tpr.access_token;\r\n                if (!refreshToken) {\r\n                    return tokenPostError(\"refresh_token missing\");\r\n                }\r\n                if (!accessToken) {\r\n                    return tokenPostError(\"access_token missing\");\r\n                }\r\n            \r\n                return tpr;\r\n            })\r\n\r\n    }\r\n\r\n}\r\n"]}