{"version":3,"file":"SelectorBase.js","sourceRoot":"","sources":["../../../ConfigUI/Controls/SelectorBase.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport registry from \"~/Util/registry\";\r\nimport { ControlInstanceFactorySettings, Params, ComponentConstructor, ControlInstance } from \"../ConfigUIInterfaces\";\r\nimport { SimpleControlInstance } from \"../Helpers\";\r\n\r\nexport interface ListElement {\r\n    id: number;\r\n    uri: string;\r\n    displayName: string;\r\n}\r\nexport interface ListSelectorProps { \r\n    icon: string;\r\n};\r\n\r\ninterface StateType<TElement> { \r\n    elements: TElement[];\r\n    selectedUri: string | null;\r\n    loading: boolean;\r\n};\r\n\r\nexport interface SelectorSettings<TElement> {\r\n    onError(...logArgs: any[]): void;\r\n    getData(params: Params): Promise<{ defaultUri: string; elements: TElement[]}>;\r\n    selectComponent: ComponentConstructor;\r\n    //(selectedUri: string | null, children: JSX.Element[], onChange: (e: React.ChangeEvent<HTMLSelectElement>) => void): Component;\r\n    idParameterName: string;\r\n    uriParameterName: string;\r\n}\r\n\r\nconst createSelector = <TElement extends ListElement>(selectorSettings: SelectorSettings<TElement>) =>\r\n    (controlSettings: ControlInstanceFactorySettings): ControlInstance => {\r\n        \r\n        const findElement = (from: TElement[], predicate: (element: TElement) => boolean): TElement | null => {\r\n            if (from && from.length > 0) {\r\n                return from.find(predicate) || null;\r\n            }\r\n            return null;\r\n        };\r\n        const findElementByUri = (from: TElement[], uri: string) => findElement(from, e => e.uri === uri);\r\n        const findElementById = (from: TElement[], id: number) => findElement(from, e => e.id === id);\r\n        const findElementByParams = (params: Params, elements: TElement[]): TElement | null => {\r\n            const uri = params[selectorSettings.uriParameterName];\r\n            if (uri) {\r\n                return findElementByUri(elements, uri);\r\n            }\r\n            const id = params[selectorSettings.idParameterName];\r\n            if (id) {\r\n                return findElementById(elements, id);\r\n            }\r\n            return null;\r\n        }\r\n\r\n        const component = class SelectorHOC extends Component<any, StateType<TElement>> {\r\n    \r\n            constructor(props: any) {\r\n                super(props);\r\n                this.state = { \r\n                    elements: [],\r\n                    selectedUri: \"\",\r\n                    loading: true\r\n                }\r\n            }\r\n\r\n            componentDidMount = () => {\r\n                const startingParams = controlSettings.context.getParameters();\r\n                registry.logger.debug(\"SelectorHOC startingParams = \", startingParams);\r\n                selectorSettings.getData(startingParams)\r\n                    .then(data => {\r\n                        registry.logger.debug(\"got data\", data);\r\n                        const { elements } = data;\r\n\r\n                        const select = (params: Params) => {\r\n                            const selected = findElementByParams(params, elements);\r\n                            if (selected) {\r\n                                const selectedUri = selected.uri;\r\n                                this.setState({ elements, loading: false, selectedUri });\r\n                            } else {\r\n                                const first = (elements && elements.length > 0 && elements[0]) || null;\r\n                                if (first) {\r\n                                    this.setState({ elements, loading: false })\r\n                                    this.setSelected(first);                                    \r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        // Find selected\r\n                        select(startingParams);\r\n\r\n                        // Watch for changes to selected\r\n                        controlSettings.context.subscribe(params => {\r\n                            registry.logger.debug(\"SelectorHOC newParams = \", params);\r\n                            select(params);\r\n                        })\r\n                    })\r\n                    .catch(selectorSettings.onError);\r\n            }\r\n\r\n            render = () => {        \r\n                if (!this.state || this.state.loading) {\r\n                    return <div>loading...</div>;\r\n                }\r\n                \r\n                //TODO: Error state\r\n                //TODO: Empty state\r\n\r\n                const children = this.state.elements.map(element => <option key={element.uri} value={element.uri}>{element.displayName}</option>);\r\n\r\n                const SelectComponent = selectorSettings.selectComponent;\r\n                return (\r\n                    <SelectComponent selectedUri={this.state.selectedUri} onChange={this.onChangeSelector}>\r\n                        { children }\r\n                    </SelectComponent>\r\n                );\r\n            }\r\n\r\n            onChangeSelector = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n                const uri: string = e.target.value;\r\n                const element = findElementByUri(this.state.elements, uri);\r\n                registry.logger.debug(`onChangeSelector: `, { uri, element});\r\n                this.setSelected(element);\r\n            }\r\n\r\n            setSelected = (element: TElement | null) => {\r\n                registry.logger.debug(`selecting element`, element);\r\n                const selectedId = element ? element.id : null;\r\n                const selectedUri = element ? element.uri : null;\r\n                controlSettings.context.setParameters({ \r\n                    [selectorSettings.idParameterName]: selectedId,\r\n                    [selectorSettings.uriParameterName]: selectedUri\r\n                });\r\n            }\r\n        }\r\n\r\n        return new SimpleControlInstance(controlSettings.controlConfiguration, component, controlSettings.context, controlSettings.parent);\r\n    };\r\n\r\nexport default createSelector;"]}