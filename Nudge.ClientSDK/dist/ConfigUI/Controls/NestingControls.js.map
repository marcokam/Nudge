{"version":3,"file":"NestingControls.js","sourceRoot":"","sources":["../../../ConfigUI/Controls/NestingControls.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport uuid from \"uuid\";\r\n\r\nimport { \r\n    ControlInstance,\r\n    ControlInstanceFactory,\r\n    ComponentConstructor,\r\n    ControlInstanceFactorySettings\r\n} from \"../ConfigUIInterfaces\";\r\nimport {\r\n    SimpleControlInstance,\r\n    sfcAsClass\r\n} from \"../Helpers\";\r\nimport LazyValue from \"~/Util/LazyValue\";\r\nimport registry from \"~/Util/registry\";\r\nimport NudgeIterable from \"~/Util/NudgeIterable\";\r\nimport SdkLogCategories from \"~/Logging/Category/SdkLogCategories\";\r\n\r\nconst logger = registry.categoryLoggers.create(SdkLogCategories.ConfigUI);\r\n\r\ninterface GetChildInstances{ \r\n    getChildInstances(): ControlInstance[];\r\n}\r\ntype NestingControlInstanceFactorySettings = ControlInstanceFactorySettings & GetChildInstances;\r\nexport const simpleNestingClassFactory = (constructor: (settings: NestingControlInstanceFactorySettings) => ComponentConstructor): ControlInstanceFactory => {\r\n    return settings => {\r\n        let myInstance: SimpleControlInstance | null = null;\r\n        const { controlConfiguration, controlManager, parent } = settings;\r\n        const createChildren = () => controlConfiguration.children.map(child => controlManager.create(child, myInstance as SimpleControlInstance))\r\n        const lazyChildInstances = new LazyValue<ControlInstance[]>(createChildren);\r\n        const getChildInstances = () => lazyChildInstances.getValue();\r\n        const myComponent: ComponentConstructor = constructor({ \r\n            ...settings, \r\n            getChildInstances\r\n        });\r\n        \r\n        myInstance = new SimpleControlInstance(controlConfiguration, myComponent, settings.context, parent);\r\n        return myInstance;\r\n    }\r\n}\r\n\r\nexport const conditionalStacked = (predicate: () => boolean) => simpleNestingClassFactory((settings: NestingControlInstanceFactorySettings): ComponentConstructor => {\r\n    const sfc: React.SFC = () => {\r\n        const { className } = settings.controlConfiguration.parameters;\r\n        return (\r\n            <div className={className || \"stacked\"}>\r\n                {\r\n                    predicate() ? settings.getChildInstances().map(child => {\r\n                        const ChildComponent: ComponentConstructor = child.component;                    \r\n                        return <ChildComponent key={child.key} />;\r\n                    }) : null\r\n                }\r\n            </div>\r\n        );\r\n    };\r\n    sfc.displayName = \"Stacked\";\r\n    return sfcAsClass(sfc, settings);\r\n});\r\n\r\nexport const Stacked: ControlInstanceFactory = conditionalStacked(() => true);\r\n\r\nclass GridViewEmptyCell extends React.Component {\r\n    render = () => {\r\n        return (<div className=\"gridView-emptyCell\"></div>);\r\n    }\r\n}\r\n\r\nexport const GridView: ControlInstanceFactory = simpleNestingClassFactory((settings: NestingControlInstanceFactorySettings): ComponentConstructor => {\r\n    const myKey = uuid();\r\n\r\n    // Implictly assume that children are specified left-to-right then top-to-bottom\r\n    const sfc: React.SFC = () => {\r\n        \r\n        //TODO: casting any to number, assumes values exist.\r\n        const { parameters = {} } = settings.controlConfiguration;\r\n        const { \r\n            className = \"gridView\",\r\n            rowClassName = \"gridView-row\", \r\n            cellClassName = \"gridView-cell\"\r\n        } = parameters;\r\n\r\n        const rows: number = parameters.rows;\r\n        const columns: number = parameters.columns;\r\n        const children = settings.getChildInstances();\r\n        const getChildComponent = (row: number, column: number): ComponentConstructor => {\r\n            const index = ((row - 1) * columns) + (column - 1);\r\n            if (index >= children.length) {\r\n                return GridViewEmptyCell;\r\n            }\r\n            const child = children[index];\r\n            logger.debug(`GridView: cell (${row},${column}) = index ${index}`, child)\r\n            return child.component;\r\n        };\r\n\r\n        logger.debug(`rendering GridView with rows=${rows}, columns=${columns}`);\r\n        return (            \r\n            <div className={className} key={`gridView-${myKey}`}>\r\n                {\r\n                    NudgeIterable.fromRange(1, rows).map(rowNum => {   \r\n                        logger.debug(`rendering GridView row ${rowNum}`);\r\n                        return (<div className={rowClassName} key={`gridView-${myKey}-row-${rowNum}`}>\r\n                            {\r\n                                NudgeIterable.fromRange(1, columns).map(columnNum => {\r\n                                    const ChildComponent = getChildComponent(rowNum, columnNum);\r\n                                    return (\r\n                                        <div className={cellClassName} key={`gridView-${myKey}-row-${rowNum}-col-${columnNum}`}>\r\n                                            <ChildComponent />\r\n                                        </div>\r\n                                    );\r\n                                }).toArray()\r\n                            }\r\n                        </div>);\r\n                    }).toArray()\r\n                }\r\n            </div>            \r\n        );\r\n    };\r\n    sfc.displayName = \"GridView\";\r\n    return sfcAsClass(sfc, settings);\r\n});"]}