{"version":3,"file":"ControlManager.js","sourceRoot":"","sources":["../../ConfigUI/ControlManager.tsx"],"names":[],"mappings":"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","sourcesContent":["import { \r\n    ControlConfiguration,\r\n    ControlManager,\r\n    ControlInstance,\r\n    ControlDictionary,\r\n    ComponentConstructor,\r\n    RootControlConfiguration,\r\n    Params,\r\n    emptyControlConfiguration\r\n} from \"./ConfigUIInterfaces\";\r\nimport BuiltInControls from \"./BuiltInControls\";\r\nimport * as React from \"react\";\r\nimport registry from \"~/Util/registry\";\r\nimport { ParameterPersistence } from \"./ParameterPersistence\";\r\nimport ContextFactory from \"./ContextFactory\";\r\nimport SdkLogCategories from \"~/Logging/Category/SdkLogCategories\";\r\n\r\nconst logger = registry.categoryLoggers.create(SdkLogCategories.ConfigUI);\r\n\r\nexport default class ControlManagerImpl implements ControlManager {\r\n\r\n    private readonly controlDefinitions: ControlDictionary;\r\n    private readonly contextFactory: ContextFactory;\r\n\r\n    constructor(controlDefinitions: ControlDictionary, parameterPersistence: ParameterPersistence) {\r\n        this.controlDefinitions = controlDefinitions;\r\n        this.contextFactory = new ContextFactory(parameterPersistence);\r\n    }\r\n    \r\n    create = (controlConfiguration: Partial<ControlConfiguration>, parent: ControlInstance): ControlInstance => {\r\n\r\n        const fullControlConfiguration = Object.assign({}, emptyControlConfiguration, controlConfiguration);\r\n        const typeName = fullControlConfiguration.type;\r\n        if (!typeName) {\r\n            throw Error(`Type is required`);\r\n        }\r\n        const def = this.controlDefinitions[typeName];\r\n        if (!def) {\r\n            throw Error(`Unable to locate ControlTypeDefinition for specified type ${typeName}`);\r\n        }\r\n\r\n        // Make sure if parameters and children aren't specified, we populate with empty object/array.\r\n        // This can happen when config is deserialized or set in non-TypeScript code.\r\n        const configCopy = {\r\n            parameters: {},\r\n            children: [],\r\n            ...fullControlConfiguration\r\n        };\r\n\r\n        const context = this.contextFactory.createControlContext(fullControlConfiguration, parent)\r\n        logger.debug(`creating control ${typeName} with parameters and context`, fullControlConfiguration.parameters, parent.context);\r\n\r\n        return def({\r\n            controlManager: this,\r\n            controlConfiguration: configCopy,\r\n            context,\r\n            parent,\r\n        });\r\n    }\r\n\r\n    createRoot = (config: Partial<RootControlConfiguration>, inputParameters: Params): Promise<ControlInstance> => {        \r\n        \r\n        const controlConfiguration = config.rootControl || emptyControlConfiguration;\r\n        return this.contextFactory.createBoundaryContext(config.context || {}, inputParameters)\r\n            .then(context => {\r\n                let TopComponent: ComponentConstructor;         \r\n                const rootComponent = class RootComponent extends React.Component<object, {params: object}> {\r\n\r\n                    constructor(props?: any) {\r\n                        super(props);\r\n                    }\r\n\r\n                    render = () => {\r\n                        return (\r\n                            <TopComponent />\r\n                        );\r\n                    }\r\n                };\r\n                const rootConfig: ControlConfiguration = {\r\n                    type: \"Root\",\r\n                    parameters: {},\r\n                    children: [ controlConfiguration ],\r\n                    inputParameters: [],\r\n                    outputParameters: []\r\n                };\r\n                const rootInstance: ControlInstance = {\r\n                    controlConfiguration: rootConfig,   \r\n                    component: rootComponent,\r\n                    context\r\n                };\r\n                const specifiedControl = this.create(controlConfiguration, rootInstance)\r\n                TopComponent = specifiedControl.component;\r\n                return rootInstance;\r\n            });\r\n    }\r\n};\r\n\r\n//TODO: This should be a test as this is probably not used, mostly just asserts that BuiltInControls is the right type.\r\nexport const createWithBuiltInControls = (parameterPersistence: ParameterPersistence): ControlManager => {\r\n    return new ControlManagerImpl(BuiltInControls, parameterPersistence);\r\n}\r\n\r\nexport const combineDefinitions = (...controlDefinitions: ControlDictionary[]): ControlDictionary => {\r\n    const combined = {};\r\n    controlDefinitions.forEach(defs => Object.assign(combined, defs));\r\n    return combined;\r\n}"]}