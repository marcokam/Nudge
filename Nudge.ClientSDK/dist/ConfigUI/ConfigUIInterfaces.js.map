{"version":3,"file":"ConfigUIInterfaces.js","sourceRoot":"","sources":["../../ConfigUI/ConfigUIInterfaces.ts"],"names":[],"mappings":"AAQ8C,CAAC;AAqBa,CAAC;AAU7D,MAAM,CAAC,IAAM,oBAAoB,GAAoB;IACjD,eAAe,EAAE,EAAE;IACnB,cAAc,EAAE,EAAE;IAClB,iBAAiB,EAAE,EAAE;IACrB,eAAe,EAAE,EAAE;CACtB,CAAC;AACF,MAAM,CAAC,IAAM,yBAAyB,GAAyB;IAC3D,IAAI,EAAE,EAAE;IACR,UAAU,EAAE,EAAE;IACd,eAAe,EAAE,EAAE;IACnB,gBAAgB,EAAE,EAAE;IACpB,QAAQ,EAAE,EAAE;CACf,CAAC","sourcesContent":["import { \r\n    Component    \r\n} from \"react\";\r\n\r\ntype FunctionalComponent = (props: object) => React.ReactElement;\r\nexport type ComponentConstructor = typeof Component | FunctionalComponent;\r\n\r\nexport type SubscribeFunction = (parameters: Params) => void;\r\nexport interface Params { [key: string]: any };\r\nexport interface Context {\r\n    getParameters(): Params;\r\n    setParameters(newParameters: object): void;\r\n    subscribe(subscriber: SubscribeFunction): void;\r\n    isBoundary: boolean;\r\n}\r\nexport interface ContextSettings {\r\n    inputParameters: FlexibleParameterMappings;\r\n    persistenceKey: string;\r\n    persistParameters: FlexibleParameterMappings;\r\n    fixedParameters: Params;    \r\n}\r\nexport interface RootControlConfiguration {\r\n    context: Partial<ContextSettings>;\r\n    rootControl: Partial<ControlConfiguration>;\r\n}\r\nexport interface ControlManager {\r\n    create(controlConfiguration: Partial<ControlConfiguration>, parent: ControlInstance): ControlInstance;\r\n    createRoot(config: Partial<RootControlConfiguration>, inputParameters?: Params): Promise<ControlInstance>;\r\n}\r\nexport interface ParameterMappings { [key: string]: string };\r\nexport type FlexibleParameterMappings = (string | string[] | ParameterMappings);\r\nexport interface ControlConfiguration {\r\n    type: string;\r\n    parameters: Params;\r\n    inputParameters: FlexibleParameterMappings;\r\n    outputParameters: FlexibleParameterMappings;\r\n    children: Partial<ControlConfiguration>[];\r\n}\r\n\r\nexport const emptyContextSettings: ContextSettings = {\r\n    inputParameters: [],\r\n    persistenceKey: \"\",\r\n    persistParameters: [],\r\n    fixedParameters: {}    \r\n};\r\nexport const emptyControlConfiguration: ControlConfiguration = {\r\n    type: \"\",\r\n    parameters: {},\r\n    inputParameters: [],\r\n    outputParameters: [],\r\n    children: []\r\n};\r\n\r\nexport type ControlInstanceFactory = (settings: ControlInstanceFactorySettings) => ControlInstance;\r\n\r\nexport interface ControlInstanceFactorySettings {\r\n    readonly controlManager: ControlManager;\r\n    readonly controlConfiguration: ControlConfiguration;\r\n    readonly context: Context;\r\n    readonly parent: ControlInstance;\r\n}\r\n\r\nexport interface ControlInstance {\r\n    controlConfiguration: ControlConfiguration;    \r\n    component: ComponentConstructor;\r\n    context: Context;\r\n    parent?: ControlInstance;\r\n    key?: string;\r\n}\r\n\r\nexport interface Dictionary<V> {\r\n    [key: string]: V;\r\n}\r\n\r\nexport type ControlDictionary = Dictionary<ControlInstanceFactory>;\r\n"]}