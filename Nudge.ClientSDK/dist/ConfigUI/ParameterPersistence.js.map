{"version":3,"file":"ParameterPersistence.js","sourceRoot":"","sources":["../../ConfigUI/ParameterPersistence.ts"],"names":[],"mappings":"AACA,OAAO,QAAQ,MAAM,iBAAiB,CAAC;AACvC,OAAO,EAAE,SAAS,EAAE,MAAM,cAAc,CAAC;AACzC,OAAO,KAAK,WAAW,MAAM,oBAAoB,CAAC;AAClD,OAAO,gBAAgB,MAAM,qCAAqC,CAAC;AAEnE,IAAM,MAAM,GAAG,QAAQ,CAAC,eAAe,CAAC,MAAM,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;AAO1E,IAAM,SAAS,GAAG,WAAW,CAAC;AAC9B;IAII,iDAAY,0BAAkC;QAA9C,iBAEC;QAED,uBAAkB,GAAG,UAAC,GAAW;YAE7B,SAAS,CAAC,WAAW,CAAC,wBAAwB,CAAC,GAAG,CAAC,EAAE,yCAAyC,CAAC,CAAC;YAChG,IAAM,OAAO,GAAG,SAAS,GAAG,GAAG,CAAC;YAChC,IAAM,GAAG,GAAG,KAAI,CAAC,SAAS,GAAG,kBAAkB,CAAC,OAAO,CAAC,CAAC;YACzD,MAAM,CAAC,KAAK,CAAC,gBAAgB,EAAE,GAAG,CAAC,CAAC;YACpC,OAAO,QAAQ,CAAC,SAAS,CAAC,OAAO,CAAC,GAAG,CAAC;iBACjC,IAAI,CAAC,UAAA,IAAI;gBACN,MAAM,CAAC,KAAK,CAAC,YAAY,EAAE,GAAG,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;gBAC/C,OAAO,IAAI,CAAC,OAAO,CAAW,CAAC;YACnC,CAAC,CAAC,CAAC;QACX,CAAC,CAAA;QAED,wBAAmB,GAAG,UAAC,GAAW,EAAE,MAAc;;YAC9C,IAAM,OAAO,GAAG,SAAS,GAAG,GAAG,CAAC;YAChC,IAAM,GAAG,GAAG,KAAI,CAAC,SAAS,GAAG,OAAO,CAAC;YACrC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,eAAe,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;YACxD,IAAM,IAAI;gBACN,GAAC,OAAO,IAAG,MAAM;mBACpB,CAAC;YACF,OAAO,QAAQ,CAAC,SAAS,CAAC,SAAS,CAAC,GAAG,EAAE,IAAI,CAAC;iBACzC,IAAI,CAAC,UAAA,IAAI;gBACN,OAAO,IAAI,CAAC,OAAO,CAAW,CAAC;YACnC,CAAC,CAAC,CAAC;QACX,CAAC,CAAA;QA3BG,IAAI,CAAC,SAAS,GAAG,CAAC,IAAI,GAAG,CAAC,oCAAoC,EAAE,0BAA0B,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;QAAA,CAAC;IAC7G,CAAC;IA2BL,8CAAC;AAAD,CAAC,AAjCD,IAiCC","sourcesContent":["import { Params } from \"./ConfigUIInterfaces\";\r\nimport registry from \"~/Util/registry\";\r\nimport { invariant } from \"~/Util/utils\";\r\nimport * as StringUtils from \"~/Util/StringUtils\";\r\nimport SdkLogCategories from \"~/Logging/Category/SdkLogCategories\";\r\n\r\nconst logger = registry.categoryLoggers.create(SdkLogCategories.ConfigUI);\r\n\r\nexport interface ParameterPersistence {\r\n    getPersistedParams(key: string): Promise<Params>;\r\n    savePersistedParams(key: string, params: Params): Promise<Params>;\r\n}\r\n\r\nconst keyPrefix = \"configUI_\";\r\nexport class ApplicationServicesParameterPersistence implements ParameterPersistence {\r\n\r\n    private readonly urlPrefix: string;\r\n\r\n    constructor(applicationServicesBaseUrl: string) {\r\n        this.urlPrefix = (new URL(`/v2/users/current/settings?fields=`, applicationServicesBaseUrl)).toString();;\r\n    }\r\n\r\n    getPersistedParams = (key: string): Promise<Params> => {\r\n\r\n        invariant(StringUtils.isAlphaNumericUnderscore(key), \"key must be alpha-numeric or underscore\");\r\n        const setting = keyPrefix + key;\r\n        const url = this.urlPrefix + encodeURIComponent(setting);\r\n        logger.debug(\"Getting params\", key);\r\n        return registry.apiClient.getJson(url)\r\n            .then(json => {\r\n                logger.debug(\"Got params\", key, json[setting]);\r\n                return json[setting] as Params;\r\n            });\r\n    }\r\n\r\n    savePersistedParams = (key: string, params: Params): Promise<Params> => {\r\n        const setting = keyPrefix + key;\r\n        const url = this.urlPrefix + setting;\r\n        registry.logger.debug(\"Saving params\", setting, params);\r\n        const body = {\r\n            [setting]: params\r\n        };\r\n        return registry.apiClient.patchJson(url, body)\r\n            .then(json => {\r\n                return json[setting] as Params;\r\n            });\r\n    }\r\n}"]}