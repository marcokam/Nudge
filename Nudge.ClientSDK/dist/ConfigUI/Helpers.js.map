{"version":3,"file":"Helpers.js","sourceRoot":"","sources":["../../ConfigUI/Helpers.tsx"],"names":[],"mappings":"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","sourcesContent":["// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nimport React from \"react\";\r\nimport { \r\n    Component,\r\n    SFC    \r\n} from \"react\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport registry from \"~/Util/registry\";\r\n\r\nimport { \r\n    ControlConfiguration as Configuration,\r\n    ControlInstance as Instance,\r\n    ControlInstanceFactory as InstanceFactory,\r\n    ControlInstanceFactorySettings as InstanceFactorySettings,\r\n    ComponentConstructor,\r\n    Context,\r\n    Params,\r\n    ControlInstanceFactorySettings,\r\n    ParameterMappings\r\n} from \"./ConfigUIInterfaces\";\r\nimport { convertParameterMappings } from \"./ContextFactory\";\r\nimport { entries } from \"~/Util/ObjectUtils\";\r\nimport SdkLogCategories from \"~/Logging/Category/SdkLogCategories\";\r\n\r\nconst logger = registry.categoryLoggers.create(SdkLogCategories.ConfigUI);\r\n\r\nexport class SimpleControlInstance implements Instance {\r\n\r\n    constructor(\r\n        controlConfiguration: Configuration,\r\n        component: ComponentConstructor,\r\n        context: Context,\r\n        parent: Instance        \r\n    ) {\r\n        logger.debug(`creating SimpleControlInstance with parameters`, controlConfiguration.parameters);\r\n        this.controlConfiguration = controlConfiguration;        \r\n        this.component = component;\r\n        this.context = context;\r\n        this.parent = parent;\r\n        this.key = uuid();\r\n    }\r\n\r\n    readonly controlConfiguration: Configuration;\r\n    readonly component: ComponentConstructor;\r\n    readonly context: Context;\r\n    readonly parent: Instance;\r\n    readonly key: string;\r\n}\r\n\r\n// export class SimpleControlInstanceFactory implements InstanceFactory {\r\n\r\n//     private readonly componentFactory: (controlConfiguration: Configuration) => ComponentConstructor;    \r\n//     constructor(componentFactory: (controlConfiguration: Configuration) => ComponentConstructor) {\r\n//         this.componentFactory = componentFactory;\r\n//     }\r\n\r\n//     create(controlManager: Manager, controlConfiguration: Configuration, parent?: Instance): Instance {\r\n//         const component = this.componentFactory(controlConfiguration);\r\n//         return new SimpleControlInstance(controlConfiguration, component, parent);\r\n//     }\r\n// }\r\n\r\n// export class ControlInstanceFactoryImpl implements InstanceFactory {\r\n//     private readonly createFn: (controlManager: Manager, controlConfiguration: Configuration, parent?: Instance) => Instance;\r\n//     constructor(createFn: (controlManager: Manager, controlConfiguration: Configuration, parent?: Instance) => Instance) {\r\n//         this.createFn = createFn;\r\n//     }\r\n\r\n//     create(controlManager: Manager, controlConfiguration: Configuration, parent?: Instance): Instance {\r\n//         return this.createFn(controlManager, controlConfiguration, parent);\r\n//     }\r\n// }\r\n\r\n\r\nexport const sfcAsClass = (WrappedComponent: SFC, settings: InstanceFactorySettings) => {\r\n    return class SfcToClass extends Component {\r\n        render() {\t\r\n            const props = { ...this.props, context: settings.context };\r\n            return <WrappedComponent {...props} />;\t\r\n        }\r\n    }\r\n}\r\n\r\n//TODO: The control manager can't actually deal with Promise<InstanceFactory>s\r\n//      but this is going to be necessary in order to support lazy-loading of factories.\r\nexport const lazyInstanceFactory = (factoryProducer: () => Promise<InstanceFactory>): Promise<InstanceFactory> => {\r\n    return factoryProducer().then(factory => {\r\n        return (settings: InstanceFactorySettings) => factory(settings);\r\n    });\r\n};\r\n\r\nexport const sfcFactory = (componentFactory: (settings: InstanceFactorySettings) => SFC): InstanceFactory => {    \r\n    return (settings: InstanceFactorySettings) => {\r\n        const sfc = componentFactory(settings);\r\n        const componentClass = sfcAsClass(sfc, settings);\r\n        return new SimpleControlInstance(settings.controlConfiguration, componentClass, settings.context, settings.parent);\r\n    };\r\n}  \r\n\r\nexport const componentConstructor = (componentClass: ComponentConstructor): InstanceFactory => {\r\n    return (settings) => {\r\n        return new SimpleControlInstance(settings.controlConfiguration, componentClass, settings.context, settings.parent);\r\n    };\r\n}\r\n\r\nexport const classFactory = (constructor: (settings: ControlInstanceFactorySettings) => ComponentConstructor): InstanceFactory => {\r\n    \r\n    return (settings) => {\r\n        const componentClass = constructor(settings);\r\n        return new SimpleControlInstance(settings.controlConfiguration, componentClass, settings.context, settings.parent);\r\n    };\r\n} \r\n\r\n\r\nconst withParamsToPropsPrivate = (componentClass: ComponentConstructor) => (settings: InstanceFactorySettings): Instance => {\r\n    const ComponentClass = componentClass;\r\n    logger.debug(`creating ParamsToProps component with settings`, settings, ComponentClass);\r\n    const paramsToPropsClass = class ParamsToProps extends Component<any, any>{\r\n        \r\n        constructor(props: any) {\r\n            super(props);\r\n\r\n            // Set from initial props and context\r\n            const parameters = settings.context.getParameters();\r\n            this.state = { parameters };\r\n            settings.context.subscribe((parameters: Params) => this.setState({ parameters }));\r\n        }\r\n\r\n        //TODO: Props don't change, we don't have to recalc in render() at all!\r\n        render = () => {\r\n            // Include any props from parent component                \r\n            const childProps = { ...this.props, ...this.state.parameters, setParameters: settings.context.setParameters };\r\n            logger.info(\"rendering withParamsToProps\", childProps);\r\n            return <ComponentClass { ...childProps } />\r\n        }\r\n    };\r\n    return new SimpleControlInstance(settings.controlConfiguration, paramsToPropsClass, settings.context, settings.parent);\r\n};\r\nexport const withParamsToProps = (componentClass: ComponentConstructor, settings?: InstanceFactorySettings): InstanceFactory | Instance => {\r\n    if (settings) {\r\n        return withParamsToPropsPrivate(componentClass)(settings);\r\n    }\r\n    return withParamsToPropsPrivate(componentClass);\r\n};\r\n\r\nexport const willHaveParam = (settings: InstanceFactorySettings, paramName: string): boolean => {\r\n\r\n    // Look for it on fixed parameters\r\n    if (settings.controlConfiguration.parameters && settings.controlConfiguration.parameters[paramName] !== undefined) {\r\n        return true;\r\n    }\r\n    // Look for it on inputParameters\r\n    const convertedInputParams: ParameterMappings = convertParameterMappings(settings.controlConfiguration.inputParameters);\r\n\r\n    return entries(convertedInputParams).any(e => e.value === paramName);\r\n}"]}