{"version":3,"file":"AsyncLoader.js","sourceRoot":"","sources":["../../React/AsyncLoader.tsx"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,6DAA6D;AAC7D,OAAO,KAAK,EAAE,EAAE,SAAS,EAAE,MAAM,OAAO,CAAC;AAYzC;IAAyC,+BAA6C;IAIlF,qBAAY,KAAuB;QAAnC,YACI,kBAAM,KAAK,CAAC,SA4Bf;QAhCO,eAAS,GAAY,KAAK,CAAC;QAK/B,KAAI,CAAC,KAAK,GAAG;YACT,SAAS,EAAE,IAAI;YACf,OAAO,EAAE,KAAK;SACjB,CAAC;QACF,KAAK,CAAC,UAAU;aACX,IAAI,CAAC,UAAA,CAAC;YACH,IAAI,KAAI,CAAC,SAAS,EAAE;gBAChB,OAAO;aACV;YAED,KAAI,CAAC,aAAa,GAAG,CAAC,CAAC;YACvB,KAAI,CAAC,QAAQ,CAAC;gBACV,SAAS,EAAE,KAAK;aACnB,CAAC,CAAC;QAEP,CAAC,CAAC;YACF,iBAAiB;aAChB,KAAK,CAAC;YACH,IAAI,KAAI,CAAC,SAAS,EAAE;gBAChB,OAAO;aACV;YAED,KAAI,CAAC,QAAQ,CAAC;gBACV,SAAS,EAAE,KAAK;gBAChB,OAAO,EAAE,IAAI;aAChB,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;;IACX,CAAC;IAED,0CAAoB,GAApB;QACI,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;IAC1B,CAAC;IAED,4BAAM,GAAN;QACU,IAAA,eAAmC,EAAjC,wBAAS,EAAE,oBAAsB,CAAC;QAC1C,IAAI,SAAS,EAAE;YACX,OAAO,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC;SAC/B;QACD,IAAI,OAAO,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;YAChC,OAAO,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC;SAC7B;QACD,IAAM,KAAK,GAAyB,IAAI,CAAC,aAAa,CAAC;QACvD,OAAO,CAAC,oBAAC,KAAK,OAAG,CAAC,CAAC;IACvB,CAAC;IACL,kBAAC;AAAD,CAAC,AAlDD,CAAyC,SAAS,GAkDjD","sourcesContent":["// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nimport React, { Component } from \"react\";\r\nimport { ComponentConstructor } from \"~/ConfigUI/ConfigUIInterfaces\";\r\n\r\nexport interface AsyncLoaderProps {\r\n    asyncChild: Promise<ComponentConstructor>;\r\n    onError: Component;\r\n    onLoading: Component;\r\n}\r\ninterface AsyncLoaderState {\r\n    isLoading: boolean;\r\n    isError: boolean;\r\n}\r\nexport default class AsyncLoader extends Component<AsyncLoaderProps, AsyncLoaderState> {\r\n    private unmounted: boolean = false;\r\n    private resolvedChild?: ComponentConstructor;\r\n\r\n    constructor(props: AsyncLoaderProps) {\r\n        super(props);\r\n        this.state = {\r\n            isLoading: true,\r\n            isError: false\r\n        };\r\n        props.asyncChild\r\n            .then(r => {\r\n                if (this.unmounted) {\r\n                    return;\r\n                }\r\n\r\n                this.resolvedChild = r;\r\n                this.setState({\r\n                    isLoading: false\r\n                });\r\n                \r\n            })\r\n            //TODO: Log error\r\n            .catch(() => {\r\n                if (this.unmounted) {\r\n                    return;\r\n                }\r\n                \r\n                this.setState({\r\n                    isLoading: false,\r\n                    isError: true\r\n                });\r\n            });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.unmounted = true;\r\n    }\r\n\r\n    render() {\r\n        const { isLoading, isError } = this.state;\r\n        if (isLoading) {\r\n            return this.props.onLoading;\r\n        }\r\n        if (isError || !this.resolvedChild) {\r\n            return this.props.onError;\r\n        }\r\n        const Child: ComponentConstructor = this.resolvedChild;\r\n        return (<Child />);\r\n    }\r\n}"]}