{"version":3,"file":"hooks.js","sourceRoot":"","sources":["../../../../Components/Company/OrgChart/hooks.ts"],"names":[],"mappings":"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","sourcesContent":["import { useState, useEffect, useCallback, useMemo } from \"react\";\r\n\r\nimport { IJobRole, Person, IUserFlaggedData } from \"~/Data/NudgeInterfaces\";\r\n\r\nimport { Task } from \"~/Util/fp/Instances/Task\";\r\nimport NudgeIterable from \"~/Util/NudgeIterable\";\r\nimport { Compare } from \"~/Util/fp/Instances/Compare\";\r\nimport { NudgeUris } from \"~/Uris/NudgeUris\";\r\nimport { allPass, compose } from \"~/Util/fp/function\";\r\nimport { optHead, groupBy, uniq } from \"~/Util/fp/array\";\r\nimport { optProp, mapEntries, entries, propOr } from \"~/Util/fp/object\";\r\nimport { tryCatch, option } from \"~/Util/fp/Instances/Option\";\r\nimport { getEntity, apiStates, ApiStates } from \"~/Util/apiUtils\";\r\nimport {\r\n    numCompareByDir,\r\n    truthyCompareByDir,\r\n    valuesToOrdering,\r\n    sortValueLast,\r\n} from \"~/Util/sortUtils\";\r\nimport * as logger from \"~/Logging/DefaultLogger\";\r\nimport { roleToGroupName, getRolesForTeam, byRoleGroupName, rolesToRoleGroups } from \"~/Data/Person/Role/jobRoleData\";\r\nimport { jobLevelTypeToDisplay, JobLevelDisplay, byLevelDisplay } from \"~/Data/Person/Level/jobLevelData\";\r\nimport {\r\n    RelationshipStrength,\r\n    strengthToOrdering,\r\n    hasTeamStrength,\r\n    hasStrongTeamRelationship,\r\n    hasWeakTeamRelationship,\r\n    isWeakenedTeamRelationship,\r\n    isSlippingTeamRelationship,\r\n    newExec,\r\n    relationshipRisks,\r\n} from \"~/Data/Person/Relationship/relationshipData\";\r\nimport { getCurrentFlaggedData, getPrefixAndReason, flaggedDataReason, FlaggedDataReason } from \"~/Data/Person/Metadata/flagData\";\r\n\r\n\r\ninterface ComputedRelationship {\r\n    displayRoles: string[];\r\n    strength: RelationshipStrength;\r\n    maxStrength: RelationshipStrength;\r\n    hasTeamInteraction: boolean;\r\n    strengthValue: number;\r\n    firstRole: string;\r\n    displayLevel: JobLevelDisplay;\r\n    risks: {\r\n        lastCommunication: Date;\r\n        lastCommDisplay: string;\r\n        slipping: boolean;\r\n        weakened: boolean;\r\n        singleThreaded: boolean;\r\n        notStrong: boolean;\r\n        riskCount: boolean;\r\n        exec: boolean;\r\n        strong: boolean;\r\n        active: boolean;\r\n    };\r\n}\r\nexport type OrgChartPerson = Person & ComputedRelationship;\r\nexport interface ByRole {\r\n    [k: string]: OrgChartPerson[];\r\n}\r\ninterface CompanyMembers {\r\n    apiState: keyof ApiStates;\r\n    allPeople: Person[];\r\n};\r\nexport type ByLevelByRole = [JobLevelDisplay, ByRole][];\r\n\r\nconst anyPerson = (_: Person) => true;\r\n\r\nconst initialFilters = {\r\n    all: false,\r\n    hasTeamStrength: false,\r\n    hasStrongRelationship: false,\r\n    hasWeakRelationship: false,\r\n    weakened: false,\r\n    newExecs: false,\r\n    slipping: false,\r\n    missingRoles: false,\r\n}\r\nexport const orgChartFilters = {\r\n    all: \"all\",\r\n    hasTeamStrength: \"hasTeamStrength\",\r\n    hasStrongRelationship: \"hasStrongRelationship\",\r\n};\r\nexport const orgChartPrefix = `#OrgChart`;\r\nexport const useCompanyOrgData = (\r\n    companyUri = \"\",\r\n    teamUri = \"\",\r\n    initialFilter = orgChartFilters.hasTeamStrength,\r\n    filterFn = anyPerson,\r\n    cache?: any,\r\n    topRoleToShow = 10,\r\n    maxRecords = 999,\r\n) => {\r\n    const [companyMembers, setCompanyMembers] = useState({ apiState: apiStates.fetching });\r\n    const [flaggedUris, setFlaggedUris] = useState({} as unknown as Record<string,FlaggedDataReason>);\r\n    const [filters, setFilters] = useState({ ...initialFilters, [initialFilter]: true });\r\n    const setFilterByType = useCallback((filterType: string) => {\r\n        setFilters({\r\n            ...initialFilters,\r\n            [filterType]: true,\r\n        })\r\n    }, [setFilters]);\r\n    const interactionsToUse = useMemo(() => teamUri ? \"teamInteractions\" : \"interactions\", [teamUri]);\r\n\r\n    useEffect(() => {\r\n        let cancelled = false;\r\n\r\n        getCurrentFlaggedData()\r\n            .map((response: IUserFlaggedData[] = []) => response\r\n                .filter(d => !!(d.person1 && d.person1.uri) && getPrefixAndReason(d.note).prefix === orgChartPrefix)\r\n                .map(d => ({ uri: (d.person1 && d.person1.uri) || \"\", note: d.note }))\r\n                .reduce((acc, { uri, note }) => { acc[uri] = getPrefixAndReason(note).reason; return acc; }, {} as unknown as Record<string, FlaggedDataReason>)\r\n            )\r\n            .fork(\r\n                err => {\r\n                    if (cancelled) return;\r\n                    logger.error(\"Error getting flagged data\", err);\r\n                },\r\n                flaggedUris => {\r\n                    if (cancelled) return;\r\n                    setFlaggedUris(flaggedUris);\r\n                }\r\n            );\r\n\r\n        return () => {\r\n            cancelled = true;\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (!companyUri || !teamUri) return;\r\n        let cancelled = false;\r\n\r\n        setCompanyMembers(prevCompanyMembers => ({ ...prevCompanyMembers, apiState: apiStates.fetching }));\r\n\r\n\r\n        Task.of({\r\n            q: `company.uri:\"${companyUri}\"`,\r\n            fields: `uri,name,title,imageUrl,level,roles,${interactionsToUse}`,\r\n            team: teamUri,\r\n        })\r\n            .chain(queryOptions => \r\n                getRolesForTeam(teamUri, topRoleToShow, undefined, { cache })\r\n                    // generate the query that will be used to get people later based on the roles found\r\n                    .map((roles = []) => ({\r\n                        rolesOrdering: valuesToOrdering(roles),\r\n                        query: {\r\n                            ...queryOptions,\r\n                            // people in the company, either in a role that the team sells to or someone they've previously communicated with\r\n                            q: `${queryOptions.q} AND ((has:level AND NOT(level:unknown) AND NOT(level:\"\") AND has:roles AND (${roles\r\n                                .map(r => `roles.name:\"${r}\"`)\r\n                                .join(\" OR \")})) OR has:${interactionsToUse}.lastInbound OR has:${interactionsToUse}.lastOutbound OR has:${interactionsToUse}.lastMeeting)`,\r\n                        }\r\n                    })))\r\n            \r\n\r\n            // get a count of the people that will be returned by the query\r\n            .chain(({ rolesOrdering, query }) =>\r\n                getEntity(NudgeUris.v2.people().count, query, { cache })\r\n                    .map((results: { count: number }[]) => optHead(results)\r\n                        .chain(optProp(\"count\"))\r\n                        .getOrElse(() => 0))\r\n                    .map(count => ({\r\n                        compareByRoleGroup: byRoleGroupName(rolesOrdering),\r\n                        count,\r\n                        query,\r\n                    })))\r\n\r\n            // use the count to limit the people query\r\n            .chain(({ compareByRoleGroup, count, query }) =>\r\n                getEntity(\r\n                    NudgeUris.v2.people()._uri,\r\n                    { ...query, limit: Math.min(count as number, maxRecords) },\r\n                    { cache },\r\n                )\r\n                    // filter any people that were flagged with incorrectCompany\r\n                    .map((people: Person[] = []) => people.filter(p => flaggedUris[p.uri] !== flaggedDataReason.incorrectCompany))\r\n                    // calculate some values that we will need for each person, and make sure they have defaults\r\n                    .map((people: Person[]) =>\r\n                        people\r\n                            // teamInteractions might be empty\r\n                            .map(\r\n                                p =>\r\n                                    (({\r\n                                        ...p,\r\n                                        teamInteractions: teamUri ? p.teamInteractions : p.interactions,\r\n                                        ...tryCatch(() => teamUri ? p.teamInteractions : p.interactions)\r\n                                            .map(\r\n                                                ({\r\n                                                    strength = RelationshipStrength.none,\r\n                                                    maxStrength = RelationshipStrength.none,\r\n                                                    lastInbound = \"\",\r\n                                                    lastOutbound = \"\",\r\n                                                    lastMeeting = \"\",\r\n                                                }) => ({\r\n                                                    strength,\r\n                                                    maxStrength,\r\n                                                    strengthValue: strengthToOrdering(strength),\r\n                                                    hasTeamInteraction:\r\n                                                        !!lastInbound || !!lastOutbound || !!lastMeeting,\r\n                                                }),\r\n                                            )\r\n                                            .getOrElse(() => ({\r\n                                                strength: RelationshipStrength.none,\r\n                                                maxStrength: RelationshipStrength.none,\r\n                                                strengthValue: 0,\r\n                                                hasTeamInteraction: false,\r\n                                            })),\r\n                                        ...{\r\n                                            firstRole: tryCatch(() => p.roles)\r\n                                                .map((roles: IJobRole[]) =>\r\n                                                    roles.map(roleToGroupName).sort(compareByRoleGroup.run),\r\n                                                )\r\n                                                .chain((roles: string[]) => optHead(roles))\r\n                                                .getOrElse(() => \"Unknown\"),\r\n                                            displayLevel: jobLevelTypeToDisplay(p.level),\r\n                                            displayRoles: tryCatch(() => p.roles)\r\n                                                .map(roles => rolesToRoleGroups(roles).sort(compareByRoleGroup.run))\r\n                                                .getOrElse(() => []),\r\n                                            risks: relationshipRisks(p),\r\n                                        },\r\n                                    } as unknown) as OrgChartPerson),\r\n                            )\r\n                            // for each level/role, we want to highlight people where the team has had some\r\n                            //   previous relationship, and also show highest current strength first\r\n                            .sort(byLevelDisplay\r\n                                .contramap((p: OrgChartPerson) => p.displayLevel)\r\n                                .concat(Compare.of(numCompareByDir(false))\r\n                                    .contramap((p: OrgChartPerson) => p.strengthValue)\r\n                                    .concat(Compare.of(truthyCompareByDir(false))\r\n                                        .contramap((p: OrgChartPerson) => p.hasTeamInteraction)))\r\n                                .run\r\n                            ),\r\n                    )\r\n                    .map(people => ({\r\n                        people,\r\n                        duplicates: compose(\r\n                            (entries: [string, Person[]][]) => NudgeIterable.fromArray(entries)\r\n                                .filter(([_, dups]) => dups.length > 1)\r\n                                .flatMap(([_, dups]) => NudgeIterable.fromArray(dups.slice(1)))\r\n                                .toArray(),\r\n                            entries,\r\n                            groupBy((p: Person & { firstRole: string }) => `${p.firstRole}_${p.level}_${p.name}`)\r\n                        )(people),\r\n                    }))\r\n                    .map(({ people = [], duplicates }) => option.of(duplicates)\r\n                        .map(duplicates => duplicates.map(propOr(\"uri\", \"\")))\r\n                        .map(dupUris => people.filter(({ uri }) => !dupUris.includes(uri)))\r\n                        .getOrElse(() => people))\r\n                    .map(people => ({\r\n                        filteredPeople: people.filter(allPass([\r\n                            filterFn,\r\n                            filters.hasTeamStrength ? hasTeamStrength.run : anyPerson,\r\n                            filters.hasStrongRelationship ? hasStrongTeamRelationship.run : anyPerson,\r\n                            filters.hasWeakRelationship ? hasWeakTeamRelationship.run : anyPerson,\r\n                            filters.weakened ? isWeakenedTeamRelationship.run : anyPerson,\r\n                            filters.slipping ? isSlippingTeamRelationship().run : anyPerson,\r\n                            filters.newExecs ? newExec() : anyPerson,\r\n                        ])),\r\n                        filterCounts: people.reduce((filterCounts, p) => {\r\n                            if (hasTeamStrength.run(p)) filterCounts.hasTeamStrength++;\r\n                            if (hasStrongTeamRelationship.run(p)) filterCounts.hasStrongRelationship++;\r\n                            if (hasWeakTeamRelationship.run(p)) filterCounts.hasWeakRelationship++;\r\n                            if (isWeakenedTeamRelationship.run(p)) filterCounts.weakened++;\r\n                            if (isSlippingTeamRelationship().run(p)) filterCounts.slipping++;\r\n                            if (newExec()(p)) filterCounts.newExecs++;\r\n                            return filterCounts;\r\n                        }, {\r\n                            all: people.length,\r\n                            hasTeamStrength: 0,\r\n                            hasStrongRelationship: 0,\r\n                            hasWeakRelationship: 0,\r\n                            weakened: 0,\r\n                            slipping: 0,\r\n                            newExecs: 0,\r\n                        }),\r\n                    }))\r\n                    .map(({ filteredPeople, filterCounts }) => ({\r\n                        // group people by their display level\r\n                        byLevel: groupBy((p: Person) => jobLevelTypeToDisplay(p.level))(filteredPeople),\r\n                        // also get all the unique first roles for this list of people, order it by most team relationships (previously fetched)\r\n                        allRoles: uniq(filteredPeople.map((p: OrgChartPerson) => p.firstRole)).sort(compareByRoleGroup.run),\r\n                        filterCounts,\r\n                        flaggedUris,\r\n                    })),\r\n            )\r\n\r\n            // for each level, group people by their first role\r\n            .map(({ byLevel, allRoles, filterCounts, flaggedUris }) => ({\r\n                people: mapEntries((level, people): [JobLevelDisplay, ByRole] => [\r\n                    level as JobLevelDisplay,\r\n                    groupBy<OrgChartPerson>(p => p.firstRole)(people as OrgChartPerson[]),\r\n                ])(byLevel as Record<string, OrgChartPerson[]>),\r\n                allRoles: allRoles.sort(sortValueLast(\"Unknown\", true)),\r\n                filterCounts,\r\n                flaggedUris,\r\n            }))\r\n\r\n            // assemble the final results\r\n            .map(({ people, allRoles, filterCounts, flaggedUris }) => ({\r\n                count: (people as [JobLevelDisplay, ByRole][]).reduce(\r\n                    (acc, [_, rolesSummary]) =>\r\n                        acc + entries(rolesSummary)\r\n                            .reduce((acc, [_, people]) => acc + people.length, 0),\r\n                    0,\r\n                ),\r\n                people,\r\n                allRoles,\r\n                allRolesOrdering: valuesToOrdering(allRoles),\r\n                filterCounts,\r\n                flaggedUris,\r\n            }))\r\n\r\n            .fork(\r\n                err => {\r\n                    logger.error(\"Error getting company members for org chart\", err);\r\n                    if (cancelled) return;\r\n                    setCompanyMembers({ apiState: apiStates.error });\r\n                },\r\n                (results) => {\r\n                    if (cancelled) return;\r\n                    setCompanyMembers({ apiState: apiStates.fetched, ...results });\r\n                },\r\n            );\r\n\r\n        return () => {\r\n            cancelled = true;\r\n        };\r\n    }, [companyUri, teamUri, filterFn, filters, cache, topRoleToShow, maxRecords, interactionsToUse, flaggedUris]);\r\n\r\n    return [{ companyMembers, filters, flaggedUris }, { setCompanyMembers, setFilterByType, setFlaggedUris }];\r\n};"]}