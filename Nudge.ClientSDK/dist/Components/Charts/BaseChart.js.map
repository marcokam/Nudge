{"version":3,"file":"BaseChart.js","sourceRoot":"","sources":["../../../Components/Charts/BaseChart.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAK,EAAE,EAAE,MAAM,EAAE,SAAS,EAAE,MAAM,OAAO,CAAC,CAAG,wDAAwD;AAC5G,OAAO,OAAO,MAAM,UAAU,CAAC,CAAqB,wCAAwC;AAM5F,MAAM,CAAC,OAAO,UAAU,SAAS,CAAC,EAA0D;IAAxD,IAAA,8BAAY,EAAE,oCAAQ;IACtD,IAAM,YAAY,GAAG,MAAM,CAAC,IAAoC,CAAC,CAAC;IAElE,SAAS,CAAC;QACN,IAAI,OAAO,CAAC,YAAY,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;IACpD,CAAC,EAAE,CAAC,YAAY,CAAC,CAAC,CAAC;IAEnB,OAAO,CACH,yCAAQ,GAAG,EAAE,YAAY,IAAM,KAAK,EAAI,CAC3C,CAAC;AACN,CAAC","sourcesContent":["import React, { useRef, useEffect } from \"react\";   // eslint-disable-line @typescript-eslint/no-unused-vars\r\nimport ChartJS from \"chart.js\";                     // eslint-disable-line import/extensions\r\n\r\ninterface ChartOptions {\r\n    [prop: string]: any; \r\n}\r\n\r\nexport default function BaseChart({ chartOptions, ...attrs }: { chartOptions: ChartOptions }) {\r\n    const containerRef = useRef(null as unknown as HTMLCanvasElement);\r\n\r\n    useEffect(() => {\r\n        new ChartJS(containerRef.current, chartOptions);\r\n    }, [chartOptions]);\r\n\r\n    return (\r\n        <canvas ref={containerRef} {...attrs} />\r\n    );\r\n}\r\n"]}