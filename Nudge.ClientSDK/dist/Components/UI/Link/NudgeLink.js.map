{"version":3,"file":"NudgeLink.js","sourceRoot":"","sources":["../../../../Components/UI/Link/NudgeLink.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAK,EAAE,EAAE,QAAQ,EAAE,SAAS,EAAE,MAAM,OAAO,CAAC;AACnD,OAAO,EAAE,IAAI,EAAE,MAAM,kBAAkB,CAAC;AAExC,OAAO,QAAQ,MAAM,iBAAiB,CAAC;AACvC,OAAO,EAAE,IAAI,EAAE,MAAM,0BAA0B,CAAC;AAChD,OAAO,KAAK,MAAM,MAAM,yBAAyB,CAAC;AAClD,OAAO,EAAE,YAAY,EAAE,MAAM,mCAAmC,CAAC;AAEjE,IAAM,SAAS,GAAiC,UAAC,EAA0B;IAAxB,IAAA,sBAAQ,EAAE,UAAE,EAAE,sCAAQ;IAC/D,IAAA,oDAAsD,EAArD,YAAI,EAAE,eAA+C,CAAC;IAE7D,SAAS,CAAC;QACN,IAAI,SAAS,GAAG,KAAK,CAAC;QACtB,IAAI,CAAC,EAAE,CAAC,UAAC,CAAS,IAAwC,OAAA,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,EAAE,CAAC,CAAC,EAAN,CAAM,EAAX,CAAW,CAAC;aACjE,EAAE,CAAC,QAAQ,CAAC,OAAO,CAAC;aACpB,EAAE,CAAC,QAAQ,CAAC,aAAa,CAAC;aAC1B,IAAI,CACD,UAAA,GAAG;YACC,IAAI,SAAS;gBAAE,OAAO;YACtB,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACtB,CAAC,EACD,UAAC,EAAgB;gBAAhB,kBAAgB,EAAf,eAAO,EAAE,aAAK;YACZ,IAAI,SAAS;gBAAE,OAAO;YACtB,OAAO,CAAC;gBACJ,OAAO,SAAA;gBACP,KAAK,OAAA;aACR,CAAC,CAAC;QACP,CAAC,CACJ,CAAC;QACN,OAAO;YACH,SAAS,GAAG,IAAI,CAAC;QACrB,CAAC,CAAA;IACL,CAAC,EAAE,EAAE,CAAC,CAAC;IAEC,IAAA,sBAAO,EAAE,kBAAK,CAAU;IAChC,IAAM,cAAc,GAAG,KAAK,KAAK,OAAO,CAAC;IAEzC,OAAO,KAAK,CAAC,CAAC,CAAC,CACX,cAAc,CAAC,CAAC,CAAC,CACb,oBAAC,YAAY,aAAC,IAAI,EAAK,KAAK,kBAAa,EAAI,IAAM,KAAK,GACnD,QAAQ,CACE,CAClB,CAAC,CAAC,CAAC,CACA,oBAAC,IAAI,aAAC,EAAE,EAAE,EAAE,IAAM,KAAK,GAClB,QAAQ,CACN,CACV,CACJ,CAAC,CAAC,CAAC,IAAI,CAAC;AACb,CAAC,CAAC;AAEF,eAAe,SAAS,CAAC","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport registry from \"~/Util/registry\";\r\nimport { Task } from \"~/Util/fp/Instances/Task\";\r\nimport * as logger from \"~/Logging/DefaultLogger\";\r\nimport { ExternalLink } from \"~/Components/UI/Link/ExternalLink\";\r\n\r\nconst NudgeLink: React.FunctionComponent<any> = ({ children, to, ...props }) => {\r\n    const [urls, setUrls] = useState({ baseUrl: \"\", waUrl: \"\" });\r\n\r\n    useEffect(() => {\r\n        let cancelled = false;\r\n        Task.of((b: string): ((w: string) => [string, string]) => w => [b, w])\r\n            .ap(registry.baseUrl)\r\n            .ap(registry.webappBaseUrl)\r\n            .fork(\r\n                err => {\r\n                    if (cancelled) return;\r\n                    logger.error(err);\r\n                },\r\n                ([baseUrl, waUrl]) => {\r\n                    if (cancelled) return;\r\n                    setUrls({\r\n                        baseUrl,\r\n                        waUrl,\r\n                    });\r\n                },\r\n            );\r\n        return () => {\r\n            cancelled = true;\r\n        }\r\n    }, []);\r\n\r\n    const { baseUrl, waUrl } = urls;\r\n    const isIntegrations = waUrl !== baseUrl;\r\n\r\n    return waUrl ? (\r\n        isIntegrations ? (\r\n            <ExternalLink href={`${waUrl}/mobileui#${to}`} {...props}>\r\n                {children}\r\n            </ExternalLink>\r\n        ) : (\r\n            <Link to={to} {...props}>\r\n                {children}\r\n            </Link>\r\n        )\r\n    ) : null;\r\n};\r\n\r\nexport default NudgeLink;\r\n"]}