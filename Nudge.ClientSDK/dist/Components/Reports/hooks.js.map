{"version":3,"file":"hooks.js","sourceRoot":"","sources":["../../../Components/Reports/hooks.ts"],"names":[],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { format } from \"date-fns\";\r\n\r\nimport { WeeklyActivity, Leaderboard, NetworkView, ContactActivity } from \"~/Data/Report/ReportInterfaces\";\r\n\r\nimport { apiStates, getEntity } from \"~/Util/apiUtils\";\r\nimport { NudgeUris } from \"~/Uris/NudgeUris\";\r\nimport * as logger from \"~/Logging/DefaultLogger\";\r\n\r\nexport function useWeeklyActivityReport(userUri: string) {\r\n    const [weeklyActivityReport, setWeeklyActivityReport] = useState<Partial<WeeklyActivity> & { apiState: string }>({ apiState: apiStates.fetching });\r\n    useEffect(() => {\r\n        if (!userUri) return;\r\n        let cancelled = false;\r\n        if (!weeklyActivityReport.result) {\r\n            getEntity(NudgeUris.api.aggregateAnalysis.RunWeeklyActivity(userUri)._instanceUri)\r\n                .fork(err => {\r\n                    if (cancelled) return;\r\n                    setWeeklyActivityReport({\r\n                        apiState: apiStates.error,\r\n                    });\r\n                    logger.error(\"Error getting weekly activity report\", err);\r\n                },\r\n                (response = {}) => {\r\n                    if (cancelled) return;\r\n                    setWeeklyActivityReport({\r\n                        apiState: apiStates.fetched,\r\n                        ...response,\r\n                    });\r\n                });\r\n        }\r\n        return () => {\r\n            cancelled = true;\r\n        }\r\n    }, [setWeeklyActivityReport, userUri, weeklyActivityReport.result]);\r\n\r\n    return [weeklyActivityReport];\r\n}\r\n\r\nexport function useLeaderboardReport(userUri: string) {\r\n    const [leaderboardReport, setLeaderboardReport] = useState<Partial<Leaderboard> & { apiState: string }>({ apiState: apiStates.fetching });\r\n    useEffect(() => {\r\n        if (!userUri) return;\r\n        let cancelled = false;\r\n        if (!leaderboardReport.results) {\r\n            getEntity(NudgeUris.api.aggregateAnalysis.RunUserLeaderboard(userUri)._instanceUri)\r\n                .fork(err => {\r\n                    if (cancelled) return;\r\n                    setLeaderboardReport({\r\n                        apiState: apiStates.error,\r\n                    });\r\n                    logger.error(\"Error getting leaderboard report\", err);\r\n                },\r\n                (response = {}) => {\r\n                    if (cancelled) return;\r\n                    setLeaderboardReport({\r\n                        apiState: apiStates.fetched,\r\n                        ...response,\r\n                    });\r\n                });\r\n        }\r\n        return () => {\r\n            (cancelled = true);\r\n        }\r\n    }, [leaderboardReport.results, setLeaderboardReport, userUri]);\r\n\r\n    return [leaderboardReport];\r\n}\r\n\r\nexport function useNetworkViewReport(userUri: string) {\r\n    const [networkViewReport, setNetworkViewReport] = useState<Partial<NetworkView> & { apiState: string }>({ apiState: apiStates.fetching });\r\n    useEffect(() => {\r\n        if (!userUri) return;\r\n        let cancelled = false;\r\n        getEntity(NudgeUris.api.aggregateAnalysis.RunNetworkView(userUri)._instanceUri)\r\n            .fork(err => {\r\n                if (cancelled) return;\r\n                setNetworkViewReport({\r\n                    apiState: apiStates.error,\r\n                });\r\n                logger.error(\"Error getting network view report\", err);\r\n            },\r\n            (response = {}) => {\r\n                if (cancelled) return;\r\n                setNetworkViewReport({\r\n                    apiState: apiStates.fetched,\r\n                    ...response,\r\n                });\r\n            });\r\n        return () => {\r\n            (cancelled = true);\r\n        };\r\n    }, [setNetworkViewReport, userUri]);\r\n\r\n    return [networkViewReport];\r\n}\r\n\r\nexport function useContactActivity(weeks = 0) {\r\n    const [contactActivity, setContactActivity] = useState<{ apiState: string; newContacts: ContactActivity[]; allContacts: ContactActivity[]}>({\r\n        apiState: apiStates.fetching,\r\n        newContacts: [],\r\n        allContacts: [],\r\n    });\r\n    useEffect(() => {\r\n        let cancelled = false;\r\n        getEntity(NudgeUris.v2.users().current().activities(weeks))\r\n            .fork(err => {\r\n                if (cancelled) return;\r\n                setContactActivity({ apiState: apiStates.error, newContacts: [], allContacts: [] });\r\n                logger.error(\"Error getting contact capture activity\", err);\r\n            },\r\n            (response: ContactActivity[] = []) => {\r\n                if (cancelled) return;\r\n                setContactActivity({\r\n                    apiState: apiStates.fetched,\r\n                    newContacts: response.filter(({ identities }) => identities.some(i => i.isNew)),\r\n                    allContacts: response,\r\n                });\r\n            });\r\n        return () => {\r\n            cancelled = true;\r\n        };\r\n    }, [weeks]);\r\n    const generateCSVContent = () => {\r\n        const csvHeader = \"data:application/csv;charset=utf-8,\";\r\n        const headers = [\r\n            \"DisplayName\",\r\n            \"JobTitle\",\r\n            \"MainCompanyName\",\r\n            \"City\",\r\n            \"State\",\r\n            \"Country\",\r\n            \"EmailAddress1\",\r\n            \"EmailAddress2\",\r\n            \"EmailAddress3\",\r\n            \"Twitter\",\r\n            \"LinkedIn\",\r\n            \"InboundEmails\",\r\n            \"LastInboundEmailDate\",\r\n            \"OutboundEmails\",\r\n            \"LastOutboundEmailDate\",\r\n            \"Meetings\",\r\n            \"LastMeetingDate\",\r\n        ]\r\n            .map(c => `\"${c}\"`)\r\n            .join(\",\");\r\n\r\n        return [csvHeader.concat(headers)]\r\n            .concat(\r\n                (contactActivity.allContacts || [])\r\n                    .map(({ identities = [], ...restContact }) => ({\r\n                        ...restContact,\r\n                        emails: identities.filter(i => i.type === \"email\").map(i => i.identity),\r\n                        twitters: identities.filter(i => i.type === \"twitter\").map(i => i.identity),\r\n                        linkedIns: identities.filter(i => i.type === \"linkedIn\").map(i => i.identity),\r\n                    }))\r\n                    .map(\r\n                        ({\r\n                            name = \"\",\r\n                            title = \"\",\r\n                            company,\r\n                            city = \"\",\r\n                            state = \"\",\r\n                            country = \"\",\r\n                            emails: [emailAddress1 = \"\", emailAddress2 = \"\", emailAddress3 = \"\"] = [],\r\n                            twitters: [twitter = \"\"] = [],\r\n                            linkedIns: [linkedIn = \"\"] = [],\r\n                            inboundEmail = 0,\r\n                            lastInboundEmailDate = \"\",\r\n                            outboundEmail = 0,\r\n                            lastOutboundEmailDate = \"\",\r\n                            meetings = 0,\r\n                            lastMeetingDate = \"\",\r\n                        }) =>\r\n                            [\r\n                                name,\r\n                                title,\r\n                                (company && company.name) || \"\",\r\n                                city,\r\n                                state,\r\n                                country,\r\n                                emailAddress1,\r\n                                emailAddress2,\r\n                                emailAddress3,\r\n                                twitter,\r\n                                linkedIn,\r\n                                inboundEmail,\r\n                                lastInboundEmailDate,\r\n                                outboundEmail,\r\n                                lastOutboundEmailDate,\r\n                                meetings,\r\n                                lastMeetingDate,\r\n                            ].map(c => `\"${c}\"`),\r\n                    )\r\n                    .map(r => r.join(\",\")),\r\n            ).join(\"\\r\\n\");\r\n    };\r\n    const exportContactActivity = () => {\r\n        const csvContent = generateCSVContent();\r\n        const filename = `contact_activity_${format(new Date(), \"YYYY-MM-DD\")}.csv`;\r\n        const a = document.createElement(\"a\");\r\n\r\n        a.setAttribute(\"download\", filename);\r\n        a.setAttribute(\"href\", csvContent);\r\n        document.body.appendChild(a);\r\n        a.click();\r\n        document.body.removeChild(a);\r\n    };\r\n\r\n    return [contactActivity, { generateCSVContent, exportContactActivity }];\r\n}\r\n\r\nexport function useRelationshipViewReport(userUri: string) {\r\n    const [relationshipViewReport, setRelationshipViewReport] = useState<Partial<NetworkView> & { apiState: string }>({ apiState: apiStates.fetching });\r\n    useEffect(() => {\r\n        if (!userUri) return;\r\n        let cancelled = false;\r\n        if (!relationshipViewReport.result) {\r\n            getEntity(NudgeUris.api.aggregateAnalysis.RunRelationshipView(userUri)._instanceUri)\r\n                .fork(err => {\r\n                    if (cancelled) return;\r\n                    setRelationshipViewReport({\r\n                        apiState: apiStates.error,\r\n                    });\r\n                    logger.error(\"Error getting relationship view report\", err);\r\n                },\r\n                (response = {}) => {\r\n                    if (cancelled) return;\r\n                    setRelationshipViewReport({\r\n                        apiState: apiStates.fetched,\r\n                        ...response,\r\n                    });\r\n                });\r\n        }\r\n        return () => {\r\n            cancelled = true;\r\n        };\r\n    }, [relationshipViewReport.result, setRelationshipViewReport, userUri]);\r\n\r\n    return [relationshipViewReport];\r\n}\r\n"]}