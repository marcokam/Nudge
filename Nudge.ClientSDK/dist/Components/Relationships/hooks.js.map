{"version":3,"file":"hooks.js","sourceRoot":"","sources":["../../../Components/Relationships/hooks.ts"],"names":[],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nimport * as logger from \"~/Logging/DefaultLogger\";\r\nimport { GetEntityOptions } from \"~/Data/DataInterfaces\";\r\nimport { Person, Interactions } from \"~/Data/NudgeInterfaces\";\r\nimport { apiStates, getAllEntities } from \"~/Util/apiUtils\";\r\nimport { tryCatch, option } from \"~/Util/fp/Instances/Option\";\r\nimport { values } from \"~/Util/fp/object\";\r\nimport { optHead, groupBy } from \"~/Util/fp/array\";\r\nimport { JobLevel } from \"~/Data/Person/Level/jobLevelData\";\r\nimport { Role } from \"~/Data/Person/Role/jobRoleData\";\r\nimport { strengthOrderingToText, RelationshipStrength, strengthToOrdering } from \"~/Data/Person/Relationship/relationshipData\";\r\nimport { hasStrengthTeamMember } from \"~/Data/Person/Recommender/personRecommenderData\";\r\nimport { NudgeUris } from \"~/Uris/NudgeUris\";\r\n\r\n\r\ninterface Collaborator {\r\n    uri: string;\r\n    user?: { uri: string };\r\n}\r\ninterface UserConnectionPerson {\r\n    uri: string;\r\n    name: string;\r\n    title: string;\r\n    imageUrl: string;\r\n    level: JobLevel;\r\n    roles: Role[];\r\n    company?: Company;\r\n    teamInteractions?: Interactions;\r\n}\r\ninterface Company {\r\n    uri: string;\r\n    name: string;\r\n    imageUrl: string;\r\n}\r\ninterface User {\r\n    uri: string;\r\n    name: string;\r\n    imageUrl: string;\r\n}\r\ninterface NetworkHealthScore {\r\n    active: number;\r\n    strong: number;\r\n    date: string;\r\n    status: string;\r\n}\r\ninterface UserConnection {\r\n    uri?: string;\r\n    person?: UserConnectionPerson;\r\n    company?: Company;\r\n    networkHealthScore?: NetworkHealthScore;\r\n    users: User[];\r\n    strength: number;\r\n    maxStrength: number;\r\n}\r\ninterface Link {\r\n    source: string;\r\n    target: string;\r\n    value: number;\r\n    strong?: number;\r\n    active?: number;\r\n}\r\ninterface Data {\r\n    users: { [uri: string]: User };\r\n    people: { [uri: string]: UserConnectionPerson };\r\n    companies: { [uri: string]: Company };\r\n    links: Link[];\r\n    levels: Map<JobLevel, Set<string>>;\r\n    roles: Map<string, Set<string>>;\r\n};\r\ninterface PreformattedData {\r\n    users: { [uri: string]: User };\r\n    people: { [uri: string]: UserConnectionPerson };\r\n    companies: { [uri: string]: Company };\r\n    links: Link[];\r\n    levels: [JobLevel, Set<string>][];\r\n    roles: [string, Set<string>][];\r\n    userValues: User[];\r\n    personValues: UserConnectionPerson[];\r\n    companyValues: Company[];\r\n};\r\n\r\nconst mergeType = (type: string) => (o: {}) => ({ ...o, type });\r\nconst incrementObjKeyProp = (obj: { [key: string]: any }, key: string, prop: string, incrementValue = 1) => {\r\n    if (!obj[key]) {\r\n        obj[key] = { [prop]: incrementValue, total: incrementValue };\r\n    } else {\r\n        obj[key].total += incrementValue;\r\n        obj[key][prop] = (obj[key][prop] || 0) + incrementValue;\r\n    }\r\n};\r\nexport const summarizeData = (data: Partial<PreformattedData>) => {\r\n    const { userValues = [], personValues = [], companyValues = [], links = [] } = data;\r\n    return {\r\n        ...data,\r\n        nodes: [\r\n            ...userValues.map(mergeType(\"user\")),\r\n            ...personValues.map(mergeType(\"person\")),\r\n            ...companyValues.map(mergeType(\"company\")),\r\n        ],\r\n        summaries: links\r\n            .map(link => ({\r\n                ...link,\r\n                strength: strengthOrderingToText(link.value),\r\n                activeConnections: link.active || 0,\r\n                strongConnections: link.strong || 0,\r\n            }))\r\n            .reduce((summary, currentSummary) => {\r\n                const { source = \"\", target = \"\", strength = \"None\", activeConnections = 0, strongConnections = 0 } = currentSummary || {};\r\n                if (!activeConnections) {\r\n                    incrementObjKeyProp(summary, source, strength);\r\n                    incrementObjKeyProp(summary, target, strength);\r\n                    incrementObjKeyProp(summary, \"allRelationships\", strength);\r\n                } else {\r\n                    incrementObjKeyProp(summary, source, \"Active Connections\", activeConnections);\r\n                    incrementObjKeyProp(summary, source, \"Strong Connections\", strongConnections);\r\n                    incrementObjKeyProp(summary, target, \"Active Connections\", activeConnections);\r\n                    incrementObjKeyProp(summary, target, \"Strong Connections\", strongConnections);\r\n                    incrementObjKeyProp(summary, \"allRelationships\", \"Active Connections\", activeConnections);\r\n                    incrementObjKeyProp(summary, \"allRelationships\", \"Strong Connections\", strongConnections);\r\n                }\r\n                return summary;\r\n            }, {}),\r\n    };\r\n};\r\n\r\nexport const useRelationshipsData = (\r\n    type: string,\r\n    companyUri?: string,\r\n    listUri?: string,\r\n    teamUri?: string,\r\n    getEntityOptions?: GetEntityOptions\r\n) => {\r\n    const [relationshipsData, setRelationshipsData] = useState({ apiState: apiStates.fetching, relationships: {} });\r\n\r\n    useEffect(() => {\r\n        let cancelled = false;\r\n\r\n        if (!(companyUri || listUri) || !teamUri) return;\r\n\r\n        const initialData: Data = {\r\n            users: {},\r\n            people: {},\r\n            companies: {},\r\n            links: [],\r\n            levels: new Map(),\r\n            roles: new Map(),\r\n        };\r\n\r\n        setRelationshipsData(prev => ({ ...prev, apiState: apiStates.fetching }));\r\n\r\n        const companiesTask = getAllEntities(NudgeUris.v2.companies()._uri, {\r\n            fields: `uri,name,imageUrl,teamInteractions(activeRelationships,strongRelationships,strengthTeamMember(uri,name,title,imageUrl))`,\r\n            q: `${companyUri ? `company.uri:\"${companyUri}\"` : `list.uri:\"${listUri}\"`} AND teamInteractions.strength:[veryWeak TO veryStrong]`,\r\n            team: teamUri,\r\n            limit: 99,\r\n            aggregation: \"none\",\r\n            hint: \"analytics\",\r\n        }, getEntityOptions);\r\n        const peopleTask = getAllEntities(NudgeUris.v2.people()._uri, {\r\n            fields: `uri,name,title,imageUrl,level,roles,teamInteractions(strength,maxStrength,strengthTeamMember)`,\r\n            q: `${companyUri ? `company.uri:\"${companyUri}\"` : `list.uri:\"${listUri}\"`} AND teamInteractions.strength:[veryWeak TO veryStrong]`,\r\n            team: teamUri,\r\n            limit: 99,\r\n            aggregation: \"none\",\r\n            hint: \"analytics\",\r\n        }, getEntityOptions);\r\n        const isContacts = !!companyUri || type === \"person\"\r\n        const dataTask = isContacts ? peopleTask : companiesTask;\r\n\r\n        dataTask\r\n            .map((entities: (Person & Company)[]) => entities.filter(hasStrengthTeamMember.run))\r\n            .map(groupBy(\r\n                (e: (Person & Company)) => option.of(e.teamInteractions || {})\r\n                    .map(interactions => interactions.strengthTeamMember || {})\r\n                    .map(teamMember => teamMember.uri || \"\")\r\n                    .getOrElse(() => \"\")\r\n            ))\r\n            .map(groupedEntities => values(groupedEntities)\r\n                .map(entities => entities\r\n                    .map(e => tryCatch(() => e.teamInteractions)\r\n                        .map(({ activeRelationships = 0, strongRelationships = 0, strength = RelationshipStrength.none, maxStrength = RelationshipStrength.none, strengthTeamMember = {} }) =>\r\n                            (e.uri === strengthTeamMember.uri || (!isContacts && !activeRelationships))\r\n                                ? undefined\r\n                                : ({\r\n                                    uri: e.uri,\r\n                                    [isContacts ? \"person\" : \"company\"]: e,\r\n                                    networkHealthScore: {\r\n                                        active: activeRelationships,\r\n                                        strong: strongRelationships,\r\n                                    },\r\n                                    strength: strengthToOrdering(strength),\r\n                                    maxStrength: strengthToOrdering(maxStrength),\r\n                                    users: [{...strengthTeamMember, jobTitle: strengthTeamMember.title, uri: `/team${strengthTeamMember.uri}` }],\r\n                                }))\r\n                        .getOrElse(() => undefined))\r\n                    .filter(Boolean)\r\n                    .filter(uc => uc && (isContacts ? uc.strength > 0 : uc.networkHealthScore.active > 0)))\r\n                .filter(ucs => ucs && ucs.length > 0) as unknown as UserConnection[][])\r\n            .map((userConnections: UserConnection[][] = []) => {\r\n                return userConnections.reduce((result, ucs = []) => {\r\n                    const firstUser = optHead(ucs)\r\n                        .chain(firstUc => tryCatch(() => firstUc.users))\r\n                        .chain(optHead)\r\n                        .getOrElse(() => undefined);\r\n                    const users = result.users;\r\n                    if (firstUser && firstUser.uri) {\r\n                        users[firstUser.uri] = firstUser;\r\n                    }\r\n\r\n                    // extract people and links\r\n                    const {\r\n                        people,\r\n                        companies,\r\n                        links,\r\n                        levels = new Map(),\r\n                        roles = new Map(),\r\n                    } = ucs.reduce(\r\n                        (formattedData, uc) => {\r\n                            const { person, company, strength = 0, networkHealthScore } = uc;\r\n                            if (person && person.uri) {\r\n                                if (firstUser && firstUser.uri) {\r\n                                    formattedData.people[person.uri] = person;\r\n                                    formattedData.links.push({\r\n                                        source: firstUser.uri,\r\n                                        target: person.uri,\r\n                                        value: strength,\r\n                                    });\r\n                                }\r\n                                if (person.level) {\r\n                                    const set = formattedData.levels.get(person.level) || new Set();\r\n                                    formattedData.levels.set(person.level, set.add(person.uri));\r\n                                }\r\n                                if (person.roles.length > 0) {\r\n                                    person.roles.forEach(({ name = \"\" }) => {\r\n                                        if (!name) {\r\n                                            return;\r\n                                        }\r\n                                        const [groupName = \"\"] = name.split(\"-\");\r\n                                        const identifier = groupName.trim();\r\n                                        const set = formattedData.roles.get(identifier) || new Set(); // eslint-disable-line no-unused-vars\r\n                                        formattedData.roles.set(identifier, set.add(person.uri));\r\n                                    });\r\n                                }\r\n                            }\r\n                            if (company && company.uri && firstUser && firstUser.uri) {\r\n                                const { active = 0, strong = 0 } = networkHealthScore || {};\r\n                                formattedData.companies[company.uri] = company;\r\n                                formattedData.links.push({\r\n                                    source: firstUser.uri,\r\n                                    target: company.uri,\r\n                                    value: active,\r\n                                    strong,\r\n                                    active,\r\n                                });\r\n                            }\r\n                            return formattedData;\r\n                        },\r\n                        {\r\n                            links: result.links,\r\n                            people: result.people,\r\n                            companies: result.companies,\r\n                            levels: result.levels,\r\n                            roles: result.roles,\r\n                        },\r\n                    );\r\n\r\n                    let formattedLinks;\r\n                    if (type === \"company\") {\r\n                        const maxConnections = links.reduce(\r\n                            (currentMax, { active = 0 }) => Math.max(currentMax, active),\r\n                            0,\r\n                        );\r\n                        formattedLinks = links.map(({ active = 0, ...restLink }) => ({ ...restLink, active, value: ((active || 0) / maxConnections) * 10 }));\r\n                    }\r\n\r\n                    return {\r\n                        users,\r\n                        people,\r\n                        companies,\r\n                        links: formattedLinks || links,\r\n                        levels,\r\n                        roles,\r\n                    };\r\n                }, initialData);\r\n            })\r\n            .map((data: Partial<Data> = {}) => {\r\n                const { users = {}, people = {}, companies = {}, levels = new Map<JobLevel, Set<string>>(), roles = new Map<string, Set<string>>() } = data;\r\n                const preFormattedData = {\r\n                    ...data,\r\n                    roles: Array.from(roles).sort((a, b) => b[1].size - a[1].size),\r\n                    levels: Array.from(levels),\r\n                    userValues: Object.values(users),\r\n                    personValues: Object.values(people),\r\n                    companyValues: Object.values(companies),\r\n                };\r\n                const summarizedData = summarizeData(preFormattedData);\r\n                return summarizedData;\r\n            })\r\n            .fork(\r\n                err => {\r\n                    if (cancelled) return;\r\n                    logger.error(\"Error getting relationships\", err);\r\n                    setRelationshipsData({ apiState: apiStates.error, relationships: {} });\r\n                },\r\n                (relationships) => {\r\n                    if (cancelled) return;\r\n                    setRelationshipsData({ apiState: apiStates.fetched, relationships });\r\n                },\r\n            );\r\n\r\n\r\n        return () => {\r\n            cancelled = true;\r\n        };\r\n    }, [type, companyUri, listUri, teamUri, getEntityOptions]);\r\n\r\n    return [relationshipsData, setRelationshipsData];\r\n}\r\n"]}