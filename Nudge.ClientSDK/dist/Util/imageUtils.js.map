{"version":3,"file":"imageUtils.js","sourceRoot":"","sources":["../../Util/imageUtils.ts"],"names":[],"mappings":"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","sourcesContent":["import registry from \"~/Util/registry\";\r\nimport { Task } from \"./fp/Instances/Task\";\r\n\r\nfunction isNudgeImage(url: string) {\r\n    return registry.applicationServiceCdnURL\r\n        .map(cdnUrl => url.indexOf(cdnUrl)===0)\r\n}\r\n\r\nfunction isCompanyImage(url: string){\r\n    return url.indexOf(\"/Company\")>=0;\r\n}\r\n\r\nfunction isEmpty(url: string){\r\n    return !url || (url.indexOf(\"emptystate_\") > 0);\r\n}\r\n\r\n/**\r\n * Scales the image to a specific width and height given an algorithm\r\n * @param  {string} url       Image url\r\n * @param  {number} width     Width of the image\r\n * @param  {number} height    Height of the image\r\n * @param  {string} algorithm {crop, letterbox, shrink, shrinkAndFit}\r\n * @return {string}           Image url of scaled image\r\n */\r\nexport function getScaledImageURL(url: string, width: number, height: number, algorithm=\"crop\"){\r\n    // If it's not a Nudge image or width and height are not provided do \r\n    // no-op\r\n    if(!isNudgeImage(url) || (!width && !height)){\r\n        return url;\r\n    }\r\n\r\n    let suffix = `type=${algorithm}`;\r\n    if(width){\r\n        suffix+=`&width=${width}`;\r\n    }\r\n    if(height){\r\n        suffix+=`&height=${height}`;   \r\n    }\r\n\r\n    const joiningCharacter = url.indexOf(\"?\")===-1 ? '?' : '&';\r\n    return url + joiningCharacter + suffix;\r\n}\r\n\r\nexport function getTextImageURL(text: string, width: number, height: number, color = \"5db9ff\", backgroundColor = \"cae8ff\") {\r\n    return registry.applicationServiceCdnURL\r\n        .map(cdnUrl => `${cdnUrl}/image/text?value=${text}&color=${backgroundColor}&textcolor=${color}`)\r\n        .map(fullUrl => getScaledImageURL(fullUrl, width, height));\r\n}\r\n\r\nexport function getImgSrc(url: string, text: string, size: number, shouldGetTextImage = true) {\r\n    if(isEmpty(url)){\r\n        return shouldGetTextImage ? getTextImageURL(text, size, size) : Task.of(\"\");\r\n    }\r\n    else{\r\n        const algorithm = isCompanyImage(url) ? \"letterbox\" : \"crop\";\r\n        return Task.of(getScaledImageURL(url, size, size, algorithm));\r\n    }\r\n}\r\n\r\nexport function getImgSrcSet(url: string, text: string, size: number, shouldGetTextImage = true) {\r\n    return Task.of((image1x: string): (s: string) => (t: string) => string =>\r\n        (image2x: string): (s: string) => string =>\r\n            (image3x: string): string => image1x && image2x && image3x ? `${image1x} 1x, ${image2x} 2x, ${image3x} 3x` : \"\")\r\n        .ap(getImgSrc(url, text, size, shouldGetTextImage))\r\n        .ap(getImgSrc(url, text, size * 2, shouldGetTextImage))\r\n        .ap(getImgSrc(url, text, size * 3, shouldGetTextImage))\r\n}\r\n\r\nexport const isImgEmpty = isEmpty;\r\n"]}