{"version":3,"file":"ObjectUtils.js","sourceRoot":"","sources":["../../Util/ObjectUtils.ts"],"names":[],"mappings":"AAAA,OAAO,aAAa,MAAM,iBAAiB,CAAC;AAE5C,OAAO,EAAE,OAAO,EAAE,MAAM,iBAAiB,CAAC;AAE1C,IAAM,sBAAsB,GAAG,UAAC,OAAwB;IACpD,IAAM,MAAM,GAAwB,EAAE,CAAC;IACvC,OAAO,CAAC,OAAO,EAAE,UAAA,KAAK;QAClB,IAAM,GAAG,GAAG,KAAK,CAAC,CAAC,CAAW,CAAC;QAC/B,IAAM,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;QACvB,MAAM,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;IACxB,CAAC,CAAC,CAAC;IACH,OAAO,MAAM,CAAC;AAClB,CAAC,CAAA;AAED,0DAA0D;AAC1D,4CAA4C;AAC5C,IAAM,sBAAsB,GAAG,UAAC,eAAgC,IAAK,OAAC,eAAuB,CAAC,OAAO,EAAqB,EAArD,CAAqD,CAAC;AAE3H,MAAM,CAAC,IAAM,OAAO,GAAG,UAAC,GAAQ,IAA+C,OAAA,aAAa,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,CAAC,EAAE,GAAG,KAAA,EAAE,KAAK,EAAE,GAAG,CAAC,GAAG,CAAC,EAAC,CAAC,EAAzB,CAAyB,CAAC,EAA/E,CAA+E,CAAC;AAC/J,MAAM,CAAC,IAAM,SAAS,GAAG,UAAC,MAAc,IAAK,OAAA,sBAAsB,CAAC,sBAAsB,CAAC,IAAI,eAAe,CAAC,MAAM,CAAC,CAAC,CAAC,EAA3E,CAA2E,CAAC;AACzH,MAAM,CAAC,IAAM,OAAO,GAAG,UAAC,MAA4B,IAAK,OAAA,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,kBAAkB,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,kBAAkB,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,EAA/D,CAA+D,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAxH,CAAwH,CAAC;AAClL,MAAM,CAAC,IAAM,aAAa,GAAG,UAAC,GAAQ,IAAK,OAAA,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,KAAK,CAAC,IAAI,GAAG,CAAC,WAAW,KAAK,MAAM,EAA3D,CAA2D,CAAC","sourcesContent":["import NudgeIterable from \"./NudgeIterable\";\r\nimport KeyValuePair from \"./KeyValuePair\";\r\nimport { forEach } from \"./IterableUtils\";\r\n\r\nconst vanillaEntriesToObject = (entries: Iterable<any[]>) => {\r\n    const result: Record<string, any> = {};\r\n    forEach(entries, entry => {\r\n        const key = entry[0] as string;\r\n        const value = entry[1];\r\n        result[key] = value;\r\n    });\r\n    return result;\r\n}\r\n\r\n// lib.dom.d.ts does not include URLSearchParams.entries()\r\n// We will force compiler to accept it here.\r\nconst urlSearchParamsEntries = (urlSearchParams: URLSearchParams) => (urlSearchParams as any).entries() as Iterable<any[]>;\r\n\r\nexport const entries = (obj: any): NudgeIterable<KeyValuePair<string, any>> => NudgeIterable.fromArray(Object.keys(obj)).map(key => ({ key, value: obj[key]}));\r\nexport const fromQuery = (search: string) => vanillaEntriesToObject(urlSearchParamsEntries(new URLSearchParams(search)));\r\nexport const toQuery = (params?: Record<string, any>) => !params ? \"\" : Object.keys(params).map(key => encodeURIComponent(key) + '=' + encodeURIComponent(params[key])).join('&');\r\nexport const isEmptyObject = (obj: any) => Object.keys(obj).length === 0 && obj.constructor === Object;"]}