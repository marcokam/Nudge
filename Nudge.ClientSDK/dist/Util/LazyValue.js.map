{"version":3,"file":"LazyValue.js","sourceRoot":"","sources":["../../Util/LazyValue.ts"],"names":[],"mappings":"AAEA;IAOI,mBAAY,QAAiB;QAA7B,iBAEC;QAPO,aAAQ,GAAY,KAAK,CAAC;QASlC,aAAQ,GAAG;YACP,IAAI,KAAI,CAAC,QAAQ,EAAE;gBACf,OAAO,KAAI,CAAC,KAAU,CAAC;aAC1B;YACD,KAAI,CAAC,KAAK,GAAG,KAAI,CAAC,QAAQ,EAAE,CAAC;YAC7B,KAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;YACrB,OAAO,KAAI,CAAC,KAAU,CAAC;QAC3B,CAAC,CAAA;QAVG,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC7B,CAAC;IAJM,YAAE,GAAG,UAAI,CAAU,IAAc,OAAA,IAAI,SAAS,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAzB,CAAyB,CAAC;IActE,gBAAC;CAAA,AAnBD,IAmBC;eAnBoB,SAAS","sourcesContent":["import { Lazy } from \"./fp/function\";\r\n\r\nexport default class LazyValue<T> {\r\n    private readonly producer: () => T;\r\n    private produced: boolean = false;\r\n    private value?: T;\r\n\r\n    static of = <A>(a: () => A): Lazy<A> => new LazyValue(a).getValue;\r\n\r\n    constructor(producer: () => T) {\r\n        this.producer = producer;\r\n    }\r\n\r\n    getValue = (): T => {\r\n        if (this.produced) {\r\n            return this.value as T;\r\n        }\r\n        this.value = this.producer();\r\n        this.produced = true;\r\n        return this.value as T;\r\n    }\r\n}"]}