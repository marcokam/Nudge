{"version":3,"file":"apiUtils.test.js","sourceRoot":"","sources":["../../Util/apiUtils.test.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,YAAY,CAAC;AAEvC,OAAO,gBAAgB,MAAM,wBAAwB,CAAC;AACtD,OAAO,QAAQ,MAAM,YAAY,CAAC;AAElC,QAAQ,CAAC,WAAW,EAAE;IAClB,EAAE,CAAC,iDAAiD,EAAE;;;;;oBAC5C,eAAe,GAAG,EAAE,OAAO,EAAE,SAAS,EAAE,CAAC;oBAC/C,QAAQ,CAAC,SAAS,GAAG,IAAI,gBAAgB,CAAC,UAAC,OAAmB,IAA2B,OAAA,OAAO,CAAC,OAAO,CAAC;wBACrG,EAAE,EAAE,IAAI;wBACR,GAAG,EAAE,OAAO,CAAC,GAAG;wBAChB,MAAM,EAAE,GAAG;wBACX,IAAI,EAAE,cAAM,OAAA,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC,EAAhD,CAAgD;wBAC5D,IAAI,EAAE,cAAM,OAAA,OAAO,CAAC,OAAO,CAAC,eAAe,CAAC,EAAhC,CAAgC;wBAC5C,OAAO,EAAE,IAAsB;qBAClC,CAAC,EAPuF,CAOvF,CAAC,CAAC;oBACE,aAAa,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;oBAC1B,WAAW,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;oBAE9B,qBAAM,SAAS,CAAC,OAAO,CAAC;6BACnB,IAAI,CAAC,WAAW,EAAE,aAAa,CAAC,EAAA;;oBADrC,SACqC,CAAC;oBAEtC,MAAM,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC;oBACrC,MAAM,CAAC,aAAa,CAAC,CAAC,cAAc,CAAC,eAAe,CAAC,CAAC;;;;SACzD,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","sourcesContent":["import { getEntity } from \"./apiUtils\";\r\nimport { ApiRequest, ApiResponse } from \"~/Api/ApiInterfaces\";\r\nimport DefaultApiClient from \"~/Api/DefaultApiClient\";\r\nimport registry from \"./registry\";\r\n\r\ndescribe(\"getEntity\", () => {\r\n    it(\"constracts a url using the base and pass in url\", async () => {\r\n        const successResponse = { message: \"SUCCESS\" };\r\n        registry.apiClient = new DefaultApiClient((request: ApiRequest): Promise<ApiResponse> => Promise.resolve({\r\n            ok: true,\r\n            url: request.url,\r\n            status: 200,\r\n            text: () => Promise.resolve(JSON.stringify(successResponse)),\r\n            json: () => Promise.resolve(successResponse),\r\n            headers: null as any as Headers\r\n        }));\r\n        const mockSuccessFn = jest.fn();\r\n        const mockErrorFn = jest.fn();\r\n        \r\n        await getEntity(\"/test\")\r\n            .fork(mockErrorFn, mockSuccessFn);\r\n\r\n        expect(mockErrorFn).not.toBeCalled();\r\n        expect(mockSuccessFn).toBeCalledWith(successResponse);\r\n    });\r\n});"]}