{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../Util/utils.ts"],"names":[],"mappings":"AACA,+DAA+D;AAC/D,MAAM,CAAC,IAAM,UAAU,GAAG,UAAC,CAAM,IAAK,OAAA,OAAO,CAAC,KAAK,UAAU,EAAvB,CAAuB,CAAC;AAC9D,MAAM,CAAC,IAAM,eAAe,GACtB,UAAC,CAAM,IAAK,OAAA,UAAU,CAAC,CAAC,CAAC;IACvB,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;IACd,CAAC,CAAC,CAAC,EAFO,CAEP,CAAC;AAEZ,MAAM,CAAC,IAAM,aAAa,GAAG,UAAC,CAAM;IAChC,IAAM,QAAQ,GAAG,eAAe,CAAC,CAAC,CAAC,CAAC;IACpC,OAAO,OAAO,QAAQ,KAAK,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;AAC9E,CAAC,CAAC;AAEF,MAAM,CAAC,IAAM,SAAS,GAAG,UAAC,SAAkB,EAAE,OAAe,IAAqB,IAAI,CAAC,SAAS;IAAE,MAAM,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1H,MAAM,CAAC,IAAM,eAAe,GAAG,UAAC,KAAU,EAAE,OAAe,IAAmB,OAAA,SAAS,CAAC,CAAC,CAAC,KAAK,EAAE,OAAO,CAAC,EAA3B,CAA2B,CAAC;AAE1G,MAAM,CAAC,IAAM,iBAAiB,GAAG,UAAC,GAAW,IAAK,OAAA,IAAI,OAAO,CAAO,UAAC,OAAO,EAAE,MAAM;IAChF,sKAAsK;IACtK,gFAAgF;IAChF,IAAM,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;IAChD,MAAM,CAAC,IAAI,GAAG,iBAAiB,CAAC;IAChC,MAAM,CAAC,GAAG,GAAG,GAAG,CAAC;IACjB,MAAM,CAAC,MAAM,GAAG,cAAM,OAAA,OAAO,EAAE,EAAT,CAAS,CAAC;IAChC,MAAM,CAAC,OAAO,GAAG,cAAM,OAAA,MAAM,EAAE,EAAR,CAAQ,CAAC;IAChC,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC;IAEpB,sCAAsC;IACtC,QAAQ,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;AACjE,CAAC,CAAC,EAZgD,CAYhD,CAAC","sourcesContent":["\r\n//export const isFunction = (f: any) => f && f.call && f.apply;\r\nexport const isFunction = (f: any) => typeof f === \"function\";\r\nexport const resolveFunction: any\r\n    = (f: any) => isFunction(f)\r\n        ? f.call(null)\r\n        : f;\r\n\r\nexport const resolveString = (f: any): string => {\r\n    const resolved = resolveFunction(f);\r\n    return typeof resolved === \"string\" ? resolved : JSON.stringify(resolved);\r\n};\r\n\r\nexport const invariant = (condition: boolean, message: string): void | never => { if (!condition) throw Error(message); };\r\nexport const invariantTruthy = (value: any, message: string): void | never => invariant(!!value, message);\r\n\r\nexport const asyncScriptLoader = (src: string) => new Promise<void>((resolve, reject) => {\r\n    //TODO: This is going to add the nonce for CSP via https://github.com/NudgeSoftware/nudge-app/blob/master/src/Nudge.WebApp.Web/Views/Shared/_createElementNonce.cshtml\r\n    //      We'd like to remove this, so we'll need to add the nonce here ourselves.\r\n    const script = document.createElement(\"script\");\r\n    script.type = \"text/javascript\";\r\n    script.src = src;\r\n    script.onload = () => resolve();\r\n    script.onerror = () => reject();\r\n    script.async = true;\r\n\r\n    // Push the script element into <head>\r\n    document.getElementsByTagName(\"head\")[0].appendChild(script);\r\n});"]}