{"version":3,"file":"LazyAsyncValue.js","sourceRoot":"","sources":["../../Util/LazyAsyncValue.ts"],"names":[],"mappings":"AAEA;IAOI,wBAAY,QAA0B;QAAtC,iBAEC;QAPO,aAAQ,GAAY,KAAK,CAAC;QASlC,aAAQ,GAAG;YACP,IAAI,KAAI,CAAC,QAAQ,EAAE;gBACf,OAAO,KAAI,CAAC,KAAmB,CAAC,CAAC,4BAA4B;aAChE;YACD,KAAI,CAAC,KAAK,GAAG,KAAI,CAAC,QAAQ,EAAE,CAAC;YAC7B,KAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;YACrB,OAAO,KAAI,CAAC,KAAK,CAAC;QACtB,CAAC,CAAC;QAVE,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC7B,CAAC;IAJM,iBAAE,GAAG,UAAI,CAAmB,IAAuB,OAAA,IAAI,cAAc,CAAC,CAAC,CAAC,CAAC,QAAQ,EAA9B,CAA8B,CAAC;IAc7F,qBAAC;CAAA,AAnBD,IAmBC;eAnBoB,cAAc","sourcesContent":["import { Lazy } from \"./fp/function\";\r\n\r\nexport default class LazyAsyncValue<V> {\r\n    private readonly producer: () => Promise<V>;\r\n    private produced: boolean = false;\r\n    private value?: Promise<V>;\r\n\r\n    static of = <V>(a: () => Promise<V>): Lazy<Promise<V>> => new LazyAsyncValue(a).getValue;\r\n\r\n    constructor(producer: () => Promise<V>) {\r\n        this.producer = producer;\r\n    }\r\n\r\n    getValue = (): Promise<V> => {\r\n        if (this.produced) {\r\n            return this.value as Promise<V>; // Cast to remove undefined \r\n        }\r\n        this.value = this.producer();\r\n        this.produced = true;\r\n        return this.value;\r\n    };\r\n}\r\n"]}