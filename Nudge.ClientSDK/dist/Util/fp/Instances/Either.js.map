{"version":3,"file":"Either.js","sourceRoot":"","sources":["../../../../Util/fp/Instances/Either.ts"],"names":[],"mappings":"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","sourcesContent":["import { Lazy } from \"../function\";\r\nimport { Monad2 } from \"../Algebras/Monad\";\r\n\r\nexport const URI = \"Either\";\r\nexport type URI = typeof URI;\r\n\r\ntype Return<A> = A extends (...args: any[]) => infer R ? R : never;\r\n\r\nexport class Left<E, A> {\r\n    private readonly tag: \"Left\" = \"Left\";\r\n    readonly right: never;\r\n    readonly left: E;\r\n    constructor(left: E) {\r\n        this.left = left;\r\n    }\r\n    readonly map = <B>(f: (a: A) => B): Either<E, B> =>                 // eslint-disable-line @typescript-eslint/no-unused-vars\r\n        this as unknown as Either<E, B>;\r\n    readonly ap = <B>(Eb: Either<E, B>): Either<E, Return<A>> =>        // eslint-disable-line @typescript-eslint/no-unused-vars\r\n        this as unknown as Either<E, Return<A>>;\r\n    readonly chain = <B>(f: (a: A) => Either<E, B>): Either<E, B> =>    // eslint-disable-line @typescript-eslint/no-unused-vars\r\n        this as unknown as Either<E, never>;\r\n    readonly getOrElse = <D>(f: (e: E) => D) =>\r\n        f(this.left);\r\n    readonly fold = (l: (e: E) => any, r: (a: A) => any) =>         // eslint-disable-line @typescript-eslint/no-unused-vars\r\n        l(this.left);\r\n}\r\nexport const left = <E = never, A = never>(e: E): Either<E, never> => new Left(e) as Either<E, never>;\r\n\r\nexport class Right<E, A> {\r\n    private readonly tag: \"Right\" = \"Right\";\r\n    readonly right: A;\r\n    readonly left: never;\r\n    constructor(right: A) {\r\n        this.right = right;\r\n    }\r\n    readonly map = <B>(f: (a: A) => B): Either<E, B> => {\r\n        try {\r\n            return new Right(f(this.right));\r\n        } catch (e) {\r\n            return left(e);\r\n        }\r\n    }\r\n    readonly ap = <B>(eitherB: Either<E, B>): Either<E, Return<A>> =>\r\n        eitherB.map((this.right as unknown as (b: B) => Return<A>));\r\n    readonly chain = <B>(f: (a: A) => Either<E, B>): Either<E, B> =>\r\n        f(this.right);\r\n    readonly getOrElse = (e?: any) =>   // eslint-disable-line @typescript-eslint/no-unused-vars\r\n        this.right;\r\n    readonly fold = (l: (e: E) => any, r: (a: A) => any) =>\r\n        r(this.right);\r\n}\r\nexport type Either<E, A> = Left<E, A> | Right<E, A>;\r\n\r\nexport const right = <E, A>(a: A): Either<E, A> => new Right(a);\r\nexport const map = <E, A, B>(f: (a: A) => B) => (eitherA: Either<E, A>): Either<E, B> => eitherA.map(f);\r\nexport const ap = <E, A, B>(eitherAToB: Either<E, (a: A) => B>) => (eitherA: Either<E, A>): Either<E, B> => eitherAToB.ap(eitherA);\r\nexport const chain = <E, A, B>(f: (a: A) => Either<E, B>) => (eitherA: Either<E, A>) => eitherA.chain(f);\r\nexport const of = <E, A>(a: A): Either<E, A> => !(a instanceof Error) ? right(a) : left(a) as unknown as Either<E, A>;\r\nexport const either: Monad2<URI> = {\r\n    map,\r\n    ap,\r\n    chain,\r\n    of,\r\n};\r\n\r\nexport const tryCatch = <E, A>(f: Lazy<A>): Either<E, A> => {\r\n    try {\r\n        return either.of(f()) as unknown as Either<E, A>;\r\n    } catch (e) {\r\n        return left(e);\r\n    }\r\n}\r\n"]}