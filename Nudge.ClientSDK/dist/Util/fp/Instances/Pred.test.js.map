{"version":3,"file":"Pred.test.js","sourceRoot":"","sources":["../../../../Util/fp/Instances/Pred.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAC;AAC9B,OAAO,EAAE,GAAG,EAAE,MAAM,aAAa,CAAC;AAClC,OAAO,EAAE,MAAM,EAAE,MAAM,WAAW,CAAC;AAEnC,IAAM,MAAM,GAAG,UAAC,CAAS,IAAK,OAAA,CAAC,GAAG,CAAC,KAAK,CAAC,EAAX,CAAW,CAAC;AAC1C,IAAM,GAAG,GAAG,UAAC,CAAS,IAAK,OAAA,CAAC,GAAG,CAAC,EAAL,CAAK,CAAC;AAEjC,QAAQ,CAAC,MAAM,EAAE;IACb,EAAE,CAAC,sCAAsC,EAAE;QACvC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAA;IACjD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kBAAkB,EAAE;QACnB,IAAM,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,EAAU,CAAC,CAAC;QACxD,IAAM,EAAE,GAAG,IAAI,CAAC,KAAK,EAAU,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;QAExD,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QACrC,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IACzC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+CAA+C,EAAE;QAChD,MAAM,CACF,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;aACb,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC;aAClB,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;aACpB,GAAG,CAAC,CAChB,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAA;IACrB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wCAAwC,EAAE;QACzC,MAAM,CACF,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,EAAE,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,EAAE,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC;aAC9E,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;aACvB,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;aACzB,SAAS,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;aAC7B,GAAG,CAAC,CAChB,CAAC,OAAO,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,EAAE,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC,CAAA;IACvE,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","sourcesContent":["import { Pred } from \"./Pred\";\r\nimport { not } from \"../function\";\r\nimport { propOr } from \"../object\";\r\n\r\nconst isEven = (n: number) => n % 2 === 0;\r\nconst gt3 = (n: number) => n > 3;\r\n\r\ndescribe(\"Pred\", () => {\r\n    it(\"wraps a predicate to be run with run\", () => {\r\n        expect(Pred.of(isEven).run(5)).toEqual(false)\r\n    });\r\n\r\n    it(\"acts as a monoid\", () => {\r\n        const p1 = Pred.of(isEven).concat(Pred.empty<number>());\r\n        const p2 = Pred.empty<number>().concat(Pred.of(isEven));\r\n\r\n        expect(p1.run(5)).toEqual(p2.run(5));\r\n        expect(p1.run(4)).toEqual(p2.run(4));\r\n    });\r\n\r\n    it(\"can combine predicates together (conjunction)\", () => {\r\n        expect(\r\n            [1, 2, 3, 4, 5, 6]\r\n                .filter(Pred.of(isEven)\r\n                    .concat(Pred.of(gt3))\r\n                    .run)\r\n        ).toEqual([4, 6])\r\n    });\r\n\r\n    it(\"can transform the input before running\", () => {\r\n        expect(\r\n            [{ name: \"one\", value: 1 }, { name: \"two\", value: 2 }, { name: \"three\", value: 3 }]\r\n                .filter(Pred.of(not(isEven))\r\n                    .concat(Pred.of(not(gt3)))\r\n                    .contramap(propOr(\"value\", 0))\r\n                    .run)\r\n        ).toEqual([{ name: \"one\", value: 1 }, { name: \"three\", value: 3 }])\r\n    });\r\n});"]}