{"version":3,"file":"Compare.js","sourceRoot":"","sources":["../../../../Util/fp/Instances/Compare.ts"],"names":[],"mappings":"AAKA,MAAM,CAAC,IAAM,GAAG,GAAG,SAAS,CAAC;AAG7B;IAMI,iBAAY,CAAgB;QAA5B,iBAEC;QAPQ,QAAG,GAAc,SAAS,CAAC;QAS3B,QAAG,GAAG,UAAC,CAAI,EAAE,CAAI,IAAK,OAAA,KAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAhB,CAAgB,CAAC;QACvC,cAAS,GAAG,UAAI,CAAc,IAAiB,OAAA,IAAI,OAAO,CAAC,UAAC,CAAI,EAAE,CAAI,IAAM,OAAA,KAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAApB,CAAoB,CAAC,EAAlD,CAAkD,CAAC;QAClG,WAAM,GAAG,UAAC,QAAoB,IAAiB,OAAA,IAAI,OAAO,CAAC,UAAC,CAAI,EAAE,CAAI,IAAK,OAAA,KAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,EAApC,CAAoC,CAAC,EAAjE,CAAiE,CAAC;QALtH,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;IACnB,CAAC;IALM,UAAE,GAAG,UAAI,CAAgB,IAAiB,OAAA,IAAI,OAAO,CAAC,CAAC,CAAC,EAAd,CAAc,CAAC;IACzD,aAAK,GAAG,cAAS,OAAA,IAAI,OAAO,CAAC,cAAM,OAAA,CAAC,EAAD,CAAC,CAA0B,EAA7C,CAA6C,CAAC;IAS1E,cAAC;CAAA,AAbD,IAaC;SAbY,OAAO;AAepB,MAAM,CAAC,IAAM,SAAS,GAAG,UAAO,CAAc,IAAK,OAAA,UAAC,QAAoB,IAAK,OAAA,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,EAArB,CAAqB,EAA/C,CAA+C,CAAC;AACnG,MAAM,CAAC,IAAM,MAAM,GAAG,UAAI,SAAqB,IAAK,OAAA,UAAC,SAAqB,IAAK,OAAA,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,EAA3B,CAA2B,EAAtD,CAAsD,CAAC;AAC3G,MAAM,CAAC,IAAM,KAAK,GAAG,cAAS,OAAA,OAAO,CAAC,KAAK,EAAK,EAAlB,CAAkB,CAAC;AACjD,MAAM,CAAC,IAAM,IAAI,GAAuC;IACpD,SAAS,WAAA;IACT,KAAK,OAAA;IACL,MAAM,QAAA;CACT,CAAC","sourcesContent":["\r\nimport { Monoid1 } from \"../Algebras/Monoid\";\r\nimport { Contravariant1 } from \"../Algebras/Contravariant\";\r\nimport { Comparator } from \"../function\";\r\n\r\nexport const URI = \"Compare\";\r\nexport type URI = typeof URI;\r\n \r\nexport class Compare<A> {\r\n    readonly tag: \"Compare\" = \"Compare\";\r\n    private readonly value: Comparator<A>;\r\n    static of = <A>(a: Comparator<A>): Compare<A> => new Compare(a);\r\n    static empty = <A>() => new Compare(() => 0) as unknown as Compare<A>;\r\n    \r\n    constructor(a: Comparator<A>) {\r\n        this.value = a;\r\n    }\r\n    \r\n    readonly run = (a: A, b: A) => this.value(a, b);\r\n    readonly contramap = <B>(f: (b: B) => A): Compare<B> => new Compare((a: B, b: B ) => this.run(f(a), f(b)));\r\n    readonly concat = (compareA: Compare<A>): Compare<A> => new Compare((a: A, b: A) => this.run(a, b) || compareA.run(a, b));\r\n}\r\n\r\nexport const contramap = <A, B>(f: (a: B) => A) => (compareA: Compare<A>) => compareA.contramap(f);\r\nexport const concat = <A>(compareA1: Compare<A>) => (compareA2: Compare<A>) => compareA1.concat(compareA2);\r\nexport const empty = <A>() => Compare.empty<A>();\r\nexport const pred: Contravariant1<URI> & Monoid1<URI> = {\r\n    contramap,\r\n    empty,\r\n    concat,\r\n};\r\n"]}