{"version":3,"file":"Arrow.js","sourceRoot":"","sources":["../../../../Util/fp/Instances/Arrow.ts"],"names":[],"mappings":"AAGA,IAAM,GAAG,GAAG,OAAO,CAAC;AAGpB;IAKI,eAAY,CAAc;QAA1B,iBAEC;QANQ,QAAG,GAAY,OAAO,CAAC;QAQvB,QAAG,GAAG,UAAC,CAAI,IAAK,OAAA,KAAI,CAAC,KAAK,CAAC,CAAC,CAAC,EAAb,CAAa,CAAC;QAC9B,QAAG,GAAG,UAAI,CAAc,IAAK,OAAA,IAAI,KAAK,CAAC,UAAC,CAAI,IAAK,OAAA,CAAC,CAAC,KAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAd,CAAc,CAAC,EAAnC,CAAmC,CAAC;QACjE,cAAS,GAAG,UAAI,CAAc,IAAK,OAAA,IAAI,KAAK,CAAC,UAAC,CAAI,IAAK,OAAA,KAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAd,CAAc,CAAC,EAAnC,CAAmC,CAAC;QAL5E,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;IACnB,CAAC;IAJM,QAAE,GAAG,UAAO,CAAc,IAAkB,OAAA,IAAI,KAAK,CAAC,CAAC,CAAC,EAAZ,CAAY,CAAC;IASpE,YAAC;CAAA,AAZD,IAYC;SAZY,KAAK;AAclB,MAAM,CAAC,IAAM,GAAG,GAAG,UAAU,CAAc,IAAK,OAAA,UAAC,OAAoB,IAAK,OAAA,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAd,CAAc,EAAxC,CAAwC,CAAC;AACzF,MAAM,CAAC,IAAM,SAAS,GAAG,UAAU,CAAc,IAAK,OAAA,UAAC,OAAoB,IAAK,OAAA,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,EAApB,CAAoB,EAA9C,CAA8C,CAAC;AACrG,MAAM,CAAC,IAAM,EAAE,GAAG,UAAO,CAAc,IAAK,OAAA,IAAI,KAAK,CAAC,CAAC,CAAC,EAAZ,CAAY,CAAC;AACzD,MAAM,CAAC,IAAM,KAAK,GAAwC;IACtD,GAAG,KAAA;IACH,SAAS,WAAA;CACZ,CAAC","sourcesContent":["import { Contravariant2 } from \"../Algebras/Contravariant\";\r\nimport { Functor2 } from \"../Algebras/Functor\";\r\n\r\nconst URI = \"Arrow\";\r\nexport type URI = typeof URI;\r\n \r\nexport class Arrow<A, B> {\r\n    readonly tag: \"Arrow\" = \"Arrow\";\r\n    private readonly value: (a: A) => B;\r\n    static of = <A, B>(f: (a: A) => B): Arrow<A, B> => new Arrow(f);\r\n\r\n    constructor(f: (a: A) => B) {\r\n        this.value = f;\r\n    }\r\n    \r\n    readonly run = (a: A) => this.value(a);\r\n    readonly map = <C>(f: (b: B) => C) => new Arrow((a: A) => f(this.run(a)));\r\n    readonly contramap = <C>(f: (c: C) => A) => new Arrow((c: C) => this.run(f(c)));\r\n}\r\n\r\nexport const map = <A, B, C>(f: (b: B) => C) => (arrowAB: Arrow<A, B>) => arrowAB.map(f);\r\nexport const contramap = <A, B, C>(f: (c: C) => A) => (arrowAB: Arrow<A, B>) => arrowAB.contramap(f);\r\nexport const of = <A, B>(f: (a: A) => B) => new Arrow(f);\r\nexport const arrow: Contravariant2<URI> & Functor2<URI> = {\r\n    map,\r\n    contramap,\r\n};\r\n"]}