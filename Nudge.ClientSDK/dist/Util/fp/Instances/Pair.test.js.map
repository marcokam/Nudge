{"version":3,"file":"Pair.test.js","sourceRoot":"","sources":["../../../../Util/fp/Instances/Pair.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAC;AAE9B,QAAQ,CAAC,MAAM,EAAE;IACb,EAAE,CAAC,8DAA8D,EAAE;QAC/D,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACpD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iCAAiC,EAAE;QAClC,IAAM,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;QAC5B,MAAM,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAC3B,MAAM,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IACnC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uBAAuB,EAAE;QACxB,IAAM,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,KAAK,CAAC;aACtB,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,WAAW,EAAE,EAAf,CAAe,CAAC,CAAC;QAC/B,MAAM,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAC3B,MAAM,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IACnC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kCAAkC,EAAE;QACnC,IAAM,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,KAAK,CAAC;aACtB,KAAK,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,GAAG,CAAC,EAAL,CAAK,EAAE,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAA9B,CAA8B,CAAC,CAAC;QAC5D,MAAM,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAC3B,MAAM,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IACnC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","sourcesContent":["import { Pair } from \"./Pair\";\r\n\r\ndescribe(\"Pair\", () => {\r\n    it(\"creates a pair of 2 values, can extract an array of the pair\", () => {\r\n        expect(Pair.of(1, 2).toArray()).toEqual([1, 2]);\r\n    });\r\n\r\n    it(\"can extract the first or second\", () => {\r\n        const p = Pair.of(1, \"one\");\r\n        expect(p.fst()).toEqual(1);\r\n        expect(p.snd()).toEqual(\"one\");\r\n    });\r\n\r\n    it(\"can map on the second\", () => {\r\n        const p = Pair.of(1, \"one\")\r\n            .map(s => s.toUpperCase());\r\n        expect(p.fst()).toEqual(1);\r\n        expect(p.snd()).toEqual(\"ONE\");\r\n    });\r\n\r\n    it(\"can map on both first and second\", () => {\r\n        const p = Pair.of(1, \"one\")\r\n            .bimap(n => n + 1, s => s.split(\"\").reverse().join(\"\"));\r\n        expect(p.fst()).toEqual(2);\r\n        expect(p.snd()).toEqual(\"eno\");\r\n    });\r\n});"]}