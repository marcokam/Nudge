{"version":3,"file":"Producer.test.js","sourceRoot":"","sources":["../../../../Util/fp/Instances/Producer.test.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAiB,EAAE,QAAQ,EAAE,cAAc,EAAE,aAAa,EAAE,MAAM,YAAY,CAAC;AAC/E,OAAO,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAC;AAI9B,IAAM,cAAc,GAAG,UAAU,CAAI,EAAE,CAAc;;;;oBAClC,qBAAM,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAA;;gBAA1C,MAAM,GAAG,SAAiC;gBAChD,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;;;;KAC7B,CAAC;AAEF,IAAM,oBAAoB,GAAG,UAAU,CAAI,EAAE,CAAc;;;;oBACxC,qBAAM,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,EAAA;;gBAAhD,MAAM,GAAG,SAAuC;gBACtD,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;;;;KAC7B,CAAC;AAEF,IAAM,mBAAmB,GAAG,UAAU,CAAI,EAAE,CAAc;;;;oBACvC,qBAAM,aAAa,CAAC,CAAC,CAAC,EAAE,EAAA;;gBAAjC,MAAM,GAAG,SAAwB;gBACvC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;;;;KAC7B,CAAC;AAEF,IAAM,SAAS,GAAG,UAAC,IAAY,EAAE,MAAc,IAAK,OAAA,QAAQ,CAAC,WAAW,GAAG,IAAI,EAAE;IAC7E,EAAE,CAAC,IAAI,GAAG,iBAAiB,EAAE,cAAM,OAAA,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAZ,CAAY,CAAC,CAAC;IACjD,EAAE,CAAC,IAAI,GAAG,mBAAmB,EAAE,cAAM,OAAA,MAAM,CAAC,CAAC,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,EAA7B,CAA6B,CAAC,CAAC;IACpE,EAAE,CAAC,IAAI,GAAG,kBAAkB,EAAE,cAAM,OAAA,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,EAAE,CAAe,CAAC,CAAC,CAAC,EAAnC,CAAmC,CAAC,CAAC;IACzE,EAAE,CAAC,IAAI,GAAG,6BAA6B,EAAE,cAAM,OAAA,MAAM,CAAC,CAAC,EAAE,cAAM,OAAA,CAAC,EAAD,CAAC,CAAC,EAAlB,CAAkB,CAAC,CAAC;IACnE,EAAE,CAAC,IAAI,GAAG,+BAA+B,EAAE,cAAM,OAAA,MAAM,CAAC,CAAC,EAAE,cAAM,OAAA,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,EAAlB,CAAkB,CAAC,EAAnC,CAAmC,CAAC,CAAC;IACtF,EAAE,CAAC,IAAI,GAAG,8BAA8B,EAAE,cAAM,OAAA,MAAM,CAAC,CAAC,EAAE,cAAM,OAAA,IAAI,CAAC,EAAE,CAAe,CAAC,CAAC,EAAxB,CAAwB,CAAC,EAAzC,CAAyC,CAAC,CAAC;AAC/F,CAAC,CAAC,EAPkD,CAOlD,CAAC;AAEH,SAAS,CAAC,UAAU,EAAE,cAAc,CAAC,CAAC;AACtC,SAAS,CAAC,gBAAgB,EAAE,oBAAoB,CAAC,CAAC;AAClD,SAAS,CAAC,eAAe,EAAE,mBAAmB,CAAC,CAAC","sourcesContent":["import Producer, { toResult, toCachedResult, toLazyPromise } from \"./Producer\";\r\nimport { Task } from \"./Task\";\r\n\r\ntype Tester = <V>(v: V, p: Producer<V>) => Promise<void>;\r\n\r\nconst toResultTester = async <V>(v: V, p: Producer<V>) => {\r\n    const result = await Task.toPromise(toResult(p));\r\n    expect(result).toEqual(v);\r\n};\r\n\r\nconst toCachedResultTester = async <V>(v: V, p: Producer<V>) => {\r\n    const result = await Task.toPromise(toCachedResult(p));\r\n    expect(result).toEqual(v);\r\n};\r\n\r\nconst toLazyPromiseTester = async <V>(v: V, p: Producer<V>) => {\r\n    const result = await toLazyPromise(p)();\r\n    expect(result).toEqual(v);\r\n};\r\n\r\nconst testSuite = (name: string, tester: Tester) => describe(\"Producer \" + name, () => {\r\n    it(name + \" resolves value\", () => tester(1, 1));\r\n    it(name + \" resolves Promise\", () => tester(2, Promise.resolve(2)));\r\n    it(name + \" resolves Result\", () => tester(3, Task.of<Error,number>(3)));\r\n    it(name + \" resolves function to value\", () => tester(4, () => 4));\r\n    it(name + \" resolves function to Promise\", () => tester(5, () => Promise.resolve(5)));\r\n    it(name + \" resolves function to Result\", () => tester(6, () => Task.of<Error,number>(6)));\r\n});\r\n\r\ntestSuite(\"toResult\", toResultTester);\r\ntestSuite(\"toCachedResult\", toCachedResultTester);\r\ntestSuite(\"toLazyPromise\", toLazyPromiseTester);\r\n"]}