{"version":3,"file":"Task.test.js","sourceRoot":"","sources":["../../../../Util/fp/Instances/Task.test.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAC;AAC9B,OAAO,EAAQ,EAAE,EAAE,OAAO,EAAE,MAAM,aAAa,CAAC;AAEhD,IAAM,GAAG,GAAG,UAAC,CAAS,IAAK,OAAA,CAAC,GAAG,CAAC,EAAL,CAAK,CAAC;AACjC,IAAM,MAAM,GAAG,UAAC,CAAS,IAAK,OAAA,CAAC,GAAG,CAAC,EAAL,CAAK,CAAC;AACpC,IAAM,IAAI,GAAG,UAAC,CAAS,IAAK,OAAA,UAAC,CAAS,IAAK,OAAA,CAAC,GAAG,CAAC,EAAL,CAAK,EAApB,CAAoB,CAAC;AACjD,IAAM,OAAO,GAAG,UAAC,CAAkB,IAAK,OAAA,CAAC,GAAG,IAAI,EAAR,CAAQ,CAAC;AAGjD,QAAQ,CAAC,MAAM,EAAE;IACb,EAAE,CAAC,wBAAwB,EAAE;;;;;oBAKnB,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;oBAER,qBAAM,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,CAAC,EAAA;;oBAAnC,IAAI,GAAG,SAA4B;oBAC5B,qBAAM,CAAC,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,CAAC,EAAA;;oBAA3B,IAAI,GAAG,SAAoB;oBAC3B,IAAI,GAAG,IAAI,KAAK,IAAI,CAAC;oBAEd,qBAAM,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,CAAC,EAAA;;oBAAtD,IAAI,GAAG,SAA+C;oBAC/C,qBAAM,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,CAAC,EAAA;;oBAAjD,IAAI,GAAG,SAA0C;oBACjD,IAAI,GAAG,IAAI,KAAK,IAAI,CAAC;oBAE3B,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;oBACxB,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;;;;SAC3B,CAAC,CAAC;IAEH,EAAE,CAAC,kCAAkC,EAAE;;;;;oBAC7B,WAAW,GAAG,cAAM,OAAA,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAzB,CAAyB,CAAC;oBAC9C,OAAO,GAAG,IAAI,CAAC,EAAE,CAAC,WAAW,CAAC,CAAC;oBAC/B,OAAO,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;oBACpB,OAAO,GAAG,IAAI,CAAC,EAAE,CAAC,WAAW,CAAC,CAAC;oBAC/B,EAAE,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC;oBACvB,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC;oBACtB,EAAE,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC;oBAC7B,MAAM,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC;oBAEjC,EAAE,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,EAAD,CAAC,CAAC,CAAC;oBACf,MAAM,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC;oBAE3B,IAAI,GAAG,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC;oBACxC,MAAM,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC;oBAE3B,OAAO,GAAG,EAAE,CAAC,KAAK,CAAC,cAAM,OAAA,EAAE,EAAF,CAAE,CAAC,CAAC;oBACnC,MAAM,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC;oBACjC,MAAM,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC;oBAEjC,qBAAM,EAAE,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,CAAC,EAAA;;oBAArB,SAAqB,CAAC;oBACtB,MAAM,CAAC,OAAO,CAAC,CAAC,UAAU,EAAE,CAAC;oBAC7B,MAAM,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC;oBACjC,MAAM,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC;oBAEjC,qBAAM,EAAE,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,CAAC,EAAA;;oBAArB,SAAqB,CAAC;oBACtB,MAAM,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC;oBACjC,MAAM,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC;oBAEjC,qBAAM,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,CAAC,EAAA;;oBAAvB,SAAuB,CAAC;oBACxB,MAAM,CAAC,OAAO,CAAC,CAAC,UAAU,EAAE,CAAC;oBAC7B,MAAM,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC;oBAEjC,qBAAM,OAAO,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,CAAC,EAAA;;oBAA1B,SAA0B,CAAC;oBAC3B,MAAM,CAAC,OAAO,CAAC,CAAC,UAAU,EAAE,CAAC;;;;SAChC,CAAC,CAAC;IAEH,EAAE,CAAC,iCAAiC,EAAE;;;;wBACxB,qBAAM,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;yBACrB,GAAG,CAAC,GAAG,CAAC;yBACR,GAAG,CAAC,MAAM,CAAC;yBACX,GAAG,CAAC,OAAO,CAAC;yBACZ,IAAI,CAAC,EAAE,EAAE,EAAE,CAAC,EAAA;;oBAJX,CAAC,GAAG,SAIO;oBAEjB,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;;;;SACzB,CAAC,CAAC;IAEH,EAAE,CAAC,sCAAsC,EAAE;;;;;oBACjC,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;oBACf,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;oBAChB,qBAAM,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,CAAC,EAAA;;oBAAjC,CAAC,GAAG,SAA6B;oBAEvC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;;;;SACxB,CAAC,CAAC;IAEH,EAAE,CAAC,uDAAuD,EAAE;;;;;oBAClD,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;oBAChB,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;oBAChB,KAAK,GAAG,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;oBAClB,qBAAM,KAAK,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,CAAC,EAAA;;oBAA1C,CAAC,GAAG,SAAsC;oBAEhD,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;;;;SACxB,CAAC,CAAC;IAEH,EAAE,CAAC,0CAA0C,EAAE;;;;;oBACrC,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;oBACf,QAAQ,GAAG,CAAC,CAAC,KAAK,CAAC,UAAA,CAAC,IAAI,OAAA,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,EAAvB,CAAuB,CAAC,CAAC;oBAC7C,qBAAM,QAAQ,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,CAAC,EAAA;;oBAA/B,CAAC,GAAG,SAA2B;oBACrC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;;;;SACzB,CAAC,CAAC;IAEH,EAAE,CAAC,wCAAwC,EAAE;;;;;oBACnC,CAAC,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;oBACvB,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;yBACf,GAAG,CAAC,GAAG,CAAC;yBACR,GAAG,CAAC,MAAM,CAAC;yBACX,GAAG,CAAC,OAAO,CAAC,CAAC;oBACR,qBAAM,CAAC,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,CAAC,EAAA;;oBAAxB,CAAC,GAAG,SAAoB;oBAC9B,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;;;;SACzB,CAAC,CAAC;IAEH,EAAE,CAAC,qCAAqC,EAAE;;;;;oBAKrC,CAAC;oBACI,MAAM,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;oBACnB,GAAG,GAA0B,cAAM,OAAA,IAAI,OAAO,CAAC,UAAC,OAAO;wBACzD,UAAU,CAAC;4BACP,MAAM,EAAE,CAAC;4BACT,IAAM,CAAC,GAAW;gCACd,MAAM,EAAE;oCACJ,IAAI,EAAE,IAAI;iCACb;6BACJ,CAAC;4BACF,OAAO,CAAC,CAAC,CAAC,CAAC;wBACf,CAAC,EAAE,IAAI,CAAC,CAAC;oBACb,CAAC,CAAC,EAVuC,CAUvC,CAAC;oBAEG,CAAC,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC;oBAExB,MAAM,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC;oBAE1B,WAAW,GAAG,CAAC;yBAChB,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,MAAM,EAAR,CAAQ,CAAC;yBAClB,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,IAAI,EAAN,CAAM,CAAC;yBAChB,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,GAAG,IAAI,EAAR,CAAQ,CAAC,CAAC;oBAGR,qBAAM,WAAW,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,CAAC,EAAA;;oBAAxC,OAAO,GAAG,SAA8B;oBAC9C,MAAM,CAAC,MAAM,CAAC,CAAC,UAAU,EAAE,CAAC;oBAC5B,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;;;;SAC9B,CAAC,CAAC;IAEH,EAAE,CAAC,mCAAmC,EAAE;;;;;oBAKnC,CAAC;oBACI,MAAM,GAAG,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;oBACrB,CAAC,GAAG,IAAI,KAAK,CAAC,UAAU,CAAC,CAAC;oBAC1B,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;oBACtB,CAAC,GAAG,IAAI,CAAC,EAAE,CAAgB,CAAC,CAAC,CAAC;oBAC9B,WAAW,GAAG,CAAC;yBAChB,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,MAAM,EAAR,CAAQ,CAAC;yBAClB,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,IAAI,EAAN,CAAM,CAAC;yBAChB,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,GAAG,IAAI,EAAR,CAAQ,CAAC,CAAC;oBAER,qBAAM,WAAW,CAAC,IAAI,CAAC,MAAM,EAAE,EAAE,CAAC,EAAA;;oBAA5C,OAAO,GAAG,SAAkC;oBAClD,MAAM,CAAC,MAAM,CAAC,CAAC,UAAU,CAAC;oBAC1B,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;;;;SAC3B,CAAC,CAAC;IAEH,EAAE,CAAC,yCAAyC,EAAE;;;;;oBAGzC,CAAC;oBACI,GAAG,GAAuB,cAAM,OAAA,IAAI,OAAO,CAAC,UAAC,OAAO;wBACtD,UAAU,CAAC;4BACP,IAAM,CAAC,GAAQ;gCACX,MAAM,EAAE;oCACJ,IAAI,EAAE,IAAI;iCACb;6BACJ,CAAC;4BACF,OAAO,CAAC,CAAC,CAAC,CAAC;wBACf,CAAC,EAAE,IAAI,CAAC,CAAC;oBACb,CAAC,CAAC,EAToC,CASpC,CAAC;oBAEG,CAAC,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC;oBACR,qBAAM,CAAC;6BAClB,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,YAAY,CAAC,YAAY,EAA3B,CAA2B,CAAC;6BACrC,IAAI,CAAC,EAAE,EAAE,EAAE,CAAC,EAAA;;oBAFX,OAAO,GAAG,SAEC;oBAEjB,MAAM,CAAC,OAAO,YAAY,KAAK,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;;;;SAC/C,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","sourcesContent":["import { Task } from \"./Task\";\r\nimport { Lazy, id, compose } from \"../function\";\r\n\r\nconst inc = (x: number) => x + 1;\r\nconst double = (x: number) => x * 2;\r\nconst mult = (x: number) => (y: number) => x * y;\r\nconst exclaim = (x: number | string) => x + \"!!\";\r\n\r\n\r\ndescribe(\"Task\", () => {\r\n    it(\"obeys the Functor laws\", async () => {\r\n        /**\r\n         * 1. Identity: `F.map(id) = F`\r\n         * 2. Composition: `F.map(compose(bc, ab)) == F.map(ab).map(bc)`\r\n         */\r\n        const t = Task.of(1);\r\n\r\n        const l1v1 = await t.map(id).fork(id, id);\r\n        const l1v2 = await t.fork(id, id);\r\n        const law1 = l1v1 === l1v2;\r\n\r\n        const l2v1 = await t.map(compose(exclaim, inc)).fork(id, id)\r\n        const l2v2 = await t.map(inc).map(exclaim).fork(id, id);\r\n        const law2 = l2v1 === l2v2;\r\n        \r\n        expect(law1).toBe(true);\r\n        expect(law2).toBe(true);\r\n    });\r\n\r\n    it(\"does not run until run is called\", async () => {\r\n        const lazyPromise = () => Promise.resolve(\"result\");\r\n        const mockFn1 = jest.fn(lazyPromise);\r\n        const mockFn2 = jest.fn();\r\n        const mockFn3 = jest.fn(lazyPromise);\r\n        const t1 = new Task(mockFn1);\r\n        const t2 = Task.of(mockFn2);\r\n        const t3 = new Task(mockFn3);\r\n        expect(mockFn1).not.toBeCalled();\r\n\r\n        t1.map(r => r);\r\n        expect(mockFn1).not.toBeCalled();\r\n        \r\n        const t2ap = t2.ap(Task.of(\"anything\"));\r\n        expect(mockFn2).not.toBeCalled();\r\n        \r\n        const t1chain = t1.chain(() => t3);\r\n        expect(mockFn1).not.toBeCalled();\r\n        expect(mockFn3).not.toBeCalled();\r\n\r\n        await t1.fork(id, id);\r\n        expect(mockFn1).toBeCalled();\r\n        expect(mockFn2).not.toBeCalled();\r\n        expect(mockFn3).not.toBeCalled();\r\n\r\n        await t2.fork(id, id);\r\n        expect(mockFn2).not.toBeCalled();\r\n        expect(mockFn3).not.toBeCalled();\r\n\r\n        await t2ap.fork(id, id);\r\n        expect(mockFn2).toBeCalled();\r\n        expect(mockFn3).not.toBeCalled();\r\n\r\n        await t1chain.fork(id, id);\r\n        expect(mockFn3).toBeCalled();\r\n    });\r\n\r\n    it(\"supports mapping over functions\", async () => {\r\n        const r = await Task.of(1)\r\n            .map(inc)\r\n            .map(double)\r\n            .map(exclaim)\r\n            .fork(id, id);\r\n\r\n        expect(r).toBe(\"4!!\");\r\n    });\r\n\r\n    it(\"can apply a function in another Task\", async () => {\r\n        const t = Task.of(1);\r\n        const tinc = Task.of(inc);\r\n        const r = await tinc.ap(t).fork(id, id);\r\n\r\n        expect(r).toEqual(2);\r\n    });\r\n\r\n    it(\"can apply a curried function with multiple parameters\", async () => {\r\n        const t1 = Task.of(2);\r\n        const t2 = Task.of(3);\r\n        const tmult = Task.of(mult);\r\n        const r = await tmult.ap(t1).ap(t2).fork(id, id);\r\n\r\n        expect(r).toEqual(6);\r\n    });\r\n\r\n    it(\"can chain nested Tasks into a single one\", async () => {\r\n        const t = Task.of(1);\r\n        const unnested = t.chain(x => Task.of(x).map(exclaim));\r\n        const r = await unnested.fork(id, id);\r\n        expect(r).toBe(\"1!!\");\r\n    });\r\n\r\n    it(\"can make a task of an existing promise\", async () => {\r\n        const p = Promise.resolve(1);\r\n        const t = Task.of(p)\r\n            .map(inc)\r\n            .map(double)\r\n            .map(exclaim);\r\n        const r = await t.fork(id, id);\r\n        expect(r).toBe(\"4!!\");\r\n    });\r\n\r\n    it(\"can be used to call fetch like apis\", async () => {\r\n        interface Result {\r\n            result: {\r\n                port: number;\r\n            };\r\n        };\r\n        const mockFn = jest.fn();\r\n        const api: Lazy<Promise<Result>> = () => new Promise((resolve) => {\r\n            setTimeout(() => {\r\n                mockFn();\r\n                const r: Result = {\r\n                    result: {\r\n                        port: 8888,\r\n                    }\r\n                };\r\n                resolve(r);\r\n            }, 2000);\r\n        });\r\n\r\n        const t = new Task(api);\r\n\r\n        expect(mockFn).not.toBeCalled();\r\n\r\n        const computation = t\r\n            .map(o => o.result)\r\n            .map(r => r.port)\r\n            .map(p => p + 1111);\r\n\r\n        \r\n        const newPort = await computation.fork(id, id);\r\n        expect(mockFn).toBeCalled();\r\n        expect(newPort).toBe(9999);\r\n    });\r\n\r\n    it(\"handles errors on initial promise\", async () => {\r\n        interface Result {\r\n            result: {\r\n                port: number;\r\n            };\r\n        };\r\n        const mockFn = jest.fn(id);\r\n        const e = new Error(\"rejected\");\r\n        const p = Promise.reject(e);\r\n        const t = Task.of<Error, Result>(p);\r\n        const computation = t\r\n            .map(o => o.result)\r\n            .map(r => r.port)\r\n            .map(p => p + 1111);\r\n\r\n        const newPort = await computation.fork(mockFn, id);\r\n        expect(mockFn).toBeCalled;\r\n        expect(newPort).toBe(e);\r\n    });\r\n\r\n    it(\"handles errors on subsequent operations\", async () => {\r\n        interface Obj {\r\n            [key: string]: any;\r\n        };\r\n        const api: Lazy<Promise<Obj>> = () => new Promise((resolve) => {\r\n            setTimeout(() => {\r\n                const r: Obj = {\r\n                    result: {\r\n                        port: 8888,\r\n                    }\r\n                };\r\n                resolve(r);\r\n            }, 2000);\r\n        });\r\n\r\n        const t = new Task(api);\r\n        const newPort = await t\r\n            .map(o => o.doesnotexist.doesnotexist)\r\n            .fork(id, id);\r\n\r\n        expect(newPort instanceof Error).toBe(true);\r\n    });\r\n});\r\n"]}