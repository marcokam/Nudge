{"version":3,"file":"Compare.test.js","sourceRoot":"","sources":["../../../../Util/fp/Instances/Compare.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { Compare } from \"./Compare\";\r\nimport { propOr } from \"../object\";\r\nimport { Comparator } from \"../function\";\r\n\r\nconst flipDir = <A>(f: Comparator<A>) => (a: A, b: A) => f(a, b) === 0 ? 0 : f(a, b) === -1 ? 1 : -1;\r\nconst ascNum = (a: number, b: number) => a === b ? 0 : a < b ? -1 : 1;\r\nconst ascString = (a: string, b: string) => a.localeCompare(b) === 0 ? 0 : a.localeCompare(b) === -1 ? -1 : 1;\r\n\r\ndescribe(\"Compare\", () => {\r\n\r\n    it(\"wraps a comparator to be run with run\", () => {\r\n        const numCompare = Compare.of(ascNum);\r\n        expect(numCompare.run(1, 2)).toEqual(-1);\r\n        expect(numCompare.run(0, 0)).toEqual(0);\r\n        expect(numCompare.run(700, 70)).toEqual(1);\r\n    });\r\n\r\n    it(\"acts as a monoid\", () => {\r\n        const c1 = Compare.of(ascNum).concat(Compare.empty<number>());\r\n        const c2 = Compare.empty<number>().concat(Compare.of(ascNum));\r\n\r\n        expect(c1.run(5, 4)).toEqual(c2.run(5, 4));\r\n        expect(c1.run(80, 80)).toEqual(c2.run(80, 80));\r\n        expect(c1.run(999, -5)).toEqual(c2.run(999, -5));\r\n    });\r\n\r\n    it(\"can transform the input before running\", () => {\r\n        expect(\r\n            [{ name: \"one\", value: 1 }, { name: \"two\", value: 2 }, { name: \"three\", value: 3 }]\r\n                .sort(Compare.of(flipDir(ascNum))\r\n                    .contramap(propOr(\"value\", 0))\r\n                    .run)\r\n        ).toEqual([{ name: \"three\", value: 3 }, { name: \"two\", value: 2 }, { name: \"one\", value: 1 }])\r\n    });\r\n\r\n    it(\"can combine comparators together (falls through if 0)\", () => {\r\n        interface T {\r\n            name: string;\r\n            age: number;\r\n        };\r\n        const ts: T[] = [{ name: \"Donny\", age: 2 }, { name: \"Leo\", age: 2 }, { name: \"Raph\", age: 3 }, { name: \"Mikey\", age: 3 }];\r\n\r\n        expect(\r\n            ts.sort(Compare.of(flipDir(ascNum))\r\n                .contramap((t: T) => t.age)\r\n                .concat(Compare.of(ascString)\r\n                    .contramap((t: T) => t.name))\r\n                .run)\r\n        ).toEqual([{ name: \"Mikey\", age: 3 }, { name: \"Raph\", age: 3 }, { name: \"Donny\", age: 2 }, { name: \"Leo\", age: 2 }]);\r\n    });\r\n});"]}