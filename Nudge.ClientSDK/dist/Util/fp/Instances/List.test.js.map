{"version":3,"file":"List.test.js","sourceRoot":"","sources":["../../../../Util/fp/Instances/List.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { List } from \"./List\";\r\nimport { option } from \"./Option\";\r\nimport { Task, task } from \"./Task\";\r\nimport { id } from \"../function\";\r\n\r\ndescribe(\"List\", () => {\r\n    it(\"creates a list from an array and produces an array from a list\", () => {\r\n        expect(List.fromArray([1, 2, 3]).toArray()).toEqual([1, 2, 3]);\r\n    });\r\n    \r\n    it(\"creates a list from value arguments\", () => {\r\n        expect(List.of(1, 2, 3).toArray()).toEqual([1, 2, 3]);\r\n    });\r\n    \r\n    it(\"acts as a monoid\", () => {\r\n        expect(List.of(1, 2, 3).concat(List.empty()).toArray())\r\n            .toEqual(List.empty<number>().concat(List.of(1, 2, 3)).toArray());\r\n\r\n        expect(List.of(1, 2, 3).concat(List.of(4, 5, 6)).toArray()).toEqual([1, 2, 3, 4, 5, 6]);\r\n    });\r\n    \r\n    it(\"can reverse the list\", () => {\r\n        expect(List.of(1, 2, 3).reverse().toArray()).toEqual([3, 2, 1]);\r\n    })\r\n    \r\n    it(\"produces a unique list of values\", () => {\r\n        expect(List.of(1, 2, 2, 3, 1, 3, 4).uniq().toArray()).toEqual([1, 2, 3, 4]);\r\n        expect(List.of(\"a\", \"b\", \"a\", \"c\", \"e\").uniq().toArray()).toEqual([\"a\", \"b\", \"c\", \"e\"]);\r\n    });\r\n    \r\n    it(\"produces a unique list via a key function\", () => {\r\n        interface Turtle {\r\n            id: number;\r\n            name: string;\r\n        }\r\n        const turtles: Turtle[] = [{ id: 1, name: \"leo\" }, { id: 2, name: \"donny\" }, { id: 2, name: \"donny\" }, { id: 1, name: \"leo\" }, { id: 1, name: \"leo\" }, { id: 3, name: \"raph\" }, { id: 4, name: \"mikey\" }];\r\n        expect(\r\n            List.fromArray(turtles)\r\n                .uniqBy(t => t.id)\r\n                .toArray()\r\n        ).toEqual([{ id: 1, name: \"leo\" }, { id: 2, name: \"donny\" }, { id: 3, name: \"raph\" }, { id: 4, name: \"mikey\" }]);\r\n    });\r\n        \r\n    it(\"can fold a list of values\", () => {\r\n        expect(List.of(1, 2, 3).fold((acc, n) => acc + n, 0)).toEqual(6);\r\n        expect(List.of(2, 3, 4).fold((acc, n) => acc * n, 1)).toEqual(24);\r\n    });\r\n    \r\n    it(\"can filter a list\", () => {\r\n        expect(List.of(1, 2, 3).filter(x => x % 2 === 0).toArray()).toEqual([2]);\r\n        expect(\r\n            List.of({ name: \"Mickey\", age: 90 }, { name: \"Donald\", age: 85 })\r\n                .filter(c => c.age < 90)\r\n                .toArray()\r\n        ).toEqual([{ name: \"Donald\", age: 85 }]);\r\n    });\r\n    \r\n\r\n    it(\"can transform elements in the list\", () => {\r\n        expect(\r\n            List.of(1, 2, 3)\r\n                .map(n => n ** 2)\r\n                .map(s => s + 1)\r\n                .toArray()\r\n        ).toEqual([2, 5, 10])\r\n    });\r\n    \r\n    it(\"can apply a list of functions\", () => {\r\n        expect(\r\n            List.of((n: number) => n + 1, (n: number) => n * 2)\r\n                .ap(List.of(1, 2, 3))\r\n                .toArray()\r\n        ).toEqual([2, 2, 3, 4, 4, 6]);\r\n        expect(\r\n            List.of((x: string) => (y: string) => x + y)\r\n                .ap(List.of(\"a\", \"b\", \"c\"))\r\n                .ap(List.of(\"1\", \"2\", \"3\"))\r\n                .toArray()\r\n        ).toEqual([\"a1\", \"b1\", \"c1\", \"a2\", \"b2\", \"c2\", \"a3\", \"b3\", \"c3\"]);\r\n    });\r\n    \r\n    it(\"can chain List returning operations\", () => {\r\n        expect(\r\n            List.of(1, 2, 3)\r\n                .chain(n => List.of(n + 1))\r\n                .toArray()\r\n        ).toEqual([2, 3, 4])\r\n    });\r\n    \r\n    it(\"can traverse with an applicative\", async () => {\r\n        expect(\r\n            List.of(1, 2, 3)\r\n                .traverse1<\"Option\", number>(option, (n: number) => option.of(n))\r\n                .getOrElse(() => List.empty())\r\n                .toArray()\r\n        ).toEqual([1, 2, 3]);\r\n\r\n        const taskOfNumbers = List.of(1, 2, 3)\r\n            .traverse2<\"Task\", Error, number>(task, (n: number) => Task.of(n));\r\n        expect(await taskOfNumbers.fork(id, list => list.toArray())).toEqual([1, 2, 3]);\r\n\r\n        const optionOfNumbers = List.of(1, 2, 3)\r\n            .traverse1<\"Option\", number>(option, (n: number) => option.of(n));\r\n        expect(optionOfNumbers.getOrElse(() => List.fromArray([])).toArray()).toEqual([1, 2, 3]);\r\n    });\r\n});\r\n"]}