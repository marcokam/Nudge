{"version":3,"file":"object.test.js","sourceRoot":"","sources":["../../../Util/fp/object.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { keys, values, entries, fromEntries, mapEntries, propOr, pick } from \"./object\";\r\n\r\ndescribe(\"keys\", () => {\r\n    it(\"returns an array of keys on an object\", () => {\r\n        const o = {\"test1\": \"anything1\", \"test2\": \"anything2\", \"test3\": \"anything3\"};\r\n        expect(keys(o)).toEqual([\"test1\", \"test2\", \"test3\"]);\r\n    })\r\n});\r\n\r\ndescribe(\"values\", () => {\r\n    it(\"returns an array of values on an object\", () => {\r\n        const o = {\"test1\": \"anything1\", \"test2\": \"anything2\", \"test3\": \"anything3\"};\r\n        expect(values(o)).toEqual([\"anything1\", \"anything2\", \"anything3\"]);\r\n    });\r\n})\r\n\r\ndescribe(\"entries\", () => {\r\n    it(\"returns an array of key value pairs on an object\", () => {\r\n        const o = {\"test1\": \"anything1\", \"test2\": \"anything2\", \"test3\": \"anything3\"};\r\n        expect(entries(o)).toEqual([[\"test1\", \"anything1\"], [\"test2\", \"anything2\"], [\"test3\", \"anything3\"]]);\r\n    })\r\n});\r\n\r\ndescribe(\"fromEntries\", () => {\r\n    it(\"creates an object from an array of key value pairs\", () => {\r\n        expect(fromEntries([[\"test1\", \"anything1\"], [\"test2\", \"anything2\"], [\"test3\", \"anything3\"]])).toEqual({\"test1\": \"anything1\", \"test2\": \"anything2\", \"test3\": \"anything3\"});\r\n    });\r\n});\r\n\r\ndescribe(\"map\", () => {\r\n    it(\"maps a function on the key value pairs of an object\", () => {\r\n        expect(mapEntries((k, v) => ([k, v + \"!\"]))({\"test1\": \"anything1\", \"test2\": \"anything2\", \"test3\": \"anything3\"})).toEqual([[\"test1\", \"anything1!\"], [\"test2\", \"anything2!\"], [\"test3\", \"anything3!\"]])\r\n    });\r\n});\r\n\r\ndescribe(\"propOr\", () => {\r\n    const person = { name: \"Charlie\" };\r\n    const personName = propOr(\"name\", \"No Name\");\r\n\r\n    it(\"returns default when object not defined\", () => {\r\n        expect(personName({})).toEqual(\"No Name\");\r\n    });\r\n\r\n    it(\"returns default when property doesn't exist on object\", () => {\r\n        expect(personName({})).toEqual(\"No Name\");\r\n    });\r\n\r\n    it(\"returns the property value when exists on object\", () => {\r\n        expect(personName(person)).toBe(\"Charlie\");\r\n    });\r\n});\r\n\r\ndescribe(\"pick\", () => {\r\n    it(\"picks props off of an object\", () => {\r\n        const person = { name: \"Charles\", age: 12, location: \"Toronto\" };\r\n        expect(pick([\"name\"])(person)).toEqual({ name: \"Charles\" });\r\n        expect(pick([\"name\", \"age\"])(person)).toEqual({ name: \"Charles\", age: 12 });\r\n        expect(pick([\"name\", \"age\", \"doesnotexist\"])(person)).toEqual({ name: \"Charles\", age: 12 });\r\n    });\r\n});"]}