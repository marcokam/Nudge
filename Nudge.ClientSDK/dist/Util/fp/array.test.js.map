{"version":3,"file":"array.test.js","sourceRoot":"","sources":["../../../Util/fp/array.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { every, some, filter, map, reduce, groupBy, uniq, uniqBy, traverse1, traverse2, splitEvery } from \"./array\";\r\nimport { URI as OptionURI, option, none as optNone, some as optSome } from \"./Instances/Option\";\r\nimport { URI as TaskURI, task, Task } from \"./Instances/Task\";\r\nimport { id } from \"./function\";\r\n\r\ndescribe(\"every\", () => {\r\n    it(\"ensures a predicate function passes for every value in an array\", () => {\r\n        const isEven = (n: number) => n % 2 === 0;\r\n        const isOdd = (n: number) => !isEven(n);\r\n        const allEven = every(isEven);\r\n        const allOdd = every(isOdd);\r\n        const odds = [1, 3, 5, 7, 9];\r\n        const evens = [2, 4, 6, 8, 10];\r\n        const mixed = [1, 2, 3, 4, 5];\r\n\r\n        expect(allEven(odds)).toBe(false);\r\n        expect(allEven(evens)).toBe(true);\r\n        expect(allEven(mixed)).toBe(false);\r\n\r\n        expect(allOdd(odds)).toBe(true);\r\n        expect(allOdd(evens)).toBe(false);\r\n        expect(allOdd(mixed)).toBe(false);\r\n    });\r\n});\r\n\r\ndescribe(\"some\", () => {\r\n    it(\"ensures a predicate function passes for some value in an array\", () => {\r\n        const isEven = (n: number) => n % 2 === 0;\r\n        const isOdd = (n: number) => !isEven(n);\r\n        const someEven = some(isEven);\r\n        const someOdd = some(isOdd);\r\n        const odds = [1, 3, 5, 7, 9];\r\n        const evens = [2, 4, 6, 8, 10];\r\n        const mixed = [1, 2, 3, 4, 5];\r\n\r\n        expect(someEven(odds)).toBe(false);\r\n        expect(someEven(evens)).toBe(true);\r\n        expect(someEven(mixed)).toBe(true);\r\n\r\n        expect(someOdd(odds)).toBe(true);\r\n        expect(someOdd(evens)).toBe(false);\r\n        expect(someOdd(mixed)).toBe(true);\r\n    });\r\n});\r\n\r\ndescribe(\"filter\", () => {\r\n    it(\"filters the entries of an array\", () => {\r\n        const odds = [1, 3, 5, 7, 9];\r\n        const evens = [2, 4, 6, 8, 10];\r\n        const all = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\r\n        const isEven = (n: number) => n % 2 === 0;\r\n        const isOdd = (n: number) => !isEven(n);\r\n\r\n        expect(filter(isEven)(all)).toEqual(evens);\r\n        expect(filter(isOdd)(all)).toEqual(odds);\r\n    });\r\n});\r\n\r\ndescribe(\"map\", () => {\r\n    it(\"maps the entries of an array\", () => {\r\n        const odds = [1, 3, 5, 7, 9];\r\n        const evens = [2, 4, 6, 8, 10];\r\n        const inc = (n: number) => n + 1;\r\n\r\n        expect(map(inc)(odds)).toEqual(evens);\r\n    });\r\n});\r\n\r\ndescribe(\"reduce\", () => {\r\n    it(\"reduces the entries of an array\", () => {\r\n        const nums = [1, 2, 3, 4, 5];\r\n\r\n        expect(reduce<number, number>((acc, n) => acc + n, 0)(nums)).toEqual(15);\r\n    });\r\n});\r\n\r\ndescribe(\"groupBy\", () => {\r\n    it(\"groups the entries of an array into an object\", () => {\r\n        interface Turtle {\r\n            name: string;\r\n            colour: string;\r\n        }\r\n        const turtles: Turtle[] = [{ name: \"leonardo\", colour: \"purple\" }, { name: \"donatello\", colour: \"purple\" }, { name: \"raphael\", colour: \"red\" }, { name: \"michaelangelo\", colour: \"orange\" }]\r\n\r\n        expect(groupBy((p: Turtle) => p.colour)(turtles)).toEqual({\r\n            purple: [{ name: \"leonardo\", colour: \"purple\" }, { name: \"donatello\", colour: \"purple\" }],\r\n            red: [{ name: \"raphael\", colour: \"red\" }],\r\n            orange: [{ name: \"michaelangelo\", colour: \"orange\" }],\r\n        });\r\n    });\r\n});\r\n\r\ndescribe(\"uniq\", () => {\r\n    it(\"returns the unique values in an array\", () => {\r\n        const values = [\"one\", \"two\", \"one\", \"three\", \"five\", \"five\", \"two\", \"six\"];\r\n\r\n        expect(uniq(values)).toEqual([\"one\", \"two\", \"three\", \"five\", \"six\"]);\r\n    });\r\n});\r\n\r\ndescribe(\"uniqBy\", () => {\r\n    it(\"returns unique elements in an array according to map function\", () => {\r\n        interface Turtle {\r\n            id: number;\r\n            name: string;\r\n        }\r\n        const turtles: Turtle[] = [{ id: 1, name: \"leo\" }, { id: 2, name: \"donny\" }, { id: 2, name: \"donny\" }, { id: 1, name: \"leo\" }, { id: 1, name: \"leo\" }, { id: 3, name: \"raph\" }, { id: 4, name: \"mikey\" }];\r\n        expect(uniqBy<Turtle, number>(t => t.id)(turtles)).toEqual([{ id: 1, name: \"leo\" }, { id: 2, name: \"donny\" }, { id: 3, name: \"raph\" }, { id: 4, name: \"mikey\" }]);\r\n    });\r\n});\r\n\r\ndescribe(\"traverse\", () => {\r\n    it(\"performs traverse on an array\", async () => {\r\n        const optParse = (s: string) => isNaN(parseInt(s)) ? optNone : optSome(parseInt(s));\r\n        const arrayOfStrings1 = [\"1\", \"2\", \"3\"];\r\n        const optionOfNumbers1 = traverse1<OptionURI, string, number>(option)(optParse)(arrayOfStrings1);\r\n        const arrayOfStrings2 = [\"1\", \"x\", \"2\"];\r\n        const optionOfNumbers2 = traverse1<OptionURI, string, number>(option)(optParse)(arrayOfStrings2);\r\n        expect(optionOfNumbers1.getOrElse(() => [])).toEqual([1, 2, 3]);\r\n        expect(optionOfNumbers2.getOrElse(() => [])).toEqual([]);\r\n\r\n        const taskParse = (s: string): Task<Error, number> => isNaN(parseInt(s)) ? Task.reject(`${s} is not a number`) : Task.of(parseInt(s));\r\n        const taskOfNumbers1 = traverse2<TaskURI, Error, string, number>(task)(taskParse)(arrayOfStrings1);\r\n        const taskOfNumbers2 = traverse2<TaskURI, Error, string, number>(task)(taskParse)(arrayOfStrings2);\r\n        const result1 = await taskOfNumbers1.fork(id, id);\r\n        const result2 = await taskOfNumbers2.fork(id, id);\r\n        expect(result1).toEqual([1, 2, 3]);\r\n        expect(result2).toEqual(new Error(\"x is not a number\"));\r\n\r\n        const getTasks = (n: number) => task.of<Error, number[]>([n, n + 1, n + 2]);\r\n        const nums = [1, 2, 3];\r\n        const t3 = traverse2<TaskURI, Error, number, number[]>(task)(getTasks)(nums);\r\n        const result3 = await t3.fork(id, id);\r\n        expect(result3).toEqual([[1, 2, 3], [2, 3, 4], [3, 4, 5]]);\r\n    });\r\n});\r\n\r\ndescribe(\"splitEvery\", () => {\r\n    it(\"splits an array into partitions\", () => {\r\n        const arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\r\n        const arr2 = [1, 2, 3, 4, 5, 6, 7, 8, 9];\r\n        const arr3 = [1, 2, 3, 4, 5, 6, 7, 8];\r\n        const arr4 = [1, 2, 3, 4, 5, 6, 7];\r\n        const s3 = splitEvery(3);\r\n\r\n        expect(s3(arr1)).toEqual([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10]]);\r\n        expect(s3(arr2)).toEqual([[1, 2, 3], [4, 5, 6], [7, 8, 9]]);\r\n        expect(s3(arr3)).toEqual([[1, 2, 3], [4, 5, 6], [7, 8]]);\r\n        expect(s3(arr4)).toEqual([[1, 2, 3], [4, 5, 6], [7]])\r\n    });\r\n});\r\n"]}