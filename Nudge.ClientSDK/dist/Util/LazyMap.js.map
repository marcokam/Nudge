{"version":3,"file":"LazyMap.js","sourceRoot":"","sources":["../../Util/LazyMap.ts"],"names":[],"mappings":"AAAA;IAGI,iBAAY,QAA+B;QAA3C,iBAEC;QAHQ,WAAM,GAAsB,IAAI,GAAG,EAAE,CAAC;QAI/C,aAAQ,GAAG,UAAC,GAAS;YACjB,IAAM,OAAO,GAAG,KAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACrC,IAAI,OAAM,CAAC,OAAO,CAAC,KAAK,WAAW,EAAE;gBACjC,OAAO,OAAO,CAAC;aAClB;YACD,IAAM,QAAQ,GAAG,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;YACpC,KAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;YAC/B,OAAO,QAAQ,CAAC;QACpB,CAAC,CAAA;QAVG,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC7B,CAAC;IAUL,cAAC;AAAD,CAAC,AAfD,IAeC","sourcesContent":["export default class LazyMap<TKey, TValue> {\r\n    private readonly producer: (key: TKey) => TValue;\r\n    readonly values: Map<TKey, TValue> = new Map();\r\n    constructor(producer: (key: TKey) => TValue) {\r\n        this.producer = producer;\r\n    }\r\n    getValue = (key: TKey): TValue => {\r\n        const fromMap = this.values.get(key);\r\n        if (typeof(fromMap) !== \"undefined\") {\r\n            return fromMap;\r\n        }\r\n        const newValue = this.producer(key);\r\n        this.values.set(key, newValue);\r\n        return newValue;\r\n    }\r\n}"]}