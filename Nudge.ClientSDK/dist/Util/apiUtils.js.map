{"version":3,"file":"apiUtils.js","sourceRoot":"","sources":["../../Util/apiUtils.ts"],"names":[],"mappings":"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","sourcesContent":["import queryString from \"query-string\";\r\nimport parse, { Links } from \"parse-link-header\";\r\nimport registry from \"~/Util/registry\";\r\nimport { Task } from \"./fp/Instances/Task\";\r\nimport { ApiRequestOptions } from \"~/Api/ApiInterfaces\";\r\nimport { Query, Entity, GetEntityOptions, Cache } from \"~/Data/DataInterfaces\";\r\nimport { tryCatch } from \"./fp/Instances/Option\";\r\n\r\n\r\nconst toUrl = (uri: string) => registry.applicationServicesBaseUrl\r\n    .map(base => `${base}${uri}`);\r\nconst constructQuery = (query?: Query) => Task.of(query)\r\n    .map(q => q ? `?${queryString.stringify(q)}` : \"\");\r\nconst getFullUrl = (uri: string, query?: Query) =>\r\n    Task.of((url: string): (s: string) => string => (queryString: string) => `${url}${queryString}`)\r\n        .ap(toUrl(uri))\r\n        .ap(constructQuery(query));\r\n\r\n\r\nconst updateCache = (url: string, cache?: Cache) => (entity: any) => {\r\n    if (cache) cache.set(url, entity);\r\n    return entity;\r\n}\r\nexport const getEntity = (uri: string, query?: Query, { requestOptions, cache }: GetEntityOptions = {}) =>\r\n    getFullUrl(uri, query)\r\n        .chain(url => cache && cache.has(url)\r\n            ? Task.of(cache.get(url))\r\n            : Task.of(registry.apiClient.getJson(url, requestOptions))\r\n                .map(updateCache(url, cache)));\r\nexport const getEntityWithLinkHeaders = (uri: string, query?: Query, { requestOptions, cache }: GetEntityOptions = {}) =>\r\n    getFullUrl(uri, query)\r\n        .chain(url => cache && cache.has(url)\r\n            ? Task.of(cache.get(url))\r\n            : Task.of(registry.apiClient.get(url, requestOptions))\r\n                .chain(response => response.status === 204\r\n                    ? Task.of([undefined, {}])\r\n                    : Task.of(response\r\n                        .json()\r\n                        .then(data => [data, parse(response.headers.get(\"link\") || \"\")])\r\n                        .catch(() => [undefined, {}])))\r\n                .map(updateCache(url, cache)));\r\nexport const getAllEntities = (uri: string, query?: Query, { requestOptions, cache }: GetEntityOptions = {}, iterations = 10): Task<unknown, any> =>\r\n    getEntityWithLinkHeaders(uri, query, { requestOptions, cache })\r\n        .chain(([data = [], links = {}]: [any[], Links] = [] as unknown as [any[], Links]) => {\r\n            const nextUri = tryCatch(() => links.next.url).getOrElse(() => \"\");\r\n            if (nextUri && iterations > 0) return Task.of(data)\r\n                .chain(data => getAllEntities(nextUri, undefined, { requestOptions, cache }, iterations - 1).map((more = []) => data.concat(more)))\r\n            else return Task.of(data)\r\n        });\r\n\r\n\r\nexport const getJson = (url: string, options?: ApiRequestOptions) => Task.of(registry.apiClient.getJson(url, options));\r\nexport const postJson = (url: string, entity: any, options?: ApiRequestOptions) => Task.of(registry.apiClient.postJson(url, entity, options));\r\nexport const postEntity = (uri: string, entity: any, options?: ApiRequestOptions) => getFullUrl(uri)\r\n    .chain(url => postJson(url, entity, options));\r\nexport const patchEntity = (entity: Entity, options?: ApiRequestOptions) => getFullUrl(entity.uri)\r\n    .chain(url => Task.of(registry.apiClient.patchJson(url, entity, options)));\r\nexport const putEntity = (entity: Entity, options?: ApiRequestOptions) => getFullUrl(entity.uri)\r\n    .chain(url => Task.of(registry.apiClient.putJson(url, entity, options)));\r\nexport const deleteEntity = (uri: string, options?: ApiRequestOptions) => getFullUrl(uri)\r\n    .chain(url => Task.of(registry.apiClient.deleteJson(url, options)));\r\n\r\n/**\r\n * API States\r\n */\r\nexport interface ApiStates {\r\n    none: \"\"; // Never called\r\n    notFound: \"notFound\"; // Not found\r\n    fetching: \"fetching\"; // First call\r\n    fetched: \"fetched\"; //\r\n    updating: \"updating\"; // Subsequent calls\r\n    updated: \"updated\";\r\n    error: \"error\";\r\n};\r\nexport const apiStates = Object.freeze({\r\n    none: \"\", // Never called\r\n    notFound: \"notFound\", // Not found\r\n    fetching: \"fetching\", // First call\r\n    fetched: \"fetched\", //\r\n    updating: \"updating\", // Subsequent calls\r\n    updated: \"updated\",\r\n    error: \"error\",\r\n});\r\n"]}