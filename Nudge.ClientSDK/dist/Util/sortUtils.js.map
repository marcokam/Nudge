{"version":3,"file":"sortUtils.js","sourceRoot":"","sources":["../../Util/sortUtils.ts"],"names":[],"mappings":"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","sourcesContent":["import { isBefore } from \"date-fns\";\r\nimport { option } from \"./fp/Instances/Option\";\r\nimport { Arrow } from \"./fp/Instances/Arrow\";\r\nimport { Pair } from \"./fp/Instances/Pair\";\r\nimport { fromEntries } from \"./fp/object\";\r\n\r\ntype GT = 1;\r\ntype LT = -1;\r\ntype EQ = 0;\r\nexport type CompareResult = EQ | GT | LT;\r\nexport type Comparator<B> = (a: B, b: B) => CompareResult;\r\nexport interface Ordering { [k: string]: number };\r\n\r\n/**\r\n * Standard sort comparator functions for array.prototype.sort \r\n */\r\nexport const alphaCompareByDir = (asc = false) => (a = \"\", b = \"\") => (asc ? a.localeCompare(b) : b.localeCompare(a)) as CompareResult;\r\nexport const numCompareByDir = (asc = false) => (a = 0, b = 0) => (a === b ? 0 : (asc ? a < b : b < a) ? -1 : 1) as CompareResult;\r\nexport const truthyCompareByDir = (asc = false) => (a = false, b = false) => (a === b ? 0 : (asc ? !a : !b) ? -1 : 1) as CompareResult;\r\nexport const bothExistsCompareByDir = (asc = false) => <A>(a?: A, b?: A) => (a && b) ? 0 : (asc ? (a ? -1 : 1) : (a ? -1 : 1)) as CompareResult;\r\nexport const dateCompare = (asc = false) => (a = \"\", b = \"\") => (asc ? isBefore(a, b) ? -1 : 1 : isBefore(a, b) ? 1 : -1) as CompareResult;\r\n\r\n/**\r\n * Generate a comparator by passing in a map function to first map the inputs, then a regular comparator to do the comparing\r\n */\r\nexport const mapThenCompare = <A, B>(map: (a: A) => B) => (comparator: Comparator<B>) => (a: A, b: A) => comparator(map(a), map(b));\r\n\r\n/**\r\n * Combine multiple comparators together by falling through to next one if it returns EQ \r\n */\r\nexport const combineComparators = <A>(comparators: Comparator<A>[]) => comparators\r\n    .reduce((acc, comparator) => (a: A, b: A) => option.of(acc(a, b))\r\n        .map(res => res === 0 ? comparator(a, b) : res)\r\n        .getOrElse(() => 0), (a: A, b: A) => 0);    // eslint-disable-line @typescript-eslint/no-unused-vars\r\n\r\n/**\r\n * Custom comparators\r\n */\r\n// Sort value first or last\r\nexport const sortValueLast = (val: string, last = false) => mapThenCompare(x => x === val)(truthyCompareByDir(last));\r\n\r\n// Turn an array of values into an object where the key is the string value and\r\n//  the index in the array is the value\r\n\r\n/**\r\n * Convert an array of strings into an `Ordering`, using the index as the order\r\n */\r\nexport const valuesToOrdering = (values: string[]) => values.reduce((acc: { [k: string]: number }, val, ind) => ({ ...acc, [val]: ind }), {} as unknown as Record<string, number>);\r\nconst typeToOrdering = <A>(t: A) => (Object.keys(t) as unknown as [keyof A]).reduce((acc, val, ind) => ({ ...acc, [val]: ind}), {} as unknown as Record<keyof A, number>);\r\nconst orderingMap = <A>(o: Record<keyof A, number>) => fromEntries(Object.entries(o).map(([k, v]) => [v, k]) as unknown as [number, keyof A][]);\r\nexport const generateOrdering = <A>(a: A) => Arrow.of(\r\n    (ordering: Record<keyof A, number>) => Pair.of(\r\n        Arrow.of((o: Record<keyof A, number>) => (k: keyof A) => option.of(o[k])).run(ordering),\r\n        Arrow.of((m: Record<number, keyof A>) => (n: number) => option.of(m[n]))\r\n            .contramap<Record<keyof A, number>>(orderingMap)\r\n            .run(ordering),\r\n    ).merge((typeToOrdering, orderingToType) => ({ typeToOrdering, orderingToType })))\r\n    .contramap<A>(typeToOrdering)\r\n    .run(a);\r\n"]}