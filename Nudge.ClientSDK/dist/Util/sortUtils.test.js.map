{"version":3,"file":"sortUtils.test.js","sourceRoot":"","sources":["../../Util/sortUtils.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { alphaCompareByDir, numCompareByDir, truthyCompareByDir, mapThenCompare, combineComparators, sortValueLast } from \"./sortUtils\";\r\n\r\ndescribe(\"alphaCompareByDir\", () => {\r\n    it(\"can generate a string sort comparator ascending\", () => {\r\n        const sortAsc = alphaCompareByDir(true);\r\n\r\n        expect([\"a\", \"b\", \"c\"].sort(sortAsc)).toEqual([\"a\", \"b\", \"c\"]);\r\n        expect([\"b\", \"a\", \"c\"].sort(sortAsc)).toEqual([\"a\", \"b\", \"c\"]);\r\n        expect([\"c\", \"b\", \"a\"].sort(sortAsc)).toEqual([\"a\", \"b\", \"c\"]);\r\n        expect([\"a\", \"b\", \"b\", \"a\"].sort(sortAsc)).toEqual([\"a\", \"a\", \"b\", \"b\"]);\r\n    });\r\n\r\n    it(\"can generate a string sort comparator descending\", () => {\r\n        const sortDsc = alphaCompareByDir(false);\r\n\r\n        expect([\"c\", \"b\", \"a\"].sort(sortDsc)).toEqual([\"c\", \"b\", \"a\"]);\r\n        expect([\"b\", \"a\", \"c\"].sort(sortDsc)).toEqual([\"c\", \"b\", \"a\"]);\r\n        expect([\"a\", \"b\", \"c\"].sort(sortDsc)).toEqual([\"c\", \"b\", \"a\"]);\r\n        expect([\"a\", \"b\", \"b\", \"a\"].sort(sortDsc)).toEqual([\"b\", \"b\", \"a\", \"a\"]);\r\n    });\r\n});\r\n\r\ndescribe(\"numCompareByDir\", () => {\r\n    it(\"can generate a number sort comparator ascending\", () => {\r\n        const sortAsc = numCompareByDir(true);\r\n\r\n        expect([1, 2, 3].sort(sortAsc)).toEqual([1, 2, 3]);\r\n        expect([2, 1, 3].sort(sortAsc)).toEqual([1, 2, 3]);\r\n        expect([3, 2, 1].sort(sortAsc)).toEqual([1, 2, 3]);\r\n        expect([1, 2, 2, 1].sort(sortAsc)).toEqual([1, 1, 2, 2]);\r\n    });\r\n\r\n    it(\"can generate a number sort comparator descending\", () => {\r\n        const sortDsc = numCompareByDir(false);\r\n\r\n        expect([3, 2, 1].sort(sortDsc)).toEqual([3, 2, 1]);\r\n        expect([2, 1, 3].sort(sortDsc)).toEqual([3, 2, 1]);\r\n        expect([1, 2, 3].sort(sortDsc)).toEqual([3, 2, 1]);\r\n        expect([1, 2, 2, 1].sort(sortDsc)).toEqual([2, 2, 1, 1]);\r\n    })\r\n});\r\n\r\ndescribe(\"truthyCompareByDir\", () => {\r\n    it(\"can generate a truty sort comparator ascending\", () => {\r\n        const sortAsc = truthyCompareByDir(true);\r\n\r\n        expect([true, false, false].sort(sortAsc)).toEqual([false, false, true]);\r\n        expect([false, false, true].sort(sortAsc)).toEqual([false, false, true]);\r\n        expect([false, true, true].sort(sortAsc)).toEqual([false, true, true]);\r\n    });\r\n\r\n    it(\"can generate a truty sort comparator descending\", () => {\r\n        const sortDsc = truthyCompareByDir(false);\r\n\r\n        expect([true, false, false].sort(sortDsc)).toEqual([true, false, false]);\r\n        expect([false, false, true].sort(sortDsc)).toEqual([true, false, false]);\r\n        expect([false, true, true].sort(sortDsc)).toEqual([true, true, false]);\r\n    });\r\n});\r\n\r\ndescribe(\"mapThenCompareByDir\", () => {\r\n    it(\"can map input then compare\", () => {\r\n        const sortAsc = numCompareByDir(true);\r\n        const sortDsc = numCompareByDir(false);\r\n        \r\n        expect([true, false, true].sort(mapThenCompare(x => Number(x))(sortAsc))).toEqual([false, true, true]);\r\n        expect([\"c\", \"a\", \"z\", \"b\", \"a\", \"l\"].sort(mapThenCompare<string,number>(x => x.charCodeAt(0))(sortDsc))).toEqual([\"z\", \"l\", \"c\", \"b\", \"a\", \"a\"]);\r\n\r\n        const truthyAsc = truthyCompareByDir(true);\r\n        const list = [{name: \"peter\", isOld: true}, {name: \"paul\", isOld: true}, {name: \"mary\", isOld: false}];\r\n\r\n        interface Obj { [key: string]: any };\r\n        expect(list.sort(mapThenCompare<Obj,boolean>(p => p.isOld)(truthyAsc))).toEqual([{name: \"mary\", isOld: false}, {name:\"peter\", isOld: true}, {name:\"paul\", isOld: true}]);\r\n    });\r\n});\r\n\r\ndescribe(\"sortValueLast\", () => {\r\n    it(\"sorts specified value first or last\", () => {\r\n        const data = [\"one\", \"two\", \"three\"];\r\n        \r\n        expect(data.sort(sortValueLast(\"two\", true))).toEqual([\"one\", \"three\", \"two\"]);\r\n        expect(data.sort(sortValueLast(\"two\", false))).toEqual([\"two\", \"one\", \"three\"]);\r\n    })\r\n});\r\n\r\ndescribe(\"combineComparators\", () => {\r\n    it(\"combines comparators by falling through if EQ\", () => {\r\n        interface Character {\r\n            name: string;\r\n            age: number;\r\n        }\r\n        const data: Character[] = [{ name: \"Donald\", age: 5, }, { name: \"Donald\", age: 7 }, { name: \"Pluto\", age: 6 }, { name: \"Mickey\", age: 20 }];\r\n        const byNameThenAge = combineComparators([\r\n            mapThenCompare((c: Character) => c.name)(alphaCompareByDir(false)),\r\n            mapThenCompare((c: Character) => c.age)(numCompareByDir(false)),\r\n        ]);\r\n\r\n        expect(data.sort(byNameThenAge)).toEqual([{ name: \"Pluto\", age: 6 }, { name: \"Mickey\", age: 20 }, { name: \"Donald\", age: 7 }, { name: \"Donald\", age: 5, }]);\r\n    });\r\n})"]}