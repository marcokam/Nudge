{"version":3,"file":"CategoryLoggerFactory.js","sourceRoot":"","sources":["../../../Logging/Category/CategoryLoggerFactory.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,UAAU,EAAE,MAAM,cAAc,CAAC;AAC1C,OAAO,QAAQ,MAAM,iBAAiB,CAAC;AACvC,OAAO,OAAO,MAAM,gBAAgB,CAAC;AACrC,OAAO,cAAc,MAAM,kBAAkB,CAAC;AAC9C,OAAO,EAAE,OAAO,EAAE,MAAM,sBAAsB,CAAC;AAI/C;IAMI,sCAAY,wBAAkD,EAAE,cAA+B;QAA/F,iBAYC;QAED,cAAS,GAAG,UAAC,QAAkC;YAC3C,KAAI,CAAC,wBAAwB,GAAG,QAAQ,CAAC;YAEzC,+BAA+B;YAC/B,OAAO,CAAC,KAAI,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,UAAA,KAAK;gBACxC,OAAA,KAAK,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YAA1C,CAA0C,CAAC,CAAC;QACpD,CAAC,CAAA;QAED,WAAM,GAAG,UAAC,QAAgB,IAAK,OAAA,KAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAA/B,CAA+B,CAAC;QAEvD,yBAAoB,GAAG,UAAC,QAAgB;YAC5C,OAAA,IAAI,cAAc,CACd,KAAI,CAAC,wBAAwB,CAAC,GAAG,CAAC,QAAQ,CAAC,EAC3C,KAAI,CAAC,cAAc,CACtB;QAHD,CAGC,CAAC;QA3BF,IAAI,CAAC,wBAAwB,GAAG,wBAAwB,CAAC;QAEzD,wBAAwB;QACxB,IAAI,CAAC,cAAc,GAAG,cAAc;YAChC,CAAC,CAAC,UAAU,CAAC,cAAc,CAAC;gBACxB,CAAC,CAAC,cAA8B;gBAChC,CAAC,CAAC,cAAM,OAAA,cAAwB,EAAxB,CAAwB;YACpC,CAAC,CAAC,cAAM,OAAA,QAAQ,CAAC,MAAM,EAAf,CAAe,CAAC;QAE5B,kBAAkB;QAClB,IAAI,CAAC,OAAO,GAAG,IAAI,OAAO,CAAyB,IAAI,CAAC,oBAAoB,CAAC,CAAC;IAClF,CAAC;IAkBL,mCAAC;AAAD,CAAC,AApCD,IAoCC","sourcesContent":["import { Logger, CategorySettingsProvider, CategoryLoggerFactory } from \"../LoggingInterfaces\";\r\nimport { isFunction } from \"~/Util/utils\";\r\nimport registry from \"~/Util/registry\";\r\nimport LazyMap from \"~/Util/LazyMap\";\r\nimport CategoryLogger from \"./CategoryLogger\";\r\nimport { forEach } from \"~/Util/IterableUtils\";\r\n\r\nexport type LoggerProducer = (() => Logger) | Logger;\r\n\r\nexport default class DefaultCategoryLoggerFactory implements CategoryLoggerFactory {\r\n    \r\n    private readonly loggerProducer: () => Logger;\r\n    private categorySettingsProvider: CategorySettingsProvider;\r\n    private loggers: LazyMap<string, CategoryLogger>;\r\n\r\n    constructor(categorySettingsProvider: CategorySettingsProvider, loggerProducer?: LoggerProducer) {\r\n        this.categorySettingsProvider = categorySettingsProvider;\r\n        \r\n        // Setup Logger producer\r\n        this.loggerProducer = loggerProducer\r\n            ? isFunction(loggerProducer)\r\n                ? loggerProducer as () => Logger\r\n                : () => loggerProducer as Logger\r\n            : () => registry.logger;\r\n\r\n        // Set loggers map\r\n        this.loggers = new LazyMap<string, CategoryLogger>(this.createLoggerInternal);\r\n    }\r\n\r\n    configure = (settings: CategorySettingsProvider) => {\r\n        this.categorySettingsProvider = settings;\r\n\r\n        // Reconfigure existing loggers\r\n        forEach(this.loggers.values.entries(), entry => \r\n            entry[1].configure(settings.get(entry[0])));\r\n    }\r\n\r\n    create = (category: string) => this.loggers.getValue(category);\r\n\r\n    private createLoggerInternal = (category: string) =>\r\n        new CategoryLogger(\r\n            this.categorySettingsProvider.get(category),\r\n            this.loggerProducer\r\n        );\r\n\r\n}"]}