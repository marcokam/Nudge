{"version":3,"file":"CategoryLogger.js","sourceRoot":"","sources":["../../../Logging/Category/CategoryLogger.ts"],"names":[],"mappings":"AAAA,OAAO,QAAQ,MAAM,iBAAiB,CAAC;AACvC,OAAO,EAAsC,QAAQ,EAAE,MAAM,sBAAsB,CAAC;AAEpF;IAKI,wBAAY,eAAiC,EAAE,aAA4B;QAA3E,iBAGC;QAED,cAAS,GAAG,UAAC,QAA0B;YACnC,KAAI,CAAC,gBAAgB,GAAG,QAAQ,CAAC;QACrC,CAAC,CAAA;QAED,aAAQ,GAAG,UAAC,KAAe;YACvB,IAAI,KAAK,CAAC,KAAK,GAAG,KAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE;gBAC9C,OAAO;aACV;YACD,KAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;QACjC,CAAC,CAAA;QAED,UAAK,GAAG;YAAC,cAAY;iBAAZ,UAAY,EAAZ,qBAAY,EAAZ,IAAY;gBAAZ,yBAAY;;YAAK,OAAA,KAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC;QAAvC,CAAuC,CAAC;QAClE,YAAO,GAAG;YAAC,cAAY;iBAAZ,UAAY,EAAZ,qBAAY,EAAZ,IAAY;gBAAZ,yBAAY;;YAAK,OAAA,KAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,OAAO,EAAE,IAAI,CAAC;QAAzC,CAAyC,CAAC;QACtE,SAAI,GAAG;YAAC,cAAY;iBAAZ,UAAY,EAAZ,qBAAY,EAAZ,IAAY;gBAAZ,yBAAY;;YAAK,OAAA,KAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC;QAAtC,CAAsC,CAAC;QAChE,UAAK,GAAG;YAAC,cAAY;iBAAZ,UAAY,EAAZ,qBAAY,EAAZ,IAAY;gBAAZ,yBAAY;;YAAK,OAAA,KAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC;QAAvC,CAAuC,CAAC;QAC1D,iBAAY,GAAG,UAAC,KAAe,EAAE,IAAW;YAChD,IAAI,KAAK,GAAG,KAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE;gBACxC,OAAO;aACV;YACD,KAAI,CAAC,gBAAgB,CAAC,EAAE,KAAK,OAAA,EAAE,IAAI,EAAE,cAAM,OAAA,IAAI,EAAJ,CAAI,EAAE,CAAC,CAAC;QACvD,CAAC,CAAC;QAxBE,IAAI,CAAC,gBAAgB,GAAG,eAAe,CAAC;QACxC,IAAI,CAAC,aAAa,GAAG,aAAa,IAAI,CAAC,cAAM,OAAA,QAAQ,CAAC,MAAM,EAAf,CAAe,CAAC,CAAC;IAClE,CAAC;IAwBO,yCAAgB,GAAxB,UAAyB,KAAe;QACpC,IAAI,CAAC,aAAa,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IACzC,CAAC;IACL,qBAAC;AAAD,CAAC,AAnCD,IAmCC","sourcesContent":["import registry from \"~/Util/registry\";\r\nimport { Logger, CategorySettings, LogEvent, LogLevel } from \"../LoggingInterfaces\";\r\n\r\nexport default class CategoryLogger implements Logger {\r\n\r\n    private categorySettings: CategorySettings; \r\n    private readonly wrappedLogger: () => Logger;\r\n    \r\n    constructor(defaultSettings: CategorySettings, wrappedLogger?: () => Logger) {\r\n        this.categorySettings = defaultSettings;\r\n        this.wrappedLogger = wrappedLogger || (() => registry.logger);\r\n    }\r\n\r\n    configure = (settings: CategorySettings) => {\r\n        this.categorySettings = settings;\r\n    }\r\n\r\n    logEvent = (event: LogEvent): void => {\r\n        if (event.level > this.categorySettings.minLevel) {\r\n            return;\r\n        }\r\n        this.logEventInternal(event);\r\n    }\r\n\r\n    error = (...args: any) => this.logWithLevel(LogLevel.error, args);\r\n    warning = (...args: any) => this.logWithLevel(LogLevel.warning, args);\r\n    info = (...args: any) => this.logWithLevel(LogLevel.info, args);\r\n    debug = (...args: any) => this.logWithLevel(LogLevel.debug, args);\r\n    private logWithLevel = (level: LogLevel, args: any[]) => {\r\n        if (level > this.categorySettings.minLevel) {\r\n            return;\r\n        }\r\n        this.logEventInternal({ level, args: () => args });\r\n    };\r\n\r\n    private logEventInternal(event: LogEvent) {\r\n        this.wrappedLogger().logEvent(event);\r\n    }\r\n}"]}