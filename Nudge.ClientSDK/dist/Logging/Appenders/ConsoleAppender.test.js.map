{"version":3,"file":"ConsoleAppender.test.js","sourceRoot":"","sources":["../../../Logging/Appenders/ConsoleAppender.test.ts"],"names":[],"mappings":"AAAA,OAAO,eAAgC,MAAM,mBAAmB,CAAC;AACjE,OAAO,EAAE,QAAQ,EAAE,MAAM,sBAAsB,CAAC;AAK/C,CAAC;AAEF;IAAA;QAAA,iBAQC;QAPY,WAAM,GAAmB,EAAE,CAAC;QAE7B,eAAU,GAAG,UAAC,KAAe,IAAK,OAAA;YAAC,cAAc;iBAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;gBAAd,yBAAc;;YAAK,OAAA,KAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,KAAK,OAAA,EAAE,IAAI,MAAA,EAAE,CAAC;QAAjC,CAAiC,EAArD,CAAqD,CAAC;QAChG,UAAK,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACxC,SAAI,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QACzC,QAAG,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QACrC,UAAK,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IAC5C,CAAC;IAAD,kBAAC;AAAD,CAAC,AARD,IAQC;AAED,IAAM,SAAS,GAAG,UAAC,KAAe;IAC9B,IAAM,QAAQ,GAAG,IAAI,WAAW,EAAE,CAAC;IACnC,IAAM,QAAQ,GAAG,IAAI,eAAe,CAAC,QAAQ,CAAC,CAAC;IAC/C,IAAM,IAAI,GAAG,CAAE,CAAC,EAAE,OAAO,EAAE,KAAK,CAAE,CAAC;IACnC,QAAQ,CAAC,MAAM,CAAC,EAAE,KAAK,OAAA,EAAE,IAAI,EAAE,cAAM,OAAA,IAAI,EAAJ,CAAI,EAAE,CAAC,CAAA;IAC5C,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,EAAE,KAAK,OAAA,EAAE,IAAI,MAAA,EAAE,CAAC,CAAC,CAAC;AACvD,CAAC,CAAC;AAEF,EAAE,CAAC,YAAY,EAAE;IACb,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AAC9B,CAAC,CAAC,CAAC;AAEH,EAAE,CAAC,cAAc,EAAE;IACf,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;AAChC,CAAC,CAAC,CAAC;AAEH,EAAE,CAAC,WAAW,EAAE;IACZ,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;AAC7B,CAAC,CAAC,CAAC;AACH,EAAE,CAAC,YAAY,EAAE;IACb,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AAC9B,CAAC,CAAC,CAAC","sourcesContent":["import ConsoleAppender, { ConsoleLike } from \"./ConsoleAppender\";\r\nimport { LogLevel } from \"../LoggingInterfaces\";\r\n\r\ninterface ConsoleEntry {\r\n    level: LogLevel;\r\n    args: any[];\r\n};\r\n\r\nclass MockConsole implements ConsoleLike {\r\n    readonly events: ConsoleEntry[] = [];\r\n    \r\n    private createFunc = (level: LogLevel) => (...args: any[]) => this.events.push({ level, args });\r\n    error = this.createFunc(LogLevel.error);\r\n    warn = this.createFunc(LogLevel.warning);\r\n    log = this.createFunc(LogLevel.info);\r\n    debug = this.createFunc(LogLevel.debug);\r\n}\r\n\r\nconst testLevel = (level: LogLevel) => {\r\n    const mConsole = new MockConsole();\r\n    const appender = new ConsoleAppender(mConsole);\r\n    const args = [ 4, \"hello\", false ];\r\n    appender.append({ level, args: () => args })\r\n    expect(mConsole.events).toEqual([{ level, args }]);\r\n};\r\n\r\nit(\"test error\", () => {\r\n    testLevel(LogLevel.error);\r\n});\r\n\r\nit(\"test warning\", () => {\r\n    testLevel(LogLevel.warning);\r\n});\r\n\r\nit(\"test info\", () => {\r\n    testLevel(LogLevel.info);\r\n});\r\nit(\"test debug\", () => {\r\n    testLevel(LogLevel.debug);\r\n});\r\n"]}