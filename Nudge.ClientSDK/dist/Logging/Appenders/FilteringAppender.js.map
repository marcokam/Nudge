{"version":3,"file":"FilteringAppender.js","sourceRoot":"","sources":["../../../Logging/Appenders/FilteringAppender.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,WAAW,EAAE,MAAM,qBAAqB,CAAC;AAElD;IAKI,2BAAY,YAAsB,EAAE,YAAyB;QAA7D,iBAGC;QAED,WAAM,GAAG,UAAC,KAAe;YACrB,IAAI,KAAK,CAAC,KAAK,GAAG,KAAI,CAAC,YAAY,EAAE;gBACjC,OAAO,WAAW,CAAC;aACtB;YACD,OAAO,KAAI,CAAC,YAAY,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAC3C,CAAC,CAAA;QATG,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;IACrC,CAAC;IASL,wBAAC;AAAD,CAAC,AAjBD,IAiBC","sourcesContent":["import { LogAppender, LogEvent, LogLevel } from \"../LoggingInterfaces\";\r\nimport { voidPromise } from \"~/Util/PromiseUtils\";\r\n\r\nexport default class FilteringAppender implements LogAppender {\r\n\r\n    private readonly minimumLevel: LogLevel;\r\n    private readonly nextAppender: LogAppender;\r\n\r\n    constructor(minimumLevel: LogLevel, nextAppender: LogAppender) {\r\n        this.minimumLevel = minimumLevel;\r\n        this.nextAppender = nextAppender;\r\n    }\r\n\r\n    append = (event: LogEvent): Promise<void> => {\r\n        if (event.level > this.minimumLevel) {\r\n            return voidPromise;\r\n        }\r\n        return this.nextAppender.append(event);\r\n    }\r\n\r\n}"]}