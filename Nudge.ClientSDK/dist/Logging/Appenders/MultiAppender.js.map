{"version":3,"file":"MultiAppender.js","sourceRoot":"","sources":["../../../Logging/Appenders/MultiAppender.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,gBAAgB,EAAE,MAAM,qBAAqB,CAAC;AAEvD;IAII,uBAAY,cAA6B;QAAzC,iBAEC;QAED,WAAM,GAAG,UAAC,KAAe;YACrB,OAAO,gBAAgB,CAAC,KAAI,CAAC,cAAc,EAAE,UAAC,QAAqB,IAAK,OAAA,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,EAAtB,CAAsB,CAAC;iBAC1F,IAAI,EAAE,CAAC,CAAC,6CAA6C;QAC9D,CAAC,CAAA;QANG,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;IACzC,CAAC;IAOL,oBAAC;AAAD,CAAC,AAbD,IAaC","sourcesContent":["import { LogAppender, LogEvent } from \"../LoggingInterfaces\";\r\nimport { mapAndJoinErrors } from \"~/Util/PromiseUtils\";\r\n\r\nexport default class MultiAppender implements LogAppender {\r\n    \r\n    private readonly otherAppenders: LogAppender[];\r\n\r\n    constructor(otherAppenders: LogAppender[]) {\r\n        this.otherAppenders = otherAppenders;\r\n    }\r\n    \r\n    append = (event: LogEvent): Promise<void> => {\r\n        return mapAndJoinErrors(this.otherAppenders, (appender: LogAppender) => appender.append(event))\r\n            .then(); // Back to Promise<void> from Promise<void[]>\r\n    }\r\n\r\n}"]}