{"version":3,"file":"MultiAppender.test.js","sourceRoot":"","sources":["../../../Logging/Appenders/MultiAppender.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { LogAppender, LogEvent, LogLevel } from \"../LoggingInterfaces\";\r\nimport MultiAppender from \"./MultiAppender\";\r\nimport { voidPromise, emptyPromise } from \"~/Util/PromiseUtils\";\r\nimport HttpError from \"~/Api/Errors/HttpError\";\r\nimport AggregateError from \"~/Util/AggregateError\";\r\nimport { ApiResponse } from \"~/Api/ApiInterfaces\";\r\n\r\nclass MockAppender implements LogAppender {\r\n    readonly events: LogEvent[] = [];\r\n    append = (event: LogEvent) => { this.events.push(event); return voidPromise; }\r\n}\r\nclass ThrowingAppender implements LogAppender {\r\n    private readonly err: Error;\r\n    private readonly sync: boolean\r\n    constructor(err: Error, sync: boolean) {\r\n        this.err = err;\r\n        this.sync = sync;\r\n    }\r\n    append = () => {\r\n        if (this.sync) {\r\n            throw this.err;\r\n        }\r\n        return Promise.reject(this.err);\r\n    };\r\n}\r\nconst sampleErrorResponse: ApiResponse = {\r\n    ok: false,    \r\n    url: \"https://example.com/api/log/error\",\r\n    status: 500,\r\n    text: () => emptyPromise,\r\n    json: () => emptyPromise,\r\n    headers: null as any as Headers\r\n};\r\nconst sampleError = new HttpError(sampleErrorResponse);\r\n\r\nit(\"logs to both appenders\", () => {\r\n    const mock1 = new MockAppender();\r\n    const mock2 = new MockAppender();\r\n    const multi = new MultiAppender([mock1, mock2]);\r\n    const events: LogEvent[] = [\r\n        { level: LogLevel.error, args: () => [1] },\r\n        { level: LogLevel.error, args: () => [2] }\r\n    ];\r\n    events.forEach(multi.append);\r\n    expect(mock1.events).toEqual(events);\r\n    expect(mock2.events).toEqual(events);\r\n});\r\n\r\nit (\"throws sync error in single appender\", async () => {\r\n    const mock1 = new MockAppender();\r\n    const mock2 = new ThrowingAppender(sampleError, true);\r\n    const multi = new MultiAppender([mock1, mock2]);\r\n    const event = { level: LogLevel.error, args: () => [1] };\r\n    expect(multi.append(event)).rejects.toEqual(sampleError);\r\n})\r\n\r\nit (\"throws async error in single appender\", async () => {\r\n    const mock1 = new MockAppender();\r\n    const mock2 = new ThrowingAppender(sampleError, false);\r\n    const multi = new MultiAppender([mock1, mock2]);\r\n    const event = { level: LogLevel.error, args: () => [1] };\r\n    expect(multi.append(event)).rejects.toEqual(sampleError);\r\n})\r\n\r\nit (\"throws mixed errors in multiple appenders\", async () => {\r\n    const mock1 = new ThrowingAppender(sampleError, true);\r\n    const mock2 = new ThrowingAppender(sampleError, false);\r\n    const multi = new MultiAppender([mock1, mock2]);\r\n    const event = { level: LogLevel.error, args: () => [1] };\r\n    const expectedError = new AggregateError([sampleError, sampleError])\r\n    expect(multi.append(event)).rejects.toEqual(expectedError);\r\n})"]}