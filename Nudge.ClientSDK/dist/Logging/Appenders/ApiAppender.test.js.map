{"version":3,"file":"ApiAppender.test.js","sourceRoot":"","sources":["../../../Logging/Appenders/ApiAppender.test.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,OAAO,WAAW,EAAE,EAAE,qBAAqB,EAAE,0BAA0B,EAAE,MAAM,eAAe,CAAC;AAC/F,OAAO,gBAAgB,MAAM,wBAAwB,CAAC;AAEtD,OAAO,EAAY,QAAQ,EAAE,MAAM,sBAAsB,CAAC;AAC1D,OAAO,WAAW,MAAM,oBAAoB,CAAC;AAE7C,IAAM,iBAAiB,GAAG;IACtB,IAAM,QAAQ,GAAiB,EAAE,CAAC;IAClC,IAAM,OAAO,GAAG,UAAC,OAAmB;QAChC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACvB,IAAM,QAAQ,GAAgB;YAC1B,EAAE,EAAE,IAAI;YACR,GAAG,EAAE,OAAO,CAAC,GAAG;YAChB,MAAM,EAAE,GAAG;YACX,IAAI,EAAE,cAAM,OAAA,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,EAArB,CAAqB;YACjC,IAAI,EAAE,cAAM,OAAA,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,EAAnB,CAAmB;YAC/B,OAAO,EAAE,IAAsB;SAClC,CAAC;QACF,OAAO,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IACrC,CAAC,CAAA;IACD,OAAO;QACH,QAAQ,UAAA;QACR,OAAO,SAAA;KACV,CAAC;AACN,CAAC,CAAA;AACD,IAAM,SAAS,GAAG,8BAA8B,CAAC;AAEjD;IAAwB,6BAAW;IAAnC;;IAAsC,CAAC;IAAD,gBAAC;AAAD,CAAC,AAAvC,CAAwB,WAAW,GAAI;AACvC;IAA+B,oCAAW;IAA1C;;IAA6C,CAAC;IAAD,uBAAC;AAAD,CAAC,AAA9C,CAA+B,WAAW,GAAI;AAE9C,IAAM,YAAY,GAAG,UAAC,GAAQ,EAAE,SAAkB;IAC9C,IAAM,OAAO,GAAG,cAAM,OAAA,CAAC;QACnB,OAAO,EAAE,OAAO;KACnB,CAAC,EAFoB,CAEpB,CAAC;IACH,IAAM,MAAM,GAAG,qBAAqB,CAAC,kBAAkB,CAAC,CAAC;IACzD,IAAM,OAAO,GAAG,iBAAiB,EAAE,CAAC;IACpC,IAAM,SAAS,GAAG,IAAI,gBAAgB,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;IACxD,IAAM,WAAW,GAAG,IAAI,WAAW,CAAC,SAAS,EAAE,SAAS,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;IAE3E,IAAM,KAAK,GAAa;QACpB,KAAK,EAAE,QAAQ,CAAC,KAAK;QACrB,IAAI,EAAE,cAAM,OAAA,CAAE,GAAG,EAAE,MAAM,EAAE,MAAM,CAAE,EAAvB,CAAuB;KACtC,CAAC;IACF,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAE1B,IAAM,mBAAmB,GAAiB,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QACxD;YACI,GAAG,EAAK,SAAS,UAAO;YACxB,MAAM,EAAE,MAAM;YACd,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;gBACjB,OAAO,EAAE,WAAW;gBACpB,SAAS,EAAE,MAAM,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,WAAW,CAAC,IAAI;gBACtD,gBAAgB,EAAE,GAAG,CAAC,KAAK;gBAC3B,oBAAoB,EAAE,OAAO,EAAE;aAClC,CAAC;SACL;KACJ,CAAC;IACF,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC;AAC1D,CAAC,CAAC;AAGF,EAAE,CAAC,YAAY,EAAE,cAAM,OAAA,YAAY,CAAC,IAAI,SAAS,EAAE,EAAE,IAAI,CAAC,EAAnC,CAAmC,CAAC,CAAC;AAE5D,EAAE,CAAC,4BAA4B,EAAE,cAAM,OAAA,YAAY,CAAC,IAAI,gBAAgB,EAAE,EAAE,KAAK,CAAC,EAA3C,CAA2C,CAAC,CAAC;AAEpF,EAAE,CAAC,qCAAqC,EAAE;IACtC,IAAM,MAAM,GAAG,0BAA0B,CAAC,MAAM,CAAC,CAAC;IAClD,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,EAAE,EAAE,SAAS,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IACpF,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,EAAE,EAAE,SAAS,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AACvF,CAAC,CAAC,CAAC;AAEH,EAAE,CAAC,mCAAmC,EAAE;IACpC,IAAM,MAAM,GAAG,0BAA0B,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IAC1D,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,EAAE,EAAE,SAAS,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IACpF,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,EAAE,EAAE,SAAS,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AACvF,CAAC,CAAC,CAAC","sourcesContent":["import ApiAppender, { createExceptionFilter, createExceptionRegexFilter } from \"./ApiAppender\";\r\nimport DefaultApiClient from \"~/Api/DefaultApiClient\";\r\nimport { ApiRequest, ApiResponse } from \"~/Api/ApiInterfaces\";\r\nimport { LogEvent, LogLevel } from \"../LoggingInterfaces\";\r\nimport CustomError from \"~/Util/CustomError\";\r\n\r\nconst createMockInvoker = () => {\r\n    const requests: ApiRequest[] = [];\r\n    const invoker = (request: ApiRequest): Promise<ApiResponse> => {\r\n        requests.push(request);\r\n        const response: ApiResponse = {\r\n            ok: true,\r\n            url: request.url,\r\n            status: 200,\r\n            text: () => Promise.resolve(\"{}\"),\r\n            json: () => Promise.resolve({}),\r\n            headers: null as any as Headers\r\n        };\r\n        return Promise.resolve(response);\r\n    }\r\n    return {\r\n        requests,\r\n        invoker\r\n    };    \r\n}\r\nconst logPrefix = \"https://example.com/api/log/\";\r\n\r\nclass TestError extends CustomError { }    \r\nclass TestErrorIgnored extends CustomError { }\r\n\r\nconst testLogError = (err: any, shouldLog: boolean) => {\r\n    const ambient = () => ({\r\n        \"hello\": \"world\"\r\n    });\r\n    const filter = createExceptionFilter(\"TestErrorIgnored\");\r\n    const invoker = createMockInvoker();\r\n    const apiClient = new DefaultApiClient(invoker.invoker);\r\n    const apiAppender = new ApiAppender(apiClient, logPrefix, ambient, filter);\r\n    \r\n    const event: LogEvent = {\r\n        level: LogLevel.error,\r\n        args: () => [ err, \"arg1\", \"arg2\" ]\r\n    };\r\n    apiAppender.append(event);\r\n\r\n    const expectedApiRequests: ApiRequest[] = !shouldLog ? [] : [\r\n        {\r\n            url: `${logPrefix}error`,\r\n            method: \"POST\",\r\n            body: JSON.stringify({\r\n                message: \"arg1 arg2\",\r\n                exception: Object.getPrototypeOf(err).constructor.name,\r\n                exceptionDetails: err.stack,\r\n                additionalProperties: ambient()\r\n            })\r\n        }\r\n    ];\r\n    expect(invoker.requests).toEqual(expectedApiRequests);\r\n};\r\n\r\n\r\nit(\"logs error\", () => testLogError(new TestError(), true));\r\n\r\nit(\"does not log ignored error\", () => testLogError(new TestErrorIgnored(), false));\r\n\r\nit(\"filters errors with exception regex\", () => {\r\n    const filter = createExceptionRegexFilter(/foo/i);\r\n    expect(filter(LogLevel.error, { exception: \"FOO\", message: \"bar\" })).toEqual(false);\r\n    expect(filter(LogLevel.error, { exception: \"BAR\", message: \"bar\" })).toEqual(true);\r\n});\r\n\r\nit(\"filters errors with message regex\", () => {\r\n    const filter = createExceptionRegexFilter(/foo/i, /bar/i);\r\n    expect(filter(LogLevel.error, { exception: \"FOO\", message: \"bar\" })).toEqual(false);\r\n    expect(filter(LogLevel.error, { exception: \"FOO\", message: \"foo\" })).toEqual(true);\r\n});\r\n"]}