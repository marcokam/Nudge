{"version":3,"file":"ConsoleAppender.js","sourceRoot":"","sources":["../../../Logging/Appenders/ConsoleAppender.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAyB,QAAQ,EAAE,MAAM,sBAAsB,CAAC;AACvE,OAAO,EAAE,WAAW,EAAE,MAAM,qBAAqB,CAAC;AAUlD;IAII,0BAA0B;IAC1B,yBAAY,WAAkC;QAA9C,iBAQC;QARW,4BAAA,EAAA,qBAAkC;QAU9C,WAAM,GAAG,UAAC,KAAe;YACrB,IAAM,IAAI,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC;YAC1B,IAAM,IAAI,GAAG,KAAI,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YACvC,IAAI,CAAC,IAAI,EAAE;gBACP,MAAM,KAAK,CAAC,qBAAqB,CAAC,CAAC;aACtC;YACD,IAAI,wBAAI,IAAI,GAAE;YACd,OAAO,WAAW,CAAC;QACvB,CAAC,CAAA;QAEO,YAAO,GAAG,UAAC,QAAkB;YACjC,QAAQ,QAAQ,EAAE;gBACd,KAAK,QAAQ,CAAC,KAAK,CAAC,CAAC,OAAO,KAAI,CAAC,WAAW,CAAC,KAAK,CAAC;gBACnD,KAAK,QAAQ,CAAC,OAAO,CAAC,CAAC,OAAO,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC;gBACpD,KAAK,QAAQ,CAAC,IAAI,CAAC,CAAC,OAAO,KAAI,CAAC,WAAW,CAAC,GAAG,CAAC;gBAChD,KAAK,QAAQ,CAAC,KAAK,CAAC,CAAC,OAAO,KAAI,CAAC,WAAW,CAAC,KAAK,CAAC;gBACnD,OAAO,CAAC,CAAC,OAAO,IAAI,CAAC;aACxB;QACL,CAAC,CAAA;QA3BG,gCAAgC;QAChC,IAAI,CAAC,WAAW,GAAG;YACf,KAAK,EAAE,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC;YAC1C,IAAI,EAAE,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC;YACxC,GAAG,EAAE,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC;YACtC,KAAK,EAAE,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC;SAC7C,CAAC;IACN,CAAC;IAsBL,sBAAC;AAAD,CAAC,AAnCD,IAmCC","sourcesContent":["import { LogAppender, LogEvent, LogLevel } from \"../LoggingInterfaces\";\r\nimport { voidPromise } from \"~/Util/PromiseUtils\";\r\n\r\nexport interface ConsoleLike {\r\n    error: ConsoleFunc;\r\n    warn: ConsoleFunc;\r\n    log: ConsoleFunc;\r\n    debug: ConsoleFunc;\r\n}\r\ntype ConsoleFunc = (message?: any, ...optionalParams: any[]) => void;\r\n\r\nexport default class ConsoleAppender implements LogAppender {\r\n    \r\n    private readonly consoleLike: ConsoleLike;\r\n\r\n    /* eslint no-console: 0 */\r\n    constructor(consoleLike: ConsoleLike = console) {\r\n        // Bind this onto console object\r\n        this.consoleLike = {\r\n            error: consoleLike.error.bind(consoleLike),\r\n            warn: consoleLike.warn.bind(consoleLike),\r\n            log: consoleLike.log.bind(consoleLike),\r\n            debug: consoleLike.debug.bind(consoleLike),\r\n        };\r\n    }\r\n\r\n    append = (event: LogEvent): Promise<void> => {\r\n        const args = event.args();\r\n        const func = this.getFunc(event.level);\r\n        if (!func) {\r\n            throw Error(\"Unknown event level\");            \r\n        }\r\n        func(...args);\r\n        return voidPromise;\r\n    }\r\n\r\n    private getFunc = (logLevel: LogLevel) => {\r\n        switch (logLevel) {\r\n            case LogLevel.error: return this.consoleLike.error;\r\n            case LogLevel.warning: return this.consoleLike.warn;\r\n            case LogLevel.info: return this.consoleLike.log;\r\n            case LogLevel.debug: return this.consoleLike.debug;\r\n            default: return null;\r\n        }\r\n    }\r\n\r\n}"]}