{"version":3,"file":"LoggingInterfaces.js","sourceRoot":"","sources":["../../Logging/LoggingInterfaces.ts"],"names":[],"mappings":"AAAA,MAAM,CAAN,IAAY,QAKX;AALD,WAAY,QAAQ;IAChB,yCAAS,CAAA;IACT,6CAAW,CAAA;IACX,uCAAQ,CAAA;IACR,yCAAS,CAAA;AACb,CAAC,EALW,QAAQ,KAAR,QAAQ,QAKnB;AAAA,CAAC","sourcesContent":["export enum LogLevel {\r\n    error = 0,\r\n    warning = 1,\r\n    info = 2,\r\n    debug = 3,\r\n};\r\n\r\nexport interface LogEvent {\r\n    level: LogLevel;\r\n    // This is deferred as we might perform some resolution on these args\r\n    // and we only want to do that if the level passes filtering and an\r\n    // Appender actually \r\n    args: () => any[];\r\n}\r\n\r\nexport interface CategorySettings {\r\n    minLevel: LogLevel;\r\n}\r\n\r\nexport interface CategorySettingsProvider {\r\n    get(category: string): CategorySettings;\r\n}\r\n\r\nexport interface CategoryLoggerFactory {\r\n    create(category: string): Logger;\r\n    configure(categorySettingsProvider: CategorySettingsProvider): void;\r\n}\r\n\r\nexport interface Logger {\r\n    error(...args: any): void;\r\n    warning(...args: any): void;\r\n    info(...args: any): void;\r\n    debug(...args: any): void;\r\n    logEvent(event: LogEvent): void;    \r\n}\r\n\r\nexport interface LogAppender {\r\n    append(event: LogEvent): Promise<void>;\r\n}\r\n\r\nexport interface LogArgumentResolver {\r\n    resolve(args: any[]): any[];    \r\n}\r\n"]}