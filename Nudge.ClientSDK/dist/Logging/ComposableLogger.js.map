{"version":3,"file":"ComposableLogger.js","sourceRoot":"","sources":["../../Logging/ComposableLogger.ts"],"names":[],"mappings":"AAAA,OAAO,EAA4C,QAAQ,EAAY,MAAM,qBAAqB,CAAC;AACnG,OAAO,SAAS,MAAM,kBAAkB,CAAC;AAEzC;IAMI,0BAAY,QAAqB,EAAE,gBAAqC;QAAxE,iBAGC;QAED,aAAQ,GAAG,UAAC,KAAe;YACvB,IAAI;gBACA,KAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,KAAI,CAAC,oBAAoB,CAAC,CAAC;aAC1D;YAAC,OAAO,GAAG,EAAE;gBACV,KAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC;aAClC;QACL,CAAC,CAAA;QAED,UAAK,GAAG;YAAC,cAAY;iBAAZ,UAAY,EAAZ,qBAAY,EAAZ,IAAY;gBAAZ,yBAAY;;YAAK,OAAA,KAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC;QAAvC,CAAuC,CAAC;QAClE,YAAO,GAAG;YAAC,cAAY;iBAAZ,UAAY,EAAZ,qBAAY,EAAZ,IAAY;gBAAZ,yBAAY;;YAAK,OAAA,KAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,OAAO,EAAE,IAAI,CAAC;QAAzC,CAAyC,CAAC;QACtE,SAAI,GAAG;YAAC,cAAY;iBAAZ,UAAY,EAAZ,qBAAY,EAAZ,IAAY;gBAAZ,yBAAY;;YAAK,OAAA,KAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC;QAAtC,CAAsC,CAAC;QAChE,UAAK,GAAG;YAAC,cAAY;iBAAZ,UAAY,EAAZ,qBAAY,EAAZ,IAAY;gBAAZ,yBAAY;;YAAK,OAAA,KAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC;QAAvC,CAAuC,CAAC;QAC1D,iBAAY,GAAG,UAAC,KAAe,EAAE,IAAW,IAAK,OAAA,KAAI,CAAC,QAAQ,CAAC,EAAE,KAAK,OAAA,EAAE,IAAI,EAAE,cAAM,OAAA,IAAI,EAAJ,CAAI,EAAE,CAAC,EAA1C,CAA0C,CAAC;QAE5F,cAAS,GAAG,UAAC,KAAe;YAChC,OAAO,KAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;gBACxB,KAAK,EAAE,KAAK,CAAC,KAAK;gBAClB,IAAI,EAAE,IAAI,SAAS,CAAC,cAAM,OAAA,KAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,EAA3C,CAA2C,CAAC,CAAC,QAAQ;aAClF,CAAC,CAAC;QACP,CAAC,CAAA;QAEO,yBAAoB,GAAG,UAAC,GAAU;YACtC,IAAI;gBACA,4DAA4D;gBAC5D,wDAAwD;gBACxD,sDAAsD;gBACtD,oCAAoC;gBACpC,KAAI,CAAC,SAAS,CAAC,EAAE,KAAK,EAAE,QAAQ,CAAC,KAAK,EAAE,IAAI,EAAE,cAAM,OAAA,CAAC,qBAAqB,EAAE,GAAG,CAAC,EAA5B,CAA4B,EAAE,CAAC,CAAC,KAAK,CAAC,cAAO,CAAC,CAAC,CAAC;aACvG;YAAC,OAAO,OAAO,EAAE;gBACd,OAAO;aACV;QACL,CAAC,CAAA;QAnCG,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;IAC7C,CAAC;IAkCL,uBAAC;AAAD,CAAC,AA3CD,IA2CC","sourcesContent":["import { Logger, LogAppender, LogArgumentResolver, LogLevel, LogEvent } from \"./LoggingInterfaces\";\r\nimport LazyValue from \"~/Util/LazyValue\";\r\n\r\nexport default class ComposableLogger implements Logger {\r\n    \r\n    private readonly appender: LogAppender;\r\n    //TODO: Move argumentResolver into an appender. \r\n    private readonly argumentResolver: LogArgumentResolver;\r\n    \r\n    constructor(appender: LogAppender, argumentResolver: LogArgumentResolver) {\r\n        this.appender = appender;\r\n        this.argumentResolver = argumentResolver;\r\n    }\r\n\r\n    logEvent = (event: LogEvent): void => {\r\n        try {\r\n            this.logUnsafe(event).catch(this.logErrorWhileLogging);\r\n        } catch (err) {\r\n            this.logErrorWhileLogging(err);\r\n        }\r\n    }\r\n\r\n    error = (...args: any) => this.logWithLevel(LogLevel.error, args);\r\n    warning = (...args: any) => this.logWithLevel(LogLevel.warning, args);\r\n    info = (...args: any) => this.logWithLevel(LogLevel.info, args);\r\n    debug = (...args: any) => this.logWithLevel(LogLevel.debug, args);\r\n    private logWithLevel = (level: LogLevel, args: any[]) => this.logEvent({ level, args: () => args });\r\n\r\n    private logUnsafe = (event: LogEvent): Promise<void> => {\r\n        return this.appender.append({\r\n            level: event.level,\r\n            args: new LazyValue(() => this.argumentResolver.resolve(event.args())).getValue\r\n        });\r\n    }\r\n\r\n    private logErrorWhileLogging = (err: Error) => {\r\n        try {\r\n            // Since we are calling to external code in order to resolve\r\n            // the true values (ie the message argument), exceptions\r\n            // above may not actually be problems with the logger.\r\n            // Attempt to log this new exception\r\n            this.logUnsafe({ level: LogLevel.error, args: () => [\"Error while logging\", err] }).catch(() => {});\r\n        } catch (ignored) {\r\n            // noop\r\n        }\r\n    }\r\n}\r\n"]}