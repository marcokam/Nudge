{"version":3,"file":"BufferedLogger.js","sourceRoot":"","sources":["../../Logging/BufferedLogger.ts"],"names":[],"mappings":"AAAA,OAAO,EAAU,QAAQ,EAAY,MAAM,qBAAqB,CAAC;AAEjE;IAAA;QAAA,iBAsCC;QApCW,UAAK,GAAe,EAAE,CAAC;QACvB,YAAO,GAAkB,IAAI,CAAC;QAetC,aAAQ,GAAG,UAAC,KAAe;YACvB,IAAI,KAAI,CAAC,OAAO,EAAE;gBACd,KAAI,CAAC,UAAU,CAAC,KAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;aACxC;iBAAM;gBACH,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aAC1B;QACL,CAAC,CAAA;QAED,UAAK,GAAG;YAAC,cAAY;iBAAZ,UAAY,EAAZ,qBAAY,EAAZ,IAAY;gBAAZ,yBAAY;;YAAW,OAAA,KAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC;QAA3C,CAA2C,CAAC;QAC5E,YAAO,GAAG;YAAC,cAAY;iBAAZ,UAAY,EAAZ,qBAAY,EAAZ,IAAY;gBAAZ,yBAAY;;YAAW,OAAA,KAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,OAAO,EAAE,IAAI,CAAC;QAA7C,CAA6C,CAAC;QAChF,SAAI,GAAG;YAAC,cAAY;iBAAZ,UAAY,EAAZ,qBAAY,EAAZ,IAAY;gBAAZ,yBAAY;;YAAW,OAAA,KAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC;QAA1C,CAA0C,CAAC;QAC1E,UAAK,GAAG;YAAC,cAAY;iBAAZ,UAAY,EAAZ,qBAAY,EAAZ,IAAY;gBAAZ,yBAAY;;YAAW,OAAA,KAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC;QAA3C,CAA2C,CAAC;QAEpE,qBAAgB,GAAG,UAAC,KAAe,EAAE,IAAW;YACpD,KAAI,CAAC,QAAQ,CAAC,EAAE,KAAK,OAAA,EAAE,IAAI,EAAE,cAAM,OAAA,IAAI,EAAJ,CAAI,EAAE,CAAC,CAAC;QAC/C,CAAC,CAAA;QAEO,eAAU,GAAG,UAAC,OAAe,EAAE,KAAe;YAClD,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QAC5B,CAAC,CAAA;IACL,CAAC;IAjCG,kCAAS,GAAT,UAAU,OAAe;QACrB,IAAI,IAAI,CAAC,OAAO,EAAE;YACd,MAAM,IAAI,KAAK,CAAC,+CAA+C,CAAC,CAAC;SACpE;QACD,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QAEvB,cAAc;QACd,IAAI,OAAO,GAAyB,SAAS,CAAC;QAC9C,OAAO,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,EAAE;YACjC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;SAC1C;IACL,CAAC;IAsBL,qBAAC;AAAD,CAAC,AAtCD,IAsCC","sourcesContent":["import { Logger, LogLevel, LogEvent } from \"./LoggingInterfaces\";\r\n\r\nexport default class BufferedLogger implements Logger {\r\n    \r\n    private queue: LogEvent[] = [];\r\n    private wrapped: Logger | null = null;\r\n\r\n    setLogger(wrapped: Logger) {\r\n        if (this.wrapped) {\r\n            throw new Error(\"Attempt to setLogger when logger already set.\");\r\n        }\r\n        this.wrapped = wrapped;\r\n\r\n        // Flush queue\r\n        let current: LogEvent | undefined = undefined;\r\n        while (current = this.queue.shift()) {\r\n            this.sendDirect(this.wrapped, current);\r\n        }\r\n    }\r\n\r\n    logEvent = (event: LogEvent): void => {\r\n        if (this.wrapped) {\r\n            this.sendDirect(this.wrapped, event);\r\n        } else {\r\n            this.queue.push(event);\r\n        }\r\n    }\r\n\r\n    error = (...args: any): void => this.enqueueWithLevel(LogLevel.error, args);\r\n    warning = (...args: any): void => this.enqueueWithLevel(LogLevel.warning, args);\r\n    info = (...args: any): void => this.enqueueWithLevel(LogLevel.info, args);\r\n    debug = (...args: any): void => this.enqueueWithLevel(LogLevel.debug, args);\r\n\r\n    private enqueueWithLevel = (level: LogLevel, args: any[]): void => {        \r\n        this.logEvent({ level, args: () => args });\r\n    }\r\n\r\n    private sendDirect = (wrapped: Logger, event: LogEvent): void => {\r\n        wrapped.logEvent(event);\r\n    }\r\n}\r\n"]}