{"version":3,"file":"LoggerInitialization.js","sourceRoot":"","sources":["../../Logging/LoggerInitialization.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,qBAAqB,CAAC;AAE/C,OAAO,8BAA8B,MAAM,2CAA2C,CAAC;AACvF,OAAO,QAAQ,MAAM,iBAAiB,CAAC;AACvC,OAAO,gBAAgB,MAAM,oBAAoB,CAAC;AAClD,OAAO,aAAa,MAAM,2BAA2B,CAAC;AACtD,OAAO,iBAAiB,MAAM,+BAA+B,CAAC;AAC9D,OAAO,eAAe,MAAM,6BAA6B,CAAC;AAC1D,OAAO,WAAW,EAAE,EAAE,WAAW,EAAa,MAAM,yBAAyB,CAAC;AAC9E,OAAO,wBAAwB,MAAM,8CAA8C,CAAC;AACpF,OAAO,EAAE,qBAAqB,EAAE,kCAAkC,EAAE,MAAM,mBAAmB,CAAC;AAa9F,MAAM,CAAC,IAAM,oBAAoB,GAAG,UAChC,aAA4B,EAC5B,cAA8B,EAC9B,YAAoB,EACpB,iBAAwC,EACxC,YAAwB;IAGpB,IAAA,uEAA2B,EAC3B,6CAAc,EACd,uCAAwB,EACxB,+BAAgB,CACF;IAElB,iCAAiC;IACjC,IAAM,uBAAuB,GAAG,EAAE,QAAQ,EAAE,2BAA2B,EAAE,CAAC;IAC1E,IAAM,QAAQ,GAAG,cAAc,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,KAAK,EAAE,EAAE,QAAQ,EAAE,QAAQ,CAAC,KAAK,EAAE,EAAE,CAAC,EAAjD,CAAiD,CAAC,CAAC;IAC5F,IAAM,wBAAwB,GAAG,IAAI,8BAA8B,CAAC,uBAAuB,EAAE,QAAQ,CAAC,CAAC;IACvG,QAAQ,CAAC,eAAe,CAAC,SAAS,CAAC,wBAAwB,CAAC,CAAC;IAE7D,wBAAwB;IACxB,IAAM,MAAM,GAAG,IAAI,gBAAgB,CAC/B,IAAI,aAAa,CAAC;QACd,IAAI,iBAAiB,CACjB,eAAe,CAAC,YAAY,EAC5B,IAAI,eAAe,EAAE,CACxB;QACD,IAAI,iBAAiB,CACjB,WAAW,CAAC,YAAY,EACxB,IAAI,WAAW,CAAC,QAAQ,CAAC,SAAS,EAAE,YAAY,EAAE,iBAAiB,EAAE,YAAY,CAAC,CACrF;KACJ,CAAC,EACF,IAAI,wBAAwB,EAAE,CACjC,CAAC;IACF,QAAQ,CAAC,MAAM,GAAG,MAAM,CAAC;IAEzB,4CAA4C;IAC5C,cAAc,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;IAE1C,sBAAsB;IACtB,qBAAqB,EAAE,CAAC;IACxB,kCAAkC,EAAE,CAAC;AACzC,CAAC,CAAC;AAEF,mDAAmD;AACnD,2FAA2F;AAC3F,MAAM,CAAC,IAAM,mBAAmB,GAAG,UAAC,cAA8B,EAAE,qBAA6B,EAAE,aAA4B;IAC3H,IAAM,iBAAiB,GAAG,EAAE,CAAC;IAC7B,OAAO,oBAAoB,CAAC,aAAa,EAAE,cAAc,EAAK,qBAAqB,iBAAc,EAAE,cAAM,OAAA,iBAAiB,EAAjB,CAAiB,EAAE,WAAW,CAAC,CAAC;AAC7I,CAAC,CAAA","sourcesContent":["import { LogLevel } from \"./LoggingInterfaces\";\r\nimport BufferedLogger from \"./BufferedLogger\";\r\nimport CustomCategorySettingsProvider from \"./Category/CustomCategorySettingsProvider\";\r\nimport registry from \"~/Util/registry\";\r\nimport ComposableLogger from \"./ComposableLogger\";\r\nimport MultiAppender from \"./Appenders/MultiAppender\";\r\nimport FilteringAppender from \"./Appenders/FilteringAppender\";\r\nimport ConsoleAppender from \"./Appenders/ConsoleAppender\";\r\nimport ApiAppender, { abortFilter, LogFilter } from \"./Appenders/ApiAppender\";\r\nimport FunctionArgumentResolver from \"./ArgumentResolvers/FunctionArgumentResolver\";\r\nimport { setupWindowErrorEvent, setupWindowUnhandledRejectionEvent } from \"./LogWindowEvents\";\r\n\r\nexport interface LoggingConfig {\r\n    defaultCategoryMinimumLevel: LogLevel;\r\n    showCategories: string[];\r\n    console: {\r\n        minimumLevel: LogLevel;\r\n    };\r\n    api: {\r\n        minimumLevel: LogLevel;\r\n    };\r\n}\r\n\r\nexport const setupStandardLogger2 = (\r\n    loggingConfig: LoggingConfig, \r\n    bufferedLogger: BufferedLogger, \r\n    logApiPrefix: string, \r\n    ambientProperties: () => any | undefined, \r\n    apiLogFilter?: LogFilter\r\n) => {\r\n    const { \r\n        defaultCategoryMinimumLevel,\r\n        showCategories,\r\n        console: consoleSettings,\r\n        api: apiSettings\r\n    } = loggingConfig;\r\n    \r\n    // Logger Category configurations\r\n    const defaultCategorySettings = { minLevel: defaultCategoryMinimumLevel };\r\n    const explicit = showCategories.map(c => ({ key: c, value: { minLevel: LogLevel.debug } }));    \r\n    const categorySettingsProvider = new CustomCategorySettingsProvider(defaultCategorySettings, explicit);\r\n    registry.categoryLoggers.configure(categorySettingsProvider);\r\n\r\n    // Setup the real logger\r\n    const logger = new ComposableLogger(\r\n        new MultiAppender([\r\n            new FilteringAppender(\r\n                consoleSettings.minimumLevel, \r\n                new ConsoleAppender()\r\n            ),\r\n            new FilteringAppender(\r\n                apiSettings.minimumLevel,\r\n                new ApiAppender(registry.apiClient, logApiPrefix, ambientProperties, apiLogFilter)\r\n            )\r\n        ]),\r\n        new FunctionArgumentResolver()\r\n    );\r\n    registry.logger = logger;\r\n\r\n    // Flush the buffered logger to the real one\r\n    bufferedLogger.setLogger(registry.logger);\r\n\r\n    // Setup window events\r\n    setupWindowErrorEvent();\r\n    setupWindowUnhandledRejectionEvent();\r\n};\r\n\r\n// Overload currently used by Widgets and MobileUI.\r\n//TODO: change these consumers to use setupStandardLogger2 and then rename and remove the 2\r\nexport const setupStandardLogger = (bufferedLogger: BufferedLogger, securityManagementUrl: string, loggingConfig: LoggingConfig) => {\r\n    const ambientProperties = {};\r\n    return setupStandardLogger2(loggingConfig, bufferedLogger, `${securityManagementUrl}/api/v1/log/`, () => ambientProperties, abortFilter);\r\n}\r\n    \r\n"]}